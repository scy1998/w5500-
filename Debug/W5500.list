
W5500.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008014  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c0  080081c4  080081c4  000181c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008384  08008384  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008384  08008384  00018384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800838c  0800838c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800838c  0800838c  0001838c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008390  08008390  00018390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008394  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013a4  20000074  08008408  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001418  08008408  00021418  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001724b  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003181  00000000  00000000  000372ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001448  00000000  00000000  0003a470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012f0  00000000  00000000  0003b8b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c9b9  00000000  00000000  0003cba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019183  00000000  00000000  00069561  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00107375  00000000  00000000  000826e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00189a59  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c40  00000000  00000000  00189aac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080081ac 	.word	0x080081ac

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	080081ac 	.word	0x080081ac

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <GPIO_ResetBits>:
unsigned short global_size;



void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	460b      	mov	r3, r1
 800059e:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 80005a0:	887b      	ldrh	r3, [r7, #2]
 80005a2:	2200      	movs	r2, #0
 80005a4:	4619      	mov	r1, r3
 80005a6:	6878      	ldr	r0, [r7, #4]
 80005a8:	f002 fb08 	bl	8002bbc <HAL_GPIO_WritePin>
}
 80005ac:	bf00      	nop
 80005ae:	3708      	adds	r7, #8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}

080005b4 <GPIO_SetBits>:
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
 80005bc:	460b      	mov	r3, r1
 80005be:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 80005c0:	887b      	ldrh	r3, [r7, #2]
 80005c2:	2201      	movs	r2, #1
 80005c4:	4619      	mov	r1, r3
 80005c6:	6878      	ldr	r0, [r7, #4]
 80005c8:	f002 faf8 	bl	8002bbc <HAL_GPIO_WritePin>
}
 80005cc:	bf00      	nop
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <SPI_WriteByte>:

void SPI_WriteByte(uint8_t Send)
{ 
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	4603      	mov	r3, r0
 80005dc:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(&hspi3,&Send,1,0xffff);
 80005de:	1df9      	adds	r1, r7, #7
 80005e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005e4:	2201      	movs	r2, #1
 80005e6:	4808      	ldr	r0, [pc, #32]	; (8000608 <SPI_WriteByte+0x34>)
 80005e8:	f003 ff27 	bl	800443a <HAL_SPI_Transmit>
while(HAL_SPI_GetState(&hspi3) == HAL_SPI_STATE_BUSY_RX);
 80005ec:	bf00      	nop
 80005ee:	4806      	ldr	r0, [pc, #24]	; (8000608 <SPI_WriteByte+0x34>)
 80005f0:	f004 fbd4 	bl	8004d9c <HAL_SPI_GetState>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b04      	cmp	r3, #4
 80005f8:	d0f9      	beq.n	80005ee <SPI_WriteByte+0x1a>
SPI3->DR;
 80005fa:	4b04      	ldr	r3, [pc, #16]	; (800060c <SPI_WriteByte+0x38>)
 80005fc:	68db      	ldr	r3, [r3, #12]
}
 80005fe:	bf00      	nop
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	200010b4 	.word	0x200010b4
 800060c:	40003c00 	.word	0x40003c00

08000610 <SPI_WriteNBytes>:

void SPI_WriteNBytes(uint8_t *Send,uint16_t len)
{ 
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
 8000618:	460b      	mov	r3, r1
 800061a:	807b      	strh	r3, [r7, #2]
HAL_SPI_Transmit(&hspi3,Send,len,0xffff);
 800061c:	887a      	ldrh	r2, [r7, #2]
 800061e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000622:	6879      	ldr	r1, [r7, #4]
 8000624:	4807      	ldr	r0, [pc, #28]	; (8000644 <SPI_WriteNBytes+0x34>)
 8000626:	f003 ff08 	bl	800443a <HAL_SPI_Transmit>
while(HAL_SPI_GetState(&hspi3) == HAL_SPI_STATE_BUSY_RX);
 800062a:	bf00      	nop
 800062c:	4805      	ldr	r0, [pc, #20]	; (8000644 <SPI_WriteNBytes+0x34>)
 800062e:	f004 fbb5 	bl	8004d9c <HAL_SPI_GetState>
 8000632:	4603      	mov	r3, r0
 8000634:	2b04      	cmp	r3, #4
 8000636:	d0f9      	beq.n	800062c <SPI_WriteNBytes+0x1c>
SPI3->DR;
 8000638:	4b03      	ldr	r3, [pc, #12]	; (8000648 <SPI_WriteNBytes+0x38>)
 800063a:	68db      	ldr	r3, [r3, #12]
}
 800063c:	bf00      	nop
 800063e:	3708      	adds	r7, #8
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	200010b4 	.word	0x200010b4
 8000648:	40003c00 	.word	0x40003c00

0800064c <SPI_ReadByte>:

uint8_t SPI_ReadByte(void)
{ 
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
uint8_t Rcv=0;
 8000652:	2300      	movs	r3, #0
 8000654:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Receive(&hspi3,&Rcv,1,0XFFFF);
 8000656:	1df9      	adds	r1, r7, #7
 8000658:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800065c:	2201      	movs	r2, #1
 800065e:	4804      	ldr	r0, [pc, #16]	; (8000670 <SPI_ReadByte+0x24>)
 8000660:	f004 f859 	bl	8004716 <HAL_SPI_Receive>
return Rcv;
 8000664:	79fb      	ldrb	r3, [r7, #7]
}
 8000666:	4618      	mov	r0, r3
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	200010b4 	.word	0x200010b4

08000674 <SPI_ReadNByte>:
void SPI_ReadNByte(uint8_t *buf,uint16_t len)
{ 
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
 800067c:	460b      	mov	r3, r1
 800067e:	807b      	strh	r3, [r7, #2]
HAL_SPI_Receive(&hspi3,buf,len,0XFFFF);
 8000680:	887a      	ldrh	r2, [r7, #2]
 8000682:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000686:	6879      	ldr	r1, [r7, #4]
 8000688:	4803      	ldr	r0, [pc, #12]	; (8000698 <SPI_ReadNByte+0x24>)
 800068a:	f004 f844 	bl	8004716 <HAL_SPI_Receive>
return;
 800068e:	bf00      	nop
}
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	200010b4 	.word	0x200010b4

0800069c <SPI1_Send_Byte>:
* 输出    : 无
* 返回值  : 无
* 说明    : 无
*******************************************************************************/
void SPI1_Send_Byte(unsigned char dat)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	71fb      	strb	r3, [r7, #7]
	//SPI_I2S_SendData(SPI1,dat);//写1个字节数据
	//while(SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET);//等待数据寄存器空
	SPI_WriteByte(dat);
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	4618      	mov	r0, r3
 80006aa:	f7ff ff93 	bl	80005d4 <SPI_WriteByte>
}
 80006ae:	bf00      	nop
 80006b0:	3708      	adds	r7, #8
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}

080006b6 <SPI1_Send_Short>:
* 输出    : 无
* 返回值  : 无
* 说明    : 无
*******************************************************************************/
void SPI1_Send_Short(unsigned short dat)
{
 80006b6:	b580      	push	{r7, lr}
 80006b8:	b082      	sub	sp, #8
 80006ba:	af00      	add	r7, sp, #0
 80006bc:	4603      	mov	r3, r0
 80006be:	80fb      	strh	r3, [r7, #6]
//	SPI1_Send_Byte(dat/256);//写数据高位
//	SPI1_Send_Byte(dat);	//写数据低位
	SPI_WriteByte(dat/256);
 80006c0:	88fb      	ldrh	r3, [r7, #6]
 80006c2:	0a1b      	lsrs	r3, r3, #8
 80006c4:	b29b      	uxth	r3, r3
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	4618      	mov	r0, r3
 80006ca:	f7ff ff83 	bl	80005d4 <SPI_WriteByte>
	SPI_WriteByte(dat);
 80006ce:	88fb      	ldrh	r3, [r7, #6]
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	4618      	mov	r0, r3
 80006d4:	f7ff ff7e 	bl	80005d4 <SPI_WriteByte>
}
 80006d8:	bf00      	nop
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}

080006e0 <Write_W5500_1Byte>:
* 输出    : 无
* 返回值  : 无
* 说明    : 无
*******************************************************************************/
void Write_W5500_1Byte(unsigned short reg, unsigned char dat)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4603      	mov	r3, r0
 80006e8:	460a      	mov	r2, r1
 80006ea:	80fb      	strh	r3, [r7, #6]
 80006ec:	4613      	mov	r3, r2
 80006ee:	717b      	strb	r3, [r7, #5]
	GPIO_ResetBits(W5500_SCS_PORT, W5500_SCS);//置W5500的SCS为低电平
 80006f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006f8:	f7ff ff4c 	bl	8000594 <GPIO_ResetBits>

	SPI1_Send_Short(reg);//通过SPI1写16位寄存器地址
 80006fc:	88fb      	ldrh	r3, [r7, #6]
 80006fe:	4618      	mov	r0, r3
 8000700:	f7ff ffd9 	bl	80006b6 <SPI1_Send_Short>
	SPI1_Send_Byte(FDM1|RWB_WRITE|COMMON_R);//通过SPI1写控制字节,1个字节数据长度,写数据,选择通用寄存器
 8000704:	2005      	movs	r0, #5
 8000706:	f7ff ffc9 	bl	800069c <SPI1_Send_Byte>
	SPI1_Send_Byte(dat);//写1个字节数据
 800070a:	797b      	ldrb	r3, [r7, #5]
 800070c:	4618      	mov	r0, r3
 800070e:	f7ff ffc5 	bl	800069c <SPI1_Send_Byte>

	GPIO_SetBits(W5500_SCS_PORT, W5500_SCS); //置W5500的SCS为高电平
 8000712:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000716:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800071a:	f7ff ff4b 	bl	80005b4 <GPIO_SetBits>
}
 800071e:	bf00      	nop
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}

08000726 <Write_W5500_2Byte>:
* 输出    : 无
* 返回值  : 无
* 说明    : 无
*******************************************************************************/
void Write_W5500_2Byte(unsigned short reg, unsigned short dat)
{
 8000726:	b580      	push	{r7, lr}
 8000728:	b082      	sub	sp, #8
 800072a:	af00      	add	r7, sp, #0
 800072c:	4603      	mov	r3, r0
 800072e:	460a      	mov	r2, r1
 8000730:	80fb      	strh	r3, [r7, #6]
 8000732:	4613      	mov	r3, r2
 8000734:	80bb      	strh	r3, [r7, #4]
	GPIO_ResetBits(W5500_SCS_PORT, W5500_SCS);//置W5500的SCS为低电平
 8000736:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800073a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800073e:	f7ff ff29 	bl	8000594 <GPIO_ResetBits>
		
	SPI1_Send_Short(reg);//通过SPI1写16位寄存器地址
 8000742:	88fb      	ldrh	r3, [r7, #6]
 8000744:	4618      	mov	r0, r3
 8000746:	f7ff ffb6 	bl	80006b6 <SPI1_Send_Short>
	SPI1_Send_Byte(FDM2|RWB_WRITE|COMMON_R);//通过SPI1写控制字节,2个字节数据长度,写数据,选择通用寄存器
 800074a:	2006      	movs	r0, #6
 800074c:	f7ff ffa6 	bl	800069c <SPI1_Send_Byte>
	SPI1_Send_Short(dat);//写16位数据
 8000750:	88bb      	ldrh	r3, [r7, #4]
 8000752:	4618      	mov	r0, r3
 8000754:	f7ff ffaf 	bl	80006b6 <SPI1_Send_Short>

	GPIO_SetBits(W5500_SCS_PORT, W5500_SCS); //置W5500的SCS为高电平
 8000758:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800075c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000760:	f7ff ff28 	bl	80005b4 <GPIO_SetBits>
}
 8000764:	bf00      	nop
 8000766:	3708      	adds	r7, #8
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}

0800076c <Write_W5500_nByte>:
* 输出    : 无
* 返回值  : 无
* 说明    : 无
*******************************************************************************/
void Write_W5500_nByte(unsigned short reg, unsigned char *dat_ptr, unsigned short size)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af00      	add	r7, sp, #0
 8000772:	4603      	mov	r3, r0
 8000774:	6039      	str	r1, [r7, #0]
 8000776:	80fb      	strh	r3, [r7, #6]
 8000778:	4613      	mov	r3, r2
 800077a:	80bb      	strh	r3, [r7, #4]
	unsigned short i;

	GPIO_ResetBits(W5500_SCS_PORT, W5500_SCS);//置W5500的SCS为低电平	
 800077c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000780:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000784:	f7ff ff06 	bl	8000594 <GPIO_ResetBits>
		
	SPI1_Send_Short(reg);//通过SPI1写16位寄存器地址
 8000788:	88fb      	ldrh	r3, [r7, #6]
 800078a:	4618      	mov	r0, r3
 800078c:	f7ff ff93 	bl	80006b6 <SPI1_Send_Short>
	SPI1_Send_Byte(VDM|RWB_WRITE|COMMON_R);//通过SPI1写控制字节,N个字节数据长度,写数据,选择通用寄存器
 8000790:	2004      	movs	r0, #4
 8000792:	f7ff ff83 	bl	800069c <SPI1_Send_Byte>

	for(i=0;i<size;i++)//循环将缓冲区的size个字节数据写入W5500
 8000796:	2300      	movs	r3, #0
 8000798:	81fb      	strh	r3, [r7, #14]
 800079a:	e009      	b.n	80007b0 <Write_W5500_nByte+0x44>
	{
		SPI1_Send_Byte(*dat_ptr++);//写一个字节数据
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	1c5a      	adds	r2, r3, #1
 80007a0:	603a      	str	r2, [r7, #0]
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	4618      	mov	r0, r3
 80007a6:	f7ff ff79 	bl	800069c <SPI1_Send_Byte>
	for(i=0;i<size;i++)//循环将缓冲区的size个字节数据写入W5500
 80007aa:	89fb      	ldrh	r3, [r7, #14]
 80007ac:	3301      	adds	r3, #1
 80007ae:	81fb      	strh	r3, [r7, #14]
 80007b0:	89fa      	ldrh	r2, [r7, #14]
 80007b2:	88bb      	ldrh	r3, [r7, #4]
 80007b4:	429a      	cmp	r2, r3
 80007b6:	d3f1      	bcc.n	800079c <Write_W5500_nByte+0x30>
	}

	GPIO_SetBits(W5500_SCS_PORT, W5500_SCS); //置W5500的SCS为高电平
 80007b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007c0:	f7ff fef8 	bl	80005b4 <GPIO_SetBits>
}
 80007c4:	bf00      	nop
 80007c6:	3710      	adds	r7, #16
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}

080007cc <Write_W5500_SOCK_1Byte>:
* 输出    : 无
* 返回值  : 无
* 说明    : 无
*******************************************************************************/
void Write_W5500_SOCK_1Byte(SOCKET s, unsigned short reg, unsigned char dat)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	71fb      	strb	r3, [r7, #7]
 80007d6:	460b      	mov	r3, r1
 80007d8:	80bb      	strh	r3, [r7, #4]
 80007da:	4613      	mov	r3, r2
 80007dc:	71bb      	strb	r3, [r7, #6]
	GPIO_ResetBits(W5500_SCS_PORT, W5500_SCS);//置W5500的SCS为低电平	
 80007de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007e6:	f7ff fed5 	bl	8000594 <GPIO_ResetBits>
		
	SPI1_Send_Short(reg);//通过SPI1写16位寄存器地址
 80007ea:	88bb      	ldrh	r3, [r7, #4]
 80007ec:	4618      	mov	r0, r3
 80007ee:	f7ff ff62 	bl	80006b6 <SPI1_Send_Short>
	SPI1_Send_Byte(FDM1|RWB_WRITE|(s*0x20+0x08));//通过SPI1写控制字节,1个字节数据长度,写数据,选择端口s的寄存器
 80007f2:	79fb      	ldrb	r3, [r7, #7]
 80007f4:	015b      	lsls	r3, r3, #5
 80007f6:	b2db      	uxtb	r3, r3
 80007f8:	3308      	adds	r3, #8
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	b25b      	sxtb	r3, r3
 80007fe:	f043 0305 	orr.w	r3, r3, #5
 8000802:	b25b      	sxtb	r3, r3
 8000804:	b2db      	uxtb	r3, r3
 8000806:	4618      	mov	r0, r3
 8000808:	f7ff ff48 	bl	800069c <SPI1_Send_Byte>
	SPI1_Send_Byte(dat);//写1个字节数据
 800080c:	79bb      	ldrb	r3, [r7, #6]
 800080e:	4618      	mov	r0, r3
 8000810:	f7ff ff44 	bl	800069c <SPI1_Send_Byte>

	GPIO_SetBits(W5500_SCS_PORT, W5500_SCS); //置W5500的SCS为高电平
 8000814:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000818:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800081c:	f7ff feca 	bl	80005b4 <GPIO_SetBits>
}
 8000820:	bf00      	nop
 8000822:	3708      	adds	r7, #8
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}

08000828 <Write_W5500_SOCK_2Byte>:
* 输出    : 无
* 返回值  : 无
* 说明    : 无
*******************************************************************************/
void Write_W5500_SOCK_2Byte(SOCKET s, unsigned short reg, unsigned short dat)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	71fb      	strb	r3, [r7, #7]
 8000832:	460b      	mov	r3, r1
 8000834:	80bb      	strh	r3, [r7, #4]
 8000836:	4613      	mov	r3, r2
 8000838:	807b      	strh	r3, [r7, #2]
	GPIO_ResetBits(W5500_SCS_PORT, W5500_SCS);//置W5500的SCS为低电平
 800083a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800083e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000842:	f7ff fea7 	bl	8000594 <GPIO_ResetBits>
			
	SPI1_Send_Short(reg);//通过SPI1写16位寄存器地址
 8000846:	88bb      	ldrh	r3, [r7, #4]
 8000848:	4618      	mov	r0, r3
 800084a:	f7ff ff34 	bl	80006b6 <SPI1_Send_Short>
	SPI1_Send_Byte(FDM2|RWB_WRITE|(s*0x20+0x08));//通过SPI1写控制字节,2个字节数据长度,写数据,选择端口s的寄存器
 800084e:	79fb      	ldrb	r3, [r7, #7]
 8000850:	015b      	lsls	r3, r3, #5
 8000852:	b2db      	uxtb	r3, r3
 8000854:	3308      	adds	r3, #8
 8000856:	b2db      	uxtb	r3, r3
 8000858:	b25b      	sxtb	r3, r3
 800085a:	f043 0306 	orr.w	r3, r3, #6
 800085e:	b25b      	sxtb	r3, r3
 8000860:	b2db      	uxtb	r3, r3
 8000862:	4618      	mov	r0, r3
 8000864:	f7ff ff1a 	bl	800069c <SPI1_Send_Byte>
	SPI1_Send_Short(dat);//写16位数据
 8000868:	887b      	ldrh	r3, [r7, #2]
 800086a:	4618      	mov	r0, r3
 800086c:	f7ff ff23 	bl	80006b6 <SPI1_Send_Short>

	GPIO_SetBits(W5500_SCS_PORT, W5500_SCS); //置W5500的SCS为高电平
 8000870:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000874:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000878:	f7ff fe9c 	bl	80005b4 <GPIO_SetBits>
}
 800087c:	bf00      	nop
 800087e:	3708      	adds	r7, #8
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}

08000884 <Write_W5500_SOCK_4Byte>:
* 输出    : 无
* 返回值  : 无
* 说明    : 无
*******************************************************************************/
void Write_W5500_SOCK_4Byte(SOCKET s, unsigned short reg, unsigned char *dat_ptr)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	603a      	str	r2, [r7, #0]
 800088e:	71fb      	strb	r3, [r7, #7]
 8000890:	460b      	mov	r3, r1
 8000892:	80bb      	strh	r3, [r7, #4]
	GPIO_ResetBits(W5500_SCS_PORT, W5500_SCS);//置W5500的SCS为低电平
 8000894:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000898:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800089c:	f7ff fe7a 	bl	8000594 <GPIO_ResetBits>
			
	SPI1_Send_Short(reg);//通过SPI1写16位寄存器地址
 80008a0:	88bb      	ldrh	r3, [r7, #4]
 80008a2:	4618      	mov	r0, r3
 80008a4:	f7ff ff07 	bl	80006b6 <SPI1_Send_Short>
	SPI1_Send_Byte(FDM4|RWB_WRITE|(s*0x20+0x08));//通过SPI1写控制字节,4个字节数据长度,写数据,选择端口s的寄存器
 80008a8:	79fb      	ldrb	r3, [r7, #7]
 80008aa:	015b      	lsls	r3, r3, #5
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	3308      	adds	r3, #8
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	b25b      	sxtb	r3, r3
 80008b4:	f043 0307 	orr.w	r3, r3, #7
 80008b8:	b25b      	sxtb	r3, r3
 80008ba:	b2db      	uxtb	r3, r3
 80008bc:	4618      	mov	r0, r3
 80008be:	f7ff feed 	bl	800069c <SPI1_Send_Byte>

	SPI1_Send_Byte(*dat_ptr++);//写第1个字节数据
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	1c5a      	adds	r2, r3, #1
 80008c6:	603a      	str	r2, [r7, #0]
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	4618      	mov	r0, r3
 80008cc:	f7ff fee6 	bl	800069c <SPI1_Send_Byte>
	SPI1_Send_Byte(*dat_ptr++);//写第2个字节数据
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	1c5a      	adds	r2, r3, #1
 80008d4:	603a      	str	r2, [r7, #0]
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	4618      	mov	r0, r3
 80008da:	f7ff fedf 	bl	800069c <SPI1_Send_Byte>
	SPI1_Send_Byte(*dat_ptr++);//写第3个字节数据
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	1c5a      	adds	r2, r3, #1
 80008e2:	603a      	str	r2, [r7, #0]
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	4618      	mov	r0, r3
 80008e8:	f7ff fed8 	bl	800069c <SPI1_Send_Byte>
	SPI1_Send_Byte(*dat_ptr++);//写第4个字节数据
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	1c5a      	adds	r2, r3, #1
 80008f0:	603a      	str	r2, [r7, #0]
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff fed1 	bl	800069c <SPI1_Send_Byte>

	GPIO_SetBits(W5500_SCS_PORT, W5500_SCS); //置W5500的SCS为高电平
 80008fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000902:	f7ff fe57 	bl	80005b4 <GPIO_SetBits>
}
 8000906:	bf00      	nop
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}

0800090e <Read_W5500_1Byte>:
* 输出    : 无
* 返回值  : 读取到寄存器的1个字节数据
* 说明    : 无
*******************************************************************************/
unsigned char Read_W5500_1Byte(unsigned short reg)
{
 800090e:	b580      	push	{r7, lr}
 8000910:	b084      	sub	sp, #16
 8000912:	af00      	add	r7, sp, #0
 8000914:	4603      	mov	r3, r0
 8000916:	80fb      	strh	r3, [r7, #6]
	unsigned char i;

	GPIO_ResetBits(W5500_SCS_PORT, W5500_SCS);//置W5500的SCS为低电平
 8000918:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800091c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000920:	f7ff fe38 	bl	8000594 <GPIO_ResetBits>
			
	SPI1_Send_Short(reg);//通过SPI1写16位寄存器地址
 8000924:	88fb      	ldrh	r3, [r7, #6]
 8000926:	4618      	mov	r0, r3
 8000928:	f7ff fec5 	bl	80006b6 <SPI1_Send_Short>
	SPI1_Send_Byte(FDM1|RWB_READ|COMMON_R);//通过SPI1写控制字节,1个字节数据长度,读数据,选择通用寄存器
 800092c:	2001      	movs	r0, #1
 800092e:	f7ff feb5 	bl	800069c <SPI1_Send_Byte>

	i=SPI_ReadByte();
 8000932:	f7ff fe8b 	bl	800064c <SPI_ReadByte>
 8000936:	4603      	mov	r3, r0
 8000938:	73fb      	strb	r3, [r7, #15]
//	printf("i1=%d\n",i);
//	SPI1_Send_Byte(0x00);//发送一个哑数据
//	i=SPI_ReadByte();//读取1个字节数据
//	printf("i2=%d\n",i);

	GPIO_SetBits(W5500_SCS_PORT, W5500_SCS);//置W5500的SCS为高电平
 800093a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800093e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000942:	f7ff fe37 	bl	80005b4 <GPIO_SetBits>
	return i;//返回读取到的寄存器数据
 8000946:	7bfb      	ldrb	r3, [r7, #15]
}
 8000948:	4618      	mov	r0, r3
 800094a:	3710      	adds	r7, #16
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}

08000950 <Read_W5500_SOCK_1Byte>:
* 输出    : 无
* 返回值  : 读取到寄存器的1个字节数据
* 说明    : 无
*******************************************************************************/
unsigned char Read_W5500_SOCK_1Byte(SOCKET s, unsigned short reg)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
 8000956:	4603      	mov	r3, r0
 8000958:	460a      	mov	r2, r1
 800095a:	71fb      	strb	r3, [r7, #7]
 800095c:	4613      	mov	r3, r2
 800095e:	80bb      	strh	r3, [r7, #4]
	unsigned char i;

	GPIO_ResetBits(W5500_SCS_PORT, W5500_SCS);//置W5500的SCS为低电平
 8000960:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000964:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000968:	f7ff fe14 	bl	8000594 <GPIO_ResetBits>
			
	SPI1_Send_Short(reg);//通过SPI1写16位寄存器地址
 800096c:	88bb      	ldrh	r3, [r7, #4]
 800096e:	4618      	mov	r0, r3
 8000970:	f7ff fea1 	bl	80006b6 <SPI1_Send_Short>
	SPI1_Send_Byte(FDM1|RWB_READ|(s*0x20+0x08));//通过SPI1写控制字节,1个字节数据长度,读数据,选择端口s的寄存器
 8000974:	79fb      	ldrb	r3, [r7, #7]
 8000976:	015b      	lsls	r3, r3, #5
 8000978:	b2db      	uxtb	r3, r3
 800097a:	3308      	adds	r3, #8
 800097c:	b2db      	uxtb	r3, r3
 800097e:	b25b      	sxtb	r3, r3
 8000980:	f043 0301 	orr.w	r3, r3, #1
 8000984:	b25b      	sxtb	r3, r3
 8000986:	b2db      	uxtb	r3, r3
 8000988:	4618      	mov	r0, r3
 800098a:	f7ff fe87 	bl	800069c <SPI1_Send_Byte>

	i=SPI_ReadByte();
 800098e:	f7ff fe5d 	bl	800064c <SPI_ReadByte>
 8000992:	4603      	mov	r3, r0
 8000994:	73fb      	strb	r3, [r7, #15]
//	printf("i3=%d\n",i);
//	SPI1_Send_Byte(0x00);//发送一个哑数据
//	i=SPI_ReadByte();//读取1个字节数据
//	printf("i4=%d\n",i);
	GPIO_SetBits(W5500_SCS_PORT, W5500_SCS);//置W5500的SCS为高电平
 8000996:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800099a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800099e:	f7ff fe09 	bl	80005b4 <GPIO_SetBits>
	return i;//返回读取到的寄存器数据
 80009a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3710      	adds	r7, #16
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}

080009ac <Read_W5500_SOCK_2Byte>:
* 输出    : 无
* 返回值  : 读取到寄存器的2个字节数据(16位)
* 说明    : 无
*******************************************************************************/
unsigned short Read_W5500_SOCK_2Byte(SOCKET s, unsigned short reg)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	4603      	mov	r3, r0
 80009b4:	460a      	mov	r2, r1
 80009b6:	71fb      	strb	r3, [r7, #7]
 80009b8:	4613      	mov	r3, r2
 80009ba:	80bb      	strh	r3, [r7, #4]
	unsigned short i;

	GPIO_ResetBits(W5500_SCS_PORT, W5500_SCS);//置W5500的SCS为低电平
 80009bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009c4:	f7ff fde6 	bl	8000594 <GPIO_ResetBits>
			
	SPI1_Send_Short(reg);//通过SPI1写16位寄存器地址
 80009c8:	88bb      	ldrh	r3, [r7, #4]
 80009ca:	4618      	mov	r0, r3
 80009cc:	f7ff fe73 	bl	80006b6 <SPI1_Send_Short>
	SPI1_Send_Byte(FDM2|RWB_READ|(s*0x20+0x08));//通过SPI1写控制字节,2个字节数据长度,读数据,选择端口s的寄存器
 80009d0:	79fb      	ldrb	r3, [r7, #7]
 80009d2:	015b      	lsls	r3, r3, #5
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	3308      	adds	r3, #8
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	b25b      	sxtb	r3, r3
 80009dc:	f043 0302 	orr.w	r3, r3, #2
 80009e0:	b25b      	sxtb	r3, r3
 80009e2:	b2db      	uxtb	r3, r3
 80009e4:	4618      	mov	r0, r3
 80009e6:	f7ff fe59 	bl	800069c <SPI1_Send_Byte>

//	i=SPI_ReadByte();
//	SPI1_Send_Byte(0x00);//发送一个哑数据
	i=SPI_ReadByte();//读取高位数据
 80009ea:	f7ff fe2f 	bl	800064c <SPI_ReadByte>
 80009ee:	4603      	mov	r3, r0
 80009f0:	81fb      	strh	r3, [r7, #14]
//	SPI1_Send_Byte(0x00);//发送一个哑数据
	i*=256;
 80009f2:	89fb      	ldrh	r3, [r7, #14]
 80009f4:	021b      	lsls	r3, r3, #8
 80009f6:	81fb      	strh	r3, [r7, #14]
	i+=SPI_ReadByte();//读取低位数据
 80009f8:	f7ff fe28 	bl	800064c <SPI_ReadByte>
 80009fc:	4603      	mov	r3, r0
 80009fe:	b29a      	uxth	r2, r3
 8000a00:	89fb      	ldrh	r3, [r7, #14]
 8000a02:	4413      	add	r3, r2
 8000a04:	81fb      	strh	r3, [r7, #14]

	GPIO_SetBits(W5500_SCS_PORT, W5500_SCS);//置W5500的SCS为高电平
 8000a06:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a0e:	f7ff fdd1 	bl	80005b4 <GPIO_SetBits>
	return i;//返回读取到的寄存器数据
 8000a12:	89fb      	ldrh	r3, [r7, #14]
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	3710      	adds	r7, #16
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}

08000a1c <Read_SOCK_Data_Buffer>:
* 输出    : 无
* 返回值  : 读取到的数据长度,rx_size个字节
* 说明    : 无
*******************************************************************************/
unsigned short Read_SOCK_Data_Buffer(SOCKET s, unsigned char *dat_ptr)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b088      	sub	sp, #32
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4603      	mov	r3, r0
 8000a24:	6039      	str	r1, [r7, #0]
 8000a26:	71fb      	strb	r3, [r7, #7]
	
	unsigned short rx_size;
	unsigned short offset, offset1;
	unsigned short i;
	unsigned char j;
	unsigned char size_buff[8]={0,0,0,0,0,0,0,0};
 8000a28:	4a96      	ldr	r2, [pc, #600]	; (8000c84 <Read_SOCK_Data_Buffer+0x268>)
 8000a2a:	f107 0308 	add.w	r3, r7, #8
 8000a2e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a32:	e883 0003 	stmia.w	r3, {r0, r1}
	unsigned char *size_ptr;
	size_ptr=size_buff;
 8000a36:	f107 0308 	add.w	r3, r7, #8
 8000a3a:	61bb      	str	r3, [r7, #24]
//取得单个包rx_size开始
	rx_size=Read_W5500_SOCK_2Byte(s,Sn_RX_RSR);
 8000a3c:	79fb      	ldrb	r3, [r7, #7]
 8000a3e:	2126      	movs	r1, #38	; 0x26
 8000a40:	4618      	mov	r0, r3
 8000a42:	f7ff ffb3 	bl	80009ac <Read_W5500_SOCK_2Byte>
 8000a46:	4603      	mov	r3, r0
 8000a48:	82fb      	strh	r3, [r7, #22]
	if(rx_size==0) return 0;//没接收到数据则返回
 8000a4a:	8afb      	ldrh	r3, [r7, #22]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d101      	bne.n	8000a54 <Read_SOCK_Data_Buffer+0x38>
 8000a50:	2300      	movs	r3, #0
 8000a52:	e113      	b.n	8000c7c <Read_SOCK_Data_Buffer+0x260>
	if(rx_size>1460) rx_size=1460;
 8000a54:	8afb      	ldrh	r3, [r7, #22]
 8000a56:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d902      	bls.n	8000a64 <Read_SOCK_Data_Buffer+0x48>
 8000a5e:	f240 53b4 	movw	r3, #1460	; 0x5b4
 8000a62:	82fb      	strh	r3, [r7, #22]
	rx_size=8;
 8000a64:	2308      	movs	r3, #8
 8000a66:	82fb      	strh	r3, [r7, #22]
	offset=Read_W5500_SOCK_2Byte(s,Sn_RX_RD);
 8000a68:	79fb      	ldrb	r3, [r7, #7]
 8000a6a:	2128      	movs	r1, #40	; 0x28
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff ff9d 	bl	80009ac <Read_W5500_SOCK_2Byte>
 8000a72:	4603      	mov	r3, r0
 8000a74:	82bb      	strh	r3, [r7, #20]
	offset1=offset;
 8000a76:	8abb      	ldrh	r3, [r7, #20]
 8000a78:	827b      	strh	r3, [r7, #18]
	offset&=(S_RX_SIZE-1);//计算实际的物理地址
 8000a7a:	8abb      	ldrh	r3, [r7, #20]
 8000a7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8000a80:	82bb      	strh	r3, [r7, #20]
	GPIO_ResetBits(W5500_SCS_PORT, W5500_SCS);//置W5500的SCS为低电平
 8000a82:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a8a:	f7ff fd83 	bl	8000594 <GPIO_ResetBits>

	SPI1_Send_Short(offset);//写16位地址
 8000a8e:	8abb      	ldrh	r3, [r7, #20]
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff fe10 	bl	80006b6 <SPI1_Send_Short>
	SPI1_Send_Byte(VDM|RWB_READ|(s*0x20+0x18));//写控制字节,N个字节数据长度,读数据,选择端口s的寄存器
 8000a96:	79fb      	ldrb	r3, [r7, #7]
 8000a98:	015b      	lsls	r3, r3, #5
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	3318      	adds	r3, #24
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f7ff fdfb 	bl	800069c <SPI1_Send_Byte>
	//j=SPI_ReadByte();
	
	if((offset+rx_size)<S_RX_SIZE)//如果最大地址未超过W5500接收缓冲区寄存器的最大地址
 8000aa6:	8aba      	ldrh	r2, [r7, #20]
 8000aa8:	8afb      	ldrh	r3, [r7, #22]
 8000aaa:	4413      	add	r3, r2
 8000aac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ab0:	da14      	bge.n	8000adc <Read_SOCK_Data_Buffer+0xc0>
	{
		for(i=0;i<rx_size;i++)//循环读取rx_size个字节数据
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	83fb      	strh	r3, [r7, #30]
 8000ab6:	e00c      	b.n	8000ad2 <Read_SOCK_Data_Buffer+0xb6>
		{

			//SPI1_Send_Byte(0x00);//发送一个哑数据
			j=SPI_ReadByte();//读取1个字节数据
 8000ab8:	f7ff fdc8 	bl	800064c <SPI_ReadByte>
 8000abc:	4603      	mov	r3, r0
 8000abe:	747b      	strb	r3, [r7, #17]
//			DEBUG_PRINT("%02x ", j);
			*size_ptr=j;//将读取到的数据保存到数据保存缓冲区
 8000ac0:	69bb      	ldr	r3, [r7, #24]
 8000ac2:	7c7a      	ldrb	r2, [r7, #17]
 8000ac4:	701a      	strb	r2, [r3, #0]
			size_ptr++;//数据保存缓冲区指针地址自增1
 8000ac6:	69bb      	ldr	r3, [r7, #24]
 8000ac8:	3301      	adds	r3, #1
 8000aca:	61bb      	str	r3, [r7, #24]
		for(i=0;i<rx_size;i++)//循环读取rx_size个字节数据
 8000acc:	8bfb      	ldrh	r3, [r7, #30]
 8000ace:	3301      	adds	r3, #1
 8000ad0:	83fb      	strh	r3, [r7, #30]
 8000ad2:	8bfa      	ldrh	r2, [r7, #30]
 8000ad4:	8afb      	ldrh	r3, [r7, #22]
 8000ad6:	429a      	cmp	r2, r3
 8000ad8:	d3ee      	bcc.n	8000ab8 <Read_SOCK_Data_Buffer+0x9c>
 8000ada:	e044      	b.n	8000b66 <Read_SOCK_Data_Buffer+0x14a>
		}

	}
	else//如果最大地址超过W5500接收缓冲区寄存器的最大地址
	{		
		offset=S_RX_SIZE-offset;
 8000adc:	8abb      	ldrh	r3, [r7, #20]
 8000ade:	f5c3 5300 	rsb	r3, r3, #8192	; 0x2000
 8000ae2:	82bb      	strh	r3, [r7, #20]

		for(i=0;i<=offset;i++)//循环读取出前offset个字节数据
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	83fb      	strh	r3, [r7, #30]
 8000ae8:	e00c      	b.n	8000b04 <Read_SOCK_Data_Buffer+0xe8>
		{

			//SPI1_Send_Byte(0x00);//发送一个哑数据
			j=SPI_ReadByte();//读取1个字节数据
 8000aea:	f7ff fdaf 	bl	800064c <SPI_ReadByte>
 8000aee:	4603      	mov	r3, r0
 8000af0:	747b      	strb	r3, [r7, #17]
			*size_ptr=j;//将读取到的数据保存到数据保存缓冲区
 8000af2:	69bb      	ldr	r3, [r7, #24]
 8000af4:	7c7a      	ldrb	r2, [r7, #17]
 8000af6:	701a      	strb	r2, [r3, #0]
			size_ptr++;//数据保存缓冲区指针地址自增1
 8000af8:	69bb      	ldr	r3, [r7, #24]
 8000afa:	3301      	adds	r3, #1
 8000afc:	61bb      	str	r3, [r7, #24]
		for(i=0;i<=offset;i++)//循环读取出前offset个字节数据
 8000afe:	8bfb      	ldrh	r3, [r7, #30]
 8000b00:	3301      	adds	r3, #1
 8000b02:	83fb      	strh	r3, [r7, #30]
 8000b04:	8bfa      	ldrh	r2, [r7, #30]
 8000b06:	8abb      	ldrh	r3, [r7, #20]
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	d9ee      	bls.n	8000aea <Read_SOCK_Data_Buffer+0xce>
		}

		
		
		GPIO_SetBits(W5500_SCS_PORT, W5500_SCS); //置W5500的SCS为高电平
 8000b0c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b14:	f7ff fd4e 	bl	80005b4 <GPIO_SetBits>

		GPIO_ResetBits(W5500_SCS_PORT, W5500_SCS);//置W5500的SCS为低电平
 8000b18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b20:	f7ff fd38 	bl	8000594 <GPIO_ResetBits>

		SPI1_Send_Short(0x00);//写16位地址
 8000b24:	2000      	movs	r0, #0
 8000b26:	f7ff fdc6 	bl	80006b6 <SPI1_Send_Short>
		SPI1_Send_Byte(VDM|RWB_READ|(s*0x20+0x18));//写控制字节,N个字节数据长度,读数据,选择端口s的寄存器
 8000b2a:	79fb      	ldrb	r3, [r7, #7]
 8000b2c:	015b      	lsls	r3, r3, #5
 8000b2e:	b2db      	uxtb	r3, r3
 8000b30:	3318      	adds	r3, #24
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	4618      	mov	r0, r3
 8000b36:	f7ff fdb1 	bl	800069c <SPI1_Send_Byte>
		j=SPI_ReadByte();
 8000b3a:	f7ff fd87 	bl	800064c <SPI_ReadByte>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	747b      	strb	r3, [r7, #17]

		for(;i<rx_size;i++)//循环读取后rx_size-offset个字节数据
 8000b42:	e00c      	b.n	8000b5e <Read_SOCK_Data_Buffer+0x142>
		{
			//SPI1_Send_Byte(0x00);//发送一个哑数据
			j=SPI_ReadByte();//读取1个字节数据
 8000b44:	f7ff fd82 	bl	800064c <SPI_ReadByte>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	747b      	strb	r3, [r7, #17]
			*size_ptr=j;//将读取到的数据保存到数据保存缓冲区
 8000b4c:	69bb      	ldr	r3, [r7, #24]
 8000b4e:	7c7a      	ldrb	r2, [r7, #17]
 8000b50:	701a      	strb	r2, [r3, #0]
			size_ptr++;//数据保存缓冲区指针地址自增1
 8000b52:	69bb      	ldr	r3, [r7, #24]
 8000b54:	3301      	adds	r3, #1
 8000b56:	61bb      	str	r3, [r7, #24]
		for(;i<rx_size;i++)//循环读取后rx_size-offset个字节数据
 8000b58:	8bfb      	ldrh	r3, [r7, #30]
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	83fb      	strh	r3, [r7, #30]
 8000b5e:	8bfa      	ldrh	r2, [r7, #30]
 8000b60:	8afb      	ldrh	r3, [r7, #22]
 8000b62:	429a      	cmp	r2, r3
 8000b64:	d3ee      	bcc.n	8000b44 <Read_SOCK_Data_Buffer+0x128>
		}
	}
	GPIO_SetBits(W5500_SCS_PORT, W5500_SCS); //置W5500的SCS为高电平
 8000b66:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b6e:	f7ff fd21 	bl	80005b4 <GPIO_SetBits>
	Write_W5500_SOCK_2Byte(s, Sn_RX_RD, offset1);//复位Sn_RX_RD
 8000b72:	8a7a      	ldrh	r2, [r7, #18]
 8000b74:	79fb      	ldrb	r3, [r7, #7]
 8000b76:	2128      	movs	r1, #40	; 0x28
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f7ff fe55 	bl	8000828 <Write_W5500_SOCK_2Byte>
	
	//实际开始取数据
//	rx_size=Read_W5500_SOCK_2Byte(s,Sn_RX_RSR);
//	if(rx_size==0) return 0;//没接收到数据则返回
//	if(rx_size>1460) rx_size=1460;
	rx_size=size_buff[6]*256+size_buff[7]+8;
 8000b7e:	7bbb      	ldrb	r3, [r7, #14]
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	021b      	lsls	r3, r3, #8
 8000b84:	b29a      	uxth	r2, r3
 8000b86:	7bfb      	ldrb	r3, [r7, #15]
 8000b88:	b29b      	uxth	r3, r3
 8000b8a:	4413      	add	r3, r2
 8000b8c:	b29b      	uxth	r3, r3
 8000b8e:	3308      	adds	r3, #8
 8000b90:	82fb      	strh	r3, [r7, #22]
	offset=Read_W5500_SOCK_2Byte(s,Sn_RX_RD);
 8000b92:	79fb      	ldrb	r3, [r7, #7]
 8000b94:	2128      	movs	r1, #40	; 0x28
 8000b96:	4618      	mov	r0, r3
 8000b98:	f7ff ff08 	bl	80009ac <Read_W5500_SOCK_2Byte>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	82bb      	strh	r3, [r7, #20]
	offset1=offset;
 8000ba0:	8abb      	ldrh	r3, [r7, #20]
 8000ba2:	827b      	strh	r3, [r7, #18]
	offset&=(S_RX_SIZE-1);//计算实际的物理地址
 8000ba4:	8abb      	ldrh	r3, [r7, #20]
 8000ba6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8000baa:	82bb      	strh	r3, [r7, #20]
	GPIO_ResetBits(W5500_SCS_PORT, W5500_SCS);//置W5500的SCS为低电平
 8000bac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bb4:	f7ff fcee 	bl	8000594 <GPIO_ResetBits>

	SPI1_Send_Short(offset);//写16位地址
 8000bb8:	8abb      	ldrh	r3, [r7, #20]
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f7ff fd7b 	bl	80006b6 <SPI1_Send_Short>
	SPI1_Send_Byte(VDM|RWB_READ|(s*0x20+0x18));//写控制字节,N个字节数据长度,读数据,选择端口s的寄存器
 8000bc0:	79fb      	ldrb	r3, [r7, #7]
 8000bc2:	015b      	lsls	r3, r3, #5
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	3318      	adds	r3, #24
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f7ff fd66 	bl	800069c <SPI1_Send_Byte>
	//j=SPI_ReadByte();
	
	if((offset+rx_size)<=S_RX_SIZE)//如果最大地址未超过W5500接收缓冲区寄存器的最大地址
 8000bd0:	8aba      	ldrh	r2, [r7, #20]
 8000bd2:	8afb      	ldrh	r3, [r7, #22]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000bda:	dc05      	bgt.n	8000be8 <Read_SOCK_Data_Buffer+0x1cc>
//			*dat_ptr=j;//将读取到的数据保存到数据保存缓冲区
//			dat_ptr++;//数据保存缓冲区指针地址自增1

//		}
			//改写SPI_Read_NBbytes开始
			SPI_ReadNByte(dat_ptr,rx_size);
 8000bdc:	8afb      	ldrh	r3, [r7, #22]
 8000bde:	4619      	mov	r1, r3
 8000be0:	6838      	ldr	r0, [r7, #0]
 8000be2:	f7ff fd47 	bl	8000674 <SPI_ReadNByte>
 8000be6:	e032      	b.n	8000c4e <Read_SOCK_Data_Buffer+0x232>
			//改写SPI_Read_NBbytes结束

	}
	else//如果最大地址超过W5500接收缓冲区寄存器的最大地址
	{		
		offset=S_RX_SIZE-offset;
 8000be8:	8abb      	ldrh	r3, [r7, #20]
 8000bea:	f5c3 5300 	rsb	r3, r3, #8192	; 0x2000
 8000bee:	82bb      	strh	r3, [r7, #20]
//			//SPI1_Send_Byte(0x00);//发送一个哑数据
//			j=SPI_ReadByte();//读取1个字节数据
//			*dat_ptr=j;//将读取到的数据保存到数据保存缓冲区
//			dat_ptr++;//数据保存缓冲区指针地址自增1
//		}
		SPI_ReadNByte(dat_ptr,offset+1);
 8000bf0:	8abb      	ldrh	r3, [r7, #20]
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	b29b      	uxth	r3, r3
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	6838      	ldr	r0, [r7, #0]
 8000bfa:	f7ff fd3b 	bl	8000674 <SPI_ReadNByte>


		
		
		GPIO_SetBits(W5500_SCS_PORT, W5500_SCS); //置W5500的SCS为高电平
 8000bfe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c06:	f7ff fcd5 	bl	80005b4 <GPIO_SetBits>

		GPIO_ResetBits(W5500_SCS_PORT, W5500_SCS);//置W5500的SCS为低电平
 8000c0a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c12:	f7ff fcbf 	bl	8000594 <GPIO_ResetBits>

		SPI1_Send_Short(0x00);//写16位地址
 8000c16:	2000      	movs	r0, #0
 8000c18:	f7ff fd4d 	bl	80006b6 <SPI1_Send_Short>
		SPI1_Send_Byte(VDM|RWB_READ|(s*0x20+0x18));//写控制字节,N个字节数据长度,读数据,选择端口s的寄存器
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
 8000c1e:	015b      	lsls	r3, r3, #5
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	3318      	adds	r3, #24
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	4618      	mov	r0, r3
 8000c28:	f7ff fd38 	bl	800069c <SPI1_Send_Byte>
		j=SPI_ReadByte();
 8000c2c:	f7ff fd0e 	bl	800064c <SPI_ReadByte>
 8000c30:	4603      	mov	r3, r0
 8000c32:	747b      	strb	r3, [r7, #17]
//			//SPI1_Send_Byte(0x00);//发送一个哑数据
//			j=SPI_ReadByte();//读取1个字节数据
//			*dat_ptr=j;//将读取到的数据保存到数据保存缓冲区
//			dat_ptr++;//数据保存缓冲区指针地址自增1
//		}
		SPI_ReadNByte(dat_ptr+offset+1,rx_size-offset-1);
 8000c34:	8abb      	ldrh	r3, [r7, #20]
 8000c36:	3301      	adds	r3, #1
 8000c38:	683a      	ldr	r2, [r7, #0]
 8000c3a:	18d0      	adds	r0, r2, r3
 8000c3c:	8afa      	ldrh	r2, [r7, #22]
 8000c3e:	8abb      	ldrh	r3, [r7, #20]
 8000c40:	1ad3      	subs	r3, r2, r3
 8000c42:	b29b      	uxth	r3, r3
 8000c44:	3b01      	subs	r3, #1
 8000c46:	b29b      	uxth	r3, r3
 8000c48:	4619      	mov	r1, r3
 8000c4a:	f7ff fd13 	bl	8000674 <SPI_ReadNByte>

	}
	GPIO_SetBits(W5500_SCS_PORT, W5500_SCS); //置W5500的SCS为高电平
 8000c4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c56:	f7ff fcad 	bl	80005b4 <GPIO_SetBits>
	//实际取数据结束
	offset1+=rx_size;//更新实际物理地址,即下次读取接收到的数据的起始地址
 8000c5a:	8a7a      	ldrh	r2, [r7, #18]
 8000c5c:	8afb      	ldrh	r3, [r7, #22]
 8000c5e:	4413      	add	r3, r2
 8000c60:	827b      	strh	r3, [r7, #18]
	Write_W5500_SOCK_2Byte(s, Sn_RX_RD, offset1);
 8000c62:	8a7a      	ldrh	r2, [r7, #18]
 8000c64:	79fb      	ldrb	r3, [r7, #7]
 8000c66:	2128      	movs	r1, #40	; 0x28
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff fddd 	bl	8000828 <Write_W5500_SOCK_2Byte>
	Write_W5500_SOCK_1Byte(s, Sn_CR, RECV);//发送启动接收命令
 8000c6e:	79fb      	ldrb	r3, [r7, #7]
 8000c70:	2240      	movs	r2, #64	; 0x40
 8000c72:	2101      	movs	r1, #1
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff fda9 	bl	80007cc <Write_W5500_SOCK_1Byte>
	return rx_size;//返回接收到数据的长度
 8000c7a:	8afb      	ldrh	r3, [r7, #22]
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3720      	adds	r7, #32
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	080081c4 	.word	0x080081c4

08000c88 <Write_SOCK_Data_Buffer>:
* 输出    : 无
* 返回值  : 无
* 说明    : 无
*******************************************************************************/
void Write_SOCK_Data_Buffer(SOCKET s, unsigned char *dat_ptr, unsigned short size)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	6039      	str	r1, [r7, #0]
 8000c92:	71fb      	strb	r3, [r7, #7]
 8000c94:	4613      	mov	r3, r2
 8000c96:	80bb      	strh	r3, [r7, #4]
	unsigned short offset,offset1;
	while(hspi3.State == HAL_SPI_STATE_BUSY_TX);
 8000c98:	bf00      	nop
 8000c9a:	4b41      	ldr	r3, [pc, #260]	; (8000da0 <Write_SOCK_Data_Buffer+0x118>)
 8000c9c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	2b03      	cmp	r3, #3
 8000ca4:	d0f9      	beq.n	8000c9a <Write_SOCK_Data_Buffer+0x12>
//		Write_W5500_SOCK_4Byte(s, Sn_DIPR, S0_DIP);//设置目的主机IP
//		Write_W5500_SOCK_2Byte(s, Sn_DPORTR, S0_DPort[0]*256+S0_DPort[1]);//设置目的主机端口号
//	}


	offset=Read_W5500_SOCK_2Byte(s,Sn_TX_WR);
 8000ca6:	79fb      	ldrb	r3, [r7, #7]
 8000ca8:	2124      	movs	r1, #36	; 0x24
 8000caa:	4618      	mov	r0, r3
 8000cac:	f7ff fe7e 	bl	80009ac <Read_W5500_SOCK_2Byte>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	81fb      	strh	r3, [r7, #14]
	offset1=offset;
 8000cb4:	89fb      	ldrh	r3, [r7, #14]
 8000cb6:	81bb      	strh	r3, [r7, #12]
	offset&=(S_TX_SIZE-1);//计算实际的物理地址
 8000cb8:	89fb      	ldrh	r3, [r7, #14]
 8000cba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8000cbe:	81fb      	strh	r3, [r7, #14]

	GPIO_ResetBits(W5500_SCS_PORT, W5500_SCS);//置W5500的SCS为低电平
 8000cc0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cc8:	f7ff fc64 	bl	8000594 <GPIO_ResetBits>

	SPI1_Send_Short(offset);//写16位地址
 8000ccc:	89fb      	ldrh	r3, [r7, #14]
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff fcf1 	bl	80006b6 <SPI1_Send_Short>
	SPI1_Send_Byte(VDM|RWB_WRITE|(s*0x20+0x10));//写控制字节,N个字节数据长度,写数据,选择端口s的寄存器
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	015b      	lsls	r3, r3, #5
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	3310      	adds	r3, #16
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	b25b      	sxtb	r3, r3
 8000ce0:	f043 0304 	orr.w	r3, r3, #4
 8000ce4:	b25b      	sxtb	r3, r3
 8000ce6:	b2db      	uxtb	r3, r3
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff fcd7 	bl	800069c <SPI1_Send_Byte>

	if((offset+size)<S_TX_SIZE)//如果最大地址未超过W5500发送缓冲区寄存器的最大地址
 8000cee:	89fa      	ldrh	r2, [r7, #14]
 8000cf0:	88bb      	ldrh	r3, [r7, #4]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000cf8:	da05      	bge.n	8000d06 <Write_SOCK_Data_Buffer+0x7e>
	{
//		for(i=0;i<size;i++)//循环写入size个字节数据
//		{
//			SPI1_Send_Byte(*dat_ptr++);//写入一个字节的数据
//		}
		SPI_WriteNBytes(dat_ptr,size);
 8000cfa:	88bb      	ldrh	r3, [r7, #4]
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	6838      	ldr	r0, [r7, #0]
 8000d00:	f7ff fc86 	bl	8000610 <SPI_WriteNBytes>
 8000d04:	e02e      	b.n	8000d64 <Write_SOCK_Data_Buffer+0xdc>
	}
	else//如果最大地址超过W5500发送缓冲区寄存器的最大地址
	{
		offset=S_TX_SIZE-offset;
 8000d06:	89fb      	ldrh	r3, [r7, #14]
 8000d08:	f5c3 5300 	rsb	r3, r3, #8192	; 0x2000
 8000d0c:	81fb      	strh	r3, [r7, #14]
//		for(i=0;i<offset;i++)//循环写入前offset个字节数据
//		{
//			SPI1_Send_Byte(*dat_ptr++);//写入一个字节的数据
//		}
		SPI_WriteNBytes(dat_ptr,offset);
 8000d0e:	89fb      	ldrh	r3, [r7, #14]
 8000d10:	4619      	mov	r1, r3
 8000d12:	6838      	ldr	r0, [r7, #0]
 8000d14:	f7ff fc7c 	bl	8000610 <SPI_WriteNBytes>
		GPIO_SetBits(W5500_SCS_PORT, W5500_SCS); //置W5500的SCS为高电平
 8000d18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d20:	f7ff fc48 	bl	80005b4 <GPIO_SetBits>

		GPIO_ResetBits(W5500_SCS_PORT, W5500_SCS);//置W5500的SCS为低电平
 8000d24:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d2c:	f7ff fc32 	bl	8000594 <GPIO_ResetBits>

		SPI1_Send_Short(0x00);//写16位地址
 8000d30:	2000      	movs	r0, #0
 8000d32:	f7ff fcc0 	bl	80006b6 <SPI1_Send_Short>
		SPI1_Send_Byte(VDM|RWB_WRITE|(s*0x20+0x10));//写控制字节,N个字节数据长度,写数据,选择端口s的寄存器
 8000d36:	79fb      	ldrb	r3, [r7, #7]
 8000d38:	015b      	lsls	r3, r3, #5
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	3310      	adds	r3, #16
 8000d3e:	b2db      	uxtb	r3, r3
 8000d40:	b25b      	sxtb	r3, r3
 8000d42:	f043 0304 	orr.w	r3, r3, #4
 8000d46:	b25b      	sxtb	r3, r3
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff fca6 	bl	800069c <SPI1_Send_Byte>

//		for(;i<size;i++)//循环写入size-offset个字节数据
//		{
//			SPI1_Send_Byte(*dat_ptr++);//写入一个字节的数据
//		}
		SPI_WriteNBytes(&dat_ptr[offset],size-offset);
 8000d50:	89fb      	ldrh	r3, [r7, #14]
 8000d52:	683a      	ldr	r2, [r7, #0]
 8000d54:	18d0      	adds	r0, r2, r3
 8000d56:	88ba      	ldrh	r2, [r7, #4]
 8000d58:	89fb      	ldrh	r3, [r7, #14]
 8000d5a:	1ad3      	subs	r3, r2, r3
 8000d5c:	b29b      	uxth	r3, r3
 8000d5e:	4619      	mov	r1, r3
 8000d60:	f7ff fc56 	bl	8000610 <SPI_WriteNBytes>
	}
	GPIO_SetBits(W5500_SCS_PORT, W5500_SCS); //置W5500的SCS为高电平
 8000d64:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d6c:	f7ff fc22 	bl	80005b4 <GPIO_SetBits>
	
	offset1+=size;//更新实际物理地址,即下次写待发送数据到发送数据缓冲区的起始地址
 8000d70:	89ba      	ldrh	r2, [r7, #12]
 8000d72:	88bb      	ldrh	r3, [r7, #4]
 8000d74:	4413      	add	r3, r2
 8000d76:	81bb      	strh	r3, [r7, #12]
	Write_W5500_SOCK_2Byte(s, Sn_TX_WR, offset1);
 8000d78:	89ba      	ldrh	r2, [r7, #12]
 8000d7a:	79fb      	ldrb	r3, [r7, #7]
 8000d7c:	2124      	movs	r1, #36	; 0x24
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff fd52 	bl	8000828 <Write_W5500_SOCK_2Byte>
	Write_W5500_SOCK_1Byte(s, Sn_CR, SEND);//发送启动发送命令
 8000d84:	79fb      	ldrb	r3, [r7, #7]
 8000d86:	2220      	movs	r2, #32
 8000d88:	2101      	movs	r1, #1
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f7ff fd1e 	bl	80007cc <Write_W5500_SOCK_1Byte>
	  printf("w5500 send data success!\r\n");
 8000d90:	4804      	ldr	r0, [pc, #16]	; (8000da4 <Write_SOCK_Data_Buffer+0x11c>)
 8000d92:	f006 fa8d 	bl	80072b0 <puts>
}
 8000d96:	bf00      	nop
 8000d98:	3710      	adds	r7, #16
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	200010b4 	.word	0x200010b4
 8000da4:	080081cc 	.word	0x080081cc

08000da8 <W5500_Hardware_Reset>:
* 输出    : 无
* 返回值  : 无
* 说明    : W5500的复位引脚保持低电平至少500us以上,才能重围W5500
*******************************************************************************/
void W5500_Hardware_Reset(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
	GPIO_ResetBits(W5500_RST_PORT, W5500_RST);//复位引脚拉低
 8000dac:	2180      	movs	r1, #128	; 0x80
 8000dae:	480e      	ldr	r0, [pc, #56]	; (8000de8 <W5500_Hardware_Reset+0x40>)
 8000db0:	f7ff fbf0 	bl	8000594 <GPIO_ResetBits>
	HAL_Delay(500);
 8000db4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000db8:	f001 f9b6 	bl	8002128 <HAL_Delay>
	GPIO_SetBits(W5500_RST_PORT, W5500_RST);//复位引脚拉高
 8000dbc:	2180      	movs	r1, #128	; 0x80
 8000dbe:	480a      	ldr	r0, [pc, #40]	; (8000de8 <W5500_Hardware_Reset+0x40>)
 8000dc0:	f7ff fbf8 	bl	80005b4 <GPIO_SetBits>
	HAL_Delay(200);
 8000dc4:	20c8      	movs	r0, #200	; 0xc8
 8000dc6:	f001 f9af 	bl	8002128 <HAL_Delay>
	while((Read_W5500_1Byte(PHYCFGR)&LINK)==0);//等待以太网连接完成
 8000dca:	bf00      	nop
 8000dcc:	202e      	movs	r0, #46	; 0x2e
 8000dce:	f7ff fd9e 	bl	800090e <Read_W5500_1Byte>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	f003 0301 	and.w	r3, r3, #1
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d0f7      	beq.n	8000dcc <W5500_Hardware_Reset+0x24>
	printf("w5500 Ethernet link complete !\r\n");
 8000ddc:	4803      	ldr	r0, [pc, #12]	; (8000dec <W5500_Hardware_Reset+0x44>)
 8000dde:	f006 fa67 	bl	80072b0 <puts>
	//uint8_t PHY=Read_W5500_1Byte(PHYCFGR);
	//printf("PHYCFGR: %d\n",PHY);
}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	48000800 	.word	0x48000800
 8000dec:	080081e8 	.word	0x080081e8

08000df0 <W5500_Init>:
* 输出    : 无
* 返回值  : 无
* 说明    : 在使用W5500之前，先对W5500初始化
*******************************************************************************/
void W5500_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
	uint8_t i=0;
 8000df6:	2300      	movs	r3, #0
 8000df8:	71fb      	strb	r3, [r7, #7]

	Write_W5500_1Byte(MR, RST);//软件复位W5500,置1有效,复位后自动清0
 8000dfa:	2180      	movs	r1, #128	; 0x80
 8000dfc:	2000      	movs	r0, #0
 8000dfe:	f7ff fc6f 	bl	80006e0 <Write_W5500_1Byte>
	HAL_Delay(10);//延时10ms,自己定义该函数
 8000e02:	200a      	movs	r0, #10
 8000e04:	f001 f990 	bl	8002128 <HAL_Delay>

	//设置网关(Gateway)的IP地址,Gateway_IP为4字节unsigned char数组,自己定义 
	//使用网关可以使通信突破子网的局限，通过网关可以访问到其它子网或进入Internet
	Write_W5500_nByte(GAR, Gateway_IP, 4);
 8000e08:	2204      	movs	r2, #4
 8000e0a:	492b      	ldr	r1, [pc, #172]	; (8000eb8 <W5500_Init+0xc8>)
 8000e0c:	2001      	movs	r0, #1
 8000e0e:	f7ff fcad 	bl	800076c <Write_W5500_nByte>
			
	//设置子网掩码(MASK)值,SUB_MASK为4字节unsigned char数组,自己定义
	//子网掩码用于子网运算
	Write_W5500_nByte(SUBR,Sub_Mask,4);		
 8000e12:	2204      	movs	r2, #4
 8000e14:	4929      	ldr	r1, [pc, #164]	; (8000ebc <W5500_Init+0xcc>)
 8000e16:	2005      	movs	r0, #5
 8000e18:	f7ff fca8 	bl	800076c <Write_W5500_nByte>
	
	//设置物理地址,PHY_ADDR为6字节unsigned char数组,自己定义,用于唯一标识网络设备的物理地址值
	//该地址值需要到IEEE申请，按照OUI的规定，前3个字节为厂商代码，后三个字节为产品序号
	//如果自己定义物理地址，注意第一个字节必须为偶数
	Write_W5500_nByte(SHAR,Phy_Addr,6);		
 8000e1c:	2206      	movs	r2, #6
 8000e1e:	4928      	ldr	r1, [pc, #160]	; (8000ec0 <W5500_Init+0xd0>)
 8000e20:	2009      	movs	r0, #9
 8000e22:	f7ff fca3 	bl	800076c <Write_W5500_nByte>

	//设置本机的IP地址,IP_ADDR为4字节unsigned char数组,自己定义
	//注意，网关IP必须与本机IP属于同一个子网，否则本机将无法找到网关
	Write_W5500_nByte(SIPR,IP_Addr,4);		
 8000e26:	2204      	movs	r2, #4
 8000e28:	4926      	ldr	r1, [pc, #152]	; (8000ec4 <W5500_Init+0xd4>)
 8000e2a:	200f      	movs	r0, #15
 8000e2c:	f7ff fc9e 	bl	800076c <Write_W5500_nByte>
	
	//设置发送缓冲区和接收缓冲区的大小，参考W5500数据手册
	Write_W5500_SOCK_1Byte(0,Sn_RXBUF_SIZE, 0x08);//Socket Rx memory size=8k
 8000e30:	2208      	movs	r2, #8
 8000e32:	211e      	movs	r1, #30
 8000e34:	2000      	movs	r0, #0
 8000e36:	f7ff fcc9 	bl	80007cc <Write_W5500_SOCK_1Byte>
	Write_W5500_SOCK_1Byte(0,Sn_TXBUF_SIZE, 0x08);//Socket Tx mempry size=8k
 8000e3a:	2208      	movs	r2, #8
 8000e3c:	211f      	movs	r1, #31
 8000e3e:	2000      	movs	r0, #0
 8000e40:	f7ff fcc4 	bl	80007cc <Write_W5500_SOCK_1Byte>
	
	Write_W5500_SOCK_1Byte(1,Sn_RXBUF_SIZE, 0x02);//Socket Rx memory size=2k
 8000e44:	2202      	movs	r2, #2
 8000e46:	211e      	movs	r1, #30
 8000e48:	2001      	movs	r0, #1
 8000e4a:	f7ff fcbf 	bl	80007cc <Write_W5500_SOCK_1Byte>
	Write_W5500_SOCK_1Byte(1,Sn_TXBUF_SIZE, 0x02);//Socket Tx mempry size=2k
 8000e4e:	2202      	movs	r2, #2
 8000e50:	211f      	movs	r1, #31
 8000e52:	2001      	movs	r0, #1
 8000e54:	f7ff fcba 	bl	80007cc <Write_W5500_SOCK_1Byte>
	for(i=2;i<8;i++)
 8000e58:	2302      	movs	r3, #2
 8000e5a:	71fb      	strb	r3, [r7, #7]
 8000e5c:	e00e      	b.n	8000e7c <W5500_Init+0x8c>
	{
		Write_W5500_SOCK_1Byte(i,Sn_RXBUF_SIZE, 0x01);//Socket Rx memory size=1k
 8000e5e:	79fb      	ldrb	r3, [r7, #7]
 8000e60:	2201      	movs	r2, #1
 8000e62:	211e      	movs	r1, #30
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff fcb1 	bl	80007cc <Write_W5500_SOCK_1Byte>
		Write_W5500_SOCK_1Byte(i,Sn_TXBUF_SIZE, 0x01);//Socket Tx mempry size=1k
 8000e6a:	79fb      	ldrb	r3, [r7, #7]
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	211f      	movs	r1, #31
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff fcab 	bl	80007cc <Write_W5500_SOCK_1Byte>
	for(i=2;i<8;i++)
 8000e76:	79fb      	ldrb	r3, [r7, #7]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	71fb      	strb	r3, [r7, #7]
 8000e7c:	79fb      	ldrb	r3, [r7, #7]
 8000e7e:	2b07      	cmp	r3, #7
 8000e80:	d9ed      	bls.n	8000e5e <W5500_Init+0x6e>
	}

	//设置重试时间，默认为2000(200ms) 
	//每一单位数值为100微秒,初始化时值设为2000(0x07D0),等于200毫秒
	Write_W5500_2Byte(RTR, 0x07d0);
 8000e82:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000e86:	2019      	movs	r0, #25
 8000e88:	f7ff fc4d 	bl	8000726 <Write_W5500_2Byte>

	//设置重试次数，默认为8次 
	//如果重发的次数超过设定值,则产生超时中断(相关的端口中断寄存器中的Sn_IR 超时位(TIMEOUT)置“1”)
	Write_W5500_1Byte(RCR,8);
 8000e8c:	2108      	movs	r1, #8
 8000e8e:	201b      	movs	r0, #27
 8000e90:	f7ff fc26 	bl	80006e0 <Write_W5500_1Byte>

	//启动中断，参考W5500数据手册确定自己需要的中断类型
	//IMR_CONFLICT是IP地址冲突异常中断,IMR_UNREACH是UDP通信时，地址无法到达的异常中断
	//其它是Socket事件中断，根据需要添加
	Write_W5500_1Byte(IMR,IM_IR7 | IM_IR6);
 8000e94:	21c0      	movs	r1, #192	; 0xc0
 8000e96:	2016      	movs	r0, #22
 8000e98:	f7ff fc22 	bl	80006e0 <Write_W5500_1Byte>
	Write_W5500_1Byte(SIMR,S0_IMR);
 8000e9c:	2101      	movs	r1, #1
 8000e9e:	2018      	movs	r0, #24
 8000ea0:	f7ff fc1e 	bl	80006e0 <Write_W5500_1Byte>
	//Write_W5500_SOCK_1Byte(0, Sn_IMR, IMR_SENDOK | IMR_TIMEOUT | IMR_RECV | IMR_DISCON | IMR_CON);
	Write_W5500_SOCK_1Byte(0, Sn_IMR,   IMR_TIMEOUT | IMR_RECV | IMR_DISCON | IMR_CON);
 8000ea4:	220f      	movs	r2, #15
 8000ea6:	212c      	movs	r1, #44	; 0x2c
 8000ea8:	2000      	movs	r0, #0
 8000eaa:	f7ff fc8f 	bl	80007cc <Write_W5500_SOCK_1Byte>

}
 8000eae:	bf00      	nop
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	20000090 	.word	0x20000090
 8000ebc:	20000094 	.word	0x20000094
 8000ec0:	20000098 	.word	0x20000098
 8000ec4:	200000a0 	.word	0x200000a0

08000ec8 <Detect_Gateway>:
* 输出    : 无
* 返回值  : 成功返回TRUE(0xFF),失败返回FALSE(0x00)
* 说明    : 无
*******************************************************************************/
unsigned char Detect_Gateway(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
	unsigned char ip_adde[4];
	ip_adde[0]=IP_Addr[0]+1;
 8000ece:	4b58      	ldr	r3, [pc, #352]	; (8001030 <Detect_Gateway+0x168>)
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	703b      	strb	r3, [r7, #0]
	ip_adde[1]=IP_Addr[1]+1;
 8000ed8:	4b55      	ldr	r3, [pc, #340]	; (8001030 <Detect_Gateway+0x168>)
 8000eda:	785b      	ldrb	r3, [r3, #1]
 8000edc:	3301      	adds	r3, #1
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	707b      	strb	r3, [r7, #1]
	ip_adde[2]=IP_Addr[2]+1;
 8000ee2:	4b53      	ldr	r3, [pc, #332]	; (8001030 <Detect_Gateway+0x168>)
 8000ee4:	789b      	ldrb	r3, [r3, #2]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	70bb      	strb	r3, [r7, #2]
	ip_adde[3]=IP_Addr[3]+1;
 8000eec:	4b50      	ldr	r3, [pc, #320]	; (8001030 <Detect_Gateway+0x168>)
 8000eee:	78db      	ldrb	r3, [r3, #3]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	70fb      	strb	r3, [r7, #3]

	//检查网关及获取网关的物理地址
	Write_W5500_SOCK_4Byte(0,Sn_DIPR,ip_adde);//向目的地址寄存器写入与本机IP不同的IP值
 8000ef6:	463b      	mov	r3, r7
 8000ef8:	461a      	mov	r2, r3
 8000efa:	210c      	movs	r1, #12
 8000efc:	2000      	movs	r0, #0
 8000efe:	f7ff fcc1 	bl	8000884 <Write_W5500_SOCK_4Byte>
	Write_W5500_SOCK_1Byte(0,Sn_MR,MR_UDP);//设置socket为TCP模式
 8000f02:	2202      	movs	r2, #2
 8000f04:	2100      	movs	r1, #0
 8000f06:	2000      	movs	r0, #0
 8000f08:	f7ff fc60 	bl	80007cc <Write_W5500_SOCK_1Byte>
	Write_W5500_SOCK_1Byte(0,Sn_CR,OPEN);//打开Socket	
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	2101      	movs	r1, #1
 8000f10:	2000      	movs	r0, #0
 8000f12:	f7ff fc5b 	bl	80007cc <Write_W5500_SOCK_1Byte>
	HAL_Delay(5);//延时5ms
 8000f16:	2005      	movs	r0, #5
 8000f18:	f001 f906 	bl	8002128 <HAL_Delay>
	Write_W5500_SOCK_4Byte(1,Sn_DIPR,ip_adde);//向目的地址寄存器写入与本机IP不同的IP值
 8000f1c:	463b      	mov	r3, r7
 8000f1e:	461a      	mov	r2, r3
 8000f20:	210c      	movs	r1, #12
 8000f22:	2001      	movs	r0, #1
 8000f24:	f7ff fcae 	bl	8000884 <Write_W5500_SOCK_4Byte>
	Write_W5500_SOCK_1Byte(1,Sn_MR,MR_UDP);//设置socket为TCP模式
 8000f28:	2202      	movs	r2, #2
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	2001      	movs	r0, #1
 8000f2e:	f7ff fc4d 	bl	80007cc <Write_W5500_SOCK_1Byte>
	Write_W5500_SOCK_1Byte(1,Sn_CR,OPEN);//打开Socket	
 8000f32:	2201      	movs	r2, #1
 8000f34:	2101      	movs	r1, #1
 8000f36:	2001      	movs	r0, #1
 8000f38:	f7ff fc48 	bl	80007cc <Write_W5500_SOCK_1Byte>
	HAL_Delay(5);//延时5ms 	 	
 8000f3c:	2005      	movs	r0, #5
 8000f3e:	f001 f8f3 	bl	8002128 <HAL_Delay>
//	Write_W5500_SOCK_4Byte(2,Sn_DIPR,ip_adde);//向目的地址寄存器写入与本机IP不同的IP值
//	Write_W5500_SOCK_1Byte(2,Sn_MR,MR_UDP);//设置socket为TCP模式
//	Write_W5500_SOCK_1Byte(2,Sn_CR,OPEN);//打开Socket	
//	HAL_Delay(5);//延时5ms 
	//printf("Sn_SR %d\n",Read_W5500_SOCK_1Byte(0,Sn_SR));
	if(Read_W5500_SOCK_1Byte(0,Sn_SR) != SOCK_INIT)//如果socket打开失败
 8000f42:	2103      	movs	r1, #3
 8000f44:	2000      	movs	r0, #0
 8000f46:	f7ff fd03 	bl	8000950 <Read_W5500_SOCK_1Byte>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b13      	cmp	r3, #19
 8000f4e:	d006      	beq.n	8000f5e <Detect_Gateway+0x96>
	{
		//printf("sock falied!\n");
		Write_W5500_SOCK_1Byte(0,Sn_CR,CLOSE);//打开不成功,关闭Socket
 8000f50:	2210      	movs	r2, #16
 8000f52:	2101      	movs	r1, #1
 8000f54:	2000      	movs	r0, #0
 8000f56:	f7ff fc39 	bl	80007cc <Write_W5500_SOCK_1Byte>
		return FALSE;//返回FALSE(0x00)
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	e064      	b.n	8001028 <Detect_Gateway+0x160>
	}
		if(Read_W5500_SOCK_1Byte(1,Sn_SR) != SOCK_INIT)//如果socket打开失败
 8000f5e:	2103      	movs	r1, #3
 8000f60:	2001      	movs	r0, #1
 8000f62:	f7ff fcf5 	bl	8000950 <Read_W5500_SOCK_1Byte>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b13      	cmp	r3, #19
 8000f6a:	d006      	beq.n	8000f7a <Detect_Gateway+0xb2>
	{
		//printf("sock falied!\n");
		Write_W5500_SOCK_1Byte(1,Sn_CR,CLOSE);//打开不成功,关闭Socket
 8000f6c:	2210      	movs	r2, #16
 8000f6e:	2101      	movs	r1, #1
 8000f70:	2001      	movs	r0, #1
 8000f72:	f7ff fc2b 	bl	80007cc <Write_W5500_SOCK_1Byte>
		return FALSE;//返回FALSE(0x00)
 8000f76:	2300      	movs	r3, #0
 8000f78:	e056      	b.n	8001028 <Detect_Gateway+0x160>
//		//printf("sock falied!\n");
//		Write_W5500_SOCK_1Byte(2,Sn_CR,CLOSE);//打开不成功,关闭Socket
//		return FALSE;//返回FALSE(0x00)
//	}

	Write_W5500_SOCK_1Byte(0,Sn_CR,CONNECT);//设置Socket为Connect模式	
 8000f7a:	2204      	movs	r2, #4
 8000f7c:	2101      	movs	r1, #1
 8000f7e:	2000      	movs	r0, #0
 8000f80:	f7ff fc24 	bl	80007cc <Write_W5500_SOCK_1Byte>
	Write_W5500_SOCK_1Byte(1,Sn_CR,CONNECT);//设置Socket为Connect模式
 8000f84:	2204      	movs	r2, #4
 8000f86:	2101      	movs	r1, #1
 8000f88:	2001      	movs	r0, #1
 8000f8a:	f7ff fc1f 	bl	80007cc <Write_W5500_SOCK_1Byte>
//	Write_W5500_SOCK_1Byte(2,Sn_CR,CONNECT);	

	do
	{
		uint8_t j=0;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	71fb      	strb	r3, [r7, #7]
		uint8_t m=0;
 8000f92:	2300      	movs	r3, #0
 8000f94:	71bb      	strb	r3, [r7, #6]
//		uint8_t k=0;
		j=Read_W5500_SOCK_1Byte(0,Sn_IR);//读取Socket0中断标志寄存器
 8000f96:	2102      	movs	r1, #2
 8000f98:	2000      	movs	r0, #0
 8000f9a:	f7ff fcd9 	bl	8000950 <Read_W5500_SOCK_1Byte>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	71fb      	strb	r3, [r7, #7]
		m=Read_W5500_SOCK_1Byte(1,Sn_IR);//读取Socket0中断标志寄存器
 8000fa2:	2102      	movs	r1, #2
 8000fa4:	2001      	movs	r0, #1
 8000fa6:	f7ff fcd3 	bl	8000950 <Read_W5500_SOCK_1Byte>
 8000faa:	4603      	mov	r3, r0
 8000fac:	71bb      	strb	r3, [r7, #6]
//		k=Read_W5500_SOCK_1Byte(2,Sn_IR);
		if(j!=0)
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d005      	beq.n	8000fc0 <Detect_Gateway+0xf8>
		Write_W5500_SOCK_1Byte(0,Sn_IR,j);
 8000fb4:	79fb      	ldrb	r3, [r7, #7]
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	2102      	movs	r1, #2
 8000fba:	2000      	movs	r0, #0
 8000fbc:	f7ff fc06 	bl	80007cc <Write_W5500_SOCK_1Byte>
		HAL_Delay(5);//延时5ms 
 8000fc0:	2005      	movs	r0, #5
 8000fc2:	f001 f8b1 	bl	8002128 <HAL_Delay>
		if(m!=0)
 8000fc6:	79bb      	ldrb	r3, [r7, #6]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d005      	beq.n	8000fd8 <Detect_Gateway+0x110>
		Write_W5500_SOCK_1Byte(1,Sn_IR,m);
 8000fcc:	79bb      	ldrb	r3, [r7, #6]
 8000fce:	461a      	mov	r2, r3
 8000fd0:	2102      	movs	r1, #2
 8000fd2:	2001      	movs	r0, #1
 8000fd4:	f7ff fbfa 	bl	80007cc <Write_W5500_SOCK_1Byte>
		HAL_Delay(5);//延时5ms 
 8000fd8:	2005      	movs	r0, #5
 8000fda:	f001 f8a5 	bl	8002128 <HAL_Delay>
//		Write_W5500_SOCK_1Byte(2,Sn_IR,k);
//		HAL_Delay(5);//延时5ms 
		if(((j&IR_TIMEOUT) == IR_TIMEOUT)||((m&IR_TIMEOUT) == IR_TIMEOUT))
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	f003 0308 	and.w	r3, r3, #8
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d104      	bne.n	8000ff2 <Detect_Gateway+0x12a>
 8000fe8:	79bb      	ldrb	r3, [r7, #6]
 8000fea:	f003 0308 	and.w	r3, r3, #8
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <Detect_Gateway+0x12e>
		{
			return FALSE;	
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	e018      	b.n	8001028 <Detect_Gateway+0x160>
		}
		else if((Read_W5500_SOCK_1Byte(0,Sn_DHAR) != 0xff)||(Read_W5500_SOCK_1Byte(1,Sn_DHAR) != 0xff))
 8000ff6:	2106      	movs	r1, #6
 8000ff8:	2000      	movs	r0, #0
 8000ffa:	f7ff fca9 	bl	8000950 <Read_W5500_SOCK_1Byte>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2bff      	cmp	r3, #255	; 0xff
 8001002:	d106      	bne.n	8001012 <Detect_Gateway+0x14a>
 8001004:	2106      	movs	r1, #6
 8001006:	2001      	movs	r0, #1
 8001008:	f7ff fca2 	bl	8000950 <Read_W5500_SOCK_1Byte>
 800100c:	4603      	mov	r3, r0
 800100e:	2bff      	cmp	r3, #255	; 0xff
 8001010:	d0bd      	beq.n	8000f8e <Detect_Gateway+0xc6>
		{
			Write_W5500_SOCK_1Byte(0,Sn_CR,CLOSE);//关闭Socket
 8001012:	2210      	movs	r2, #16
 8001014:	2101      	movs	r1, #1
 8001016:	2000      	movs	r0, #0
 8001018:	f7ff fbd8 	bl	80007cc <Write_W5500_SOCK_1Byte>
			Write_W5500_SOCK_1Byte(1,Sn_CR,CLOSE);//关闭Socket
 800101c:	2210      	movs	r2, #16
 800101e:	2101      	movs	r1, #1
 8001020:	2001      	movs	r0, #1
 8001022:	f7ff fbd3 	bl	80007cc <Write_W5500_SOCK_1Byte>
//			Write_W5500_SOCK_1Byte(2,Sn_CR,CLOSE);//关闭Socket
			return TRUE;							
 8001026:	2301      	movs	r3, #1
		}
	}while(1);
}
 8001028:	4618      	mov	r0, r3
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	200000a0 	.word	0x200000a0

08001034 <Socket_Init>:
* 输出    : 无
* 返回值  : 无
* 说明    : 无
*******************************************************************************/
void Socket_Init(SOCKET s)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	71fb      	strb	r3, [r7, #7]
	//设置分片长度，参考W5500数据手册，该值可以不修改	
	Write_W5500_SOCK_2Byte(s, Sn_MSSR, 1460);//最大分片字节数=1460(0x5b4)
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8001044:	2112      	movs	r1, #18
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff fbee 	bl	8000828 <Write_W5500_SOCK_2Byte>
//	Write_W5500_SOCK_2Byte(1, Sn_MSSR, 1460);//最大分片字节数=1460(0x5b4)
//	Write_W5500_SOCK_2Byte(2, Sn_MSSR, 1460);//最大分片字节数=1460(0x5b4)
	//设置指定端口
	switch(s)
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	2b07      	cmp	r3, #7
 8001050:	d836      	bhi.n	80010c0 <Socket_Init+0x8c>
 8001052:	a201      	add	r2, pc, #4	; (adr r2, 8001058 <Socket_Init+0x24>)
 8001054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001058:	08001079 	.word	0x08001079
 800105c:	080010c1 	.word	0x080010c1
 8001060:	080010c1 	.word	0x080010c1
 8001064:	080010c1 	.word	0x080010c1
 8001068:	080010c1 	.word	0x080010c1
 800106c:	080010c1 	.word	0x080010c1
 8001070:	080010c1 	.word	0x080010c1
 8001074:	080010c1 	.word	0x080010c1
	{
		case 0:
			//设置端口0的端口号
			Write_W5500_SOCK_2Byte(0, Sn_PORT, S0_Port[0]*256+S0_Port[1]);		
 8001078:	4b14      	ldr	r3, [pc, #80]	; (80010cc <Socket_Init+0x98>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	b29b      	uxth	r3, r3
 800107e:	021b      	lsls	r3, r3, #8
 8001080:	b29a      	uxth	r2, r3
 8001082:	4b12      	ldr	r3, [pc, #72]	; (80010cc <Socket_Init+0x98>)
 8001084:	785b      	ldrb	r3, [r3, #1]
 8001086:	b29b      	uxth	r3, r3
 8001088:	4413      	add	r3, r2
 800108a:	b29b      	uxth	r3, r3
 800108c:	461a      	mov	r2, r3
 800108e:	2104      	movs	r1, #4
 8001090:	2000      	movs	r0, #0
 8001092:	f7ff fbc9 	bl	8000828 <Write_W5500_SOCK_2Byte>
			Write_W5500_SOCK_4Byte(0, Sn_DIPR, S0_DIP);//设置目的主机IP
 8001096:	4a0e      	ldr	r2, [pc, #56]	; (80010d0 <Socket_Init+0x9c>)
 8001098:	210c      	movs	r1, #12
 800109a:	2000      	movs	r0, #0
 800109c:	f7ff fbf2 	bl	8000884 <Write_W5500_SOCK_4Byte>
			Write_W5500_SOCK_2Byte(0, Sn_DPORTR, S0_DPort[0]*256+S0_DPort[1]);//设置目的主机端口号			
 80010a0:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <Socket_Init+0xa0>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	021b      	lsls	r3, r3, #8
 80010a8:	b29a      	uxth	r2, r3
 80010aa:	4b0a      	ldr	r3, [pc, #40]	; (80010d4 <Socket_Init+0xa0>)
 80010ac:	785b      	ldrb	r3, [r3, #1]
 80010ae:	b29b      	uxth	r3, r3
 80010b0:	4413      	add	r3, r2
 80010b2:	b29b      	uxth	r3, r3
 80010b4:	461a      	mov	r2, r3
 80010b6:	2110      	movs	r1, #16
 80010b8:	2000      	movs	r0, #0
 80010ba:	f7ff fbb5 	bl	8000828 <Write_W5500_SOCK_2Byte>
			break;
 80010be:	e000      	b.n	80010c2 <Socket_Init+0x8e>

		case 7:
			break;

		default:
			break;
 80010c0:	bf00      	nop
	}
}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	200000a4 	.word	0x200000a4
 80010d0:	200000a8 	.word	0x200000a8
 80010d4:	200000ac 	.word	0x200000ac

080010d8 <Socket_Connect>:
* 说明    : 当本机Socket工作在客户端模式时,引用该程序,与远程服务器建立连接
*			如果启动连接后出现超时中断，则与服务器连接失败,需要重新调用该程序连接
*			该程序每调用一次,就与服务器产生一次连接
*******************************************************************************/
unsigned char Socket_Connect(SOCKET s)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	71fb      	strb	r3, [r7, #7]
	Write_W5500_SOCK_1Byte(s,Sn_MR,MR_TCP);//设置socket为TCP模式
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	2201      	movs	r2, #1
 80010e6:	2100      	movs	r1, #0
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff fb6f 	bl	80007cc <Write_W5500_SOCK_1Byte>
	Write_W5500_SOCK_1Byte(s,Sn_CR,OPEN);//打开Socket
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	2201      	movs	r2, #1
 80010f2:	2101      	movs	r1, #1
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff fb69 	bl	80007cc <Write_W5500_SOCK_1Byte>
	HAL_Delay(5);//延时5ms
 80010fa:	2005      	movs	r0, #5
 80010fc:	f001 f814 	bl	8002128 <HAL_Delay>
	if(Read_W5500_SOCK_1Byte(s,Sn_SR)!=SOCK_INIT)//如果socket打开失败
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	2103      	movs	r1, #3
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff fc23 	bl	8000950 <Read_W5500_SOCK_1Byte>
 800110a:	4603      	mov	r3, r0
 800110c:	2b13      	cmp	r3, #19
 800110e:	d007      	beq.n	8001120 <Socket_Connect+0x48>
	{
		Write_W5500_SOCK_1Byte(s,Sn_CR,CLOSE);//打开不成功,关闭Socket
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	2210      	movs	r2, #16
 8001114:	2101      	movs	r1, #1
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff fb58 	bl	80007cc <Write_W5500_SOCK_1Byte>
		return FALSE;//返回FALSE(0x00)
 800111c:	2300      	movs	r3, #0
 800111e:	e006      	b.n	800112e <Socket_Connect+0x56>
	}
	Write_W5500_SOCK_1Byte(s,Sn_CR,CONNECT);//设置Socket为Connect模式
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	2204      	movs	r2, #4
 8001124:	2101      	movs	r1, #1
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff fb50 	bl	80007cc <Write_W5500_SOCK_1Byte>
	return TRUE;//返回TRUE,设置成功
 800112c:	2301      	movs	r3, #1
}
 800112e:	4618      	mov	r0, r3
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <Socket_Listen>:
* 返回值  : 成功返回TRUE(0xFF),失败返回FALSE(0x00)
* 说明    : 当本机Socket工作在服务器模式时,引用该程序,等等远程主机的连接
*			该程序只调用一次,就使W5500设置为服务器模式
*******************************************************************************/
unsigned char Socket_Listen(SOCKET s)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b082      	sub	sp, #8
 800113a:	af00      	add	r7, sp, #0
 800113c:	4603      	mov	r3, r0
 800113e:	71fb      	strb	r3, [r7, #7]
	Write_W5500_SOCK_1Byte(s,Sn_MR,MR_TCP);//设置socket为TCP模式 
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	2201      	movs	r2, #1
 8001144:	2100      	movs	r1, #0
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff fb40 	bl	80007cc <Write_W5500_SOCK_1Byte>
	Write_W5500_SOCK_1Byte(s,Sn_CR,OPEN);//打开Socket	
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	2201      	movs	r2, #1
 8001150:	2101      	movs	r1, #1
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff fb3a 	bl	80007cc <Write_W5500_SOCK_1Byte>
	HAL_Delay(5);//延时5ms
 8001158:	2005      	movs	r0, #5
 800115a:	f000 ffe5 	bl	8002128 <HAL_Delay>
	if(Read_W5500_SOCK_1Byte(s,Sn_SR)!=SOCK_INIT)//如果socket打开失败
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	2103      	movs	r1, #3
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff fbf4 	bl	8000950 <Read_W5500_SOCK_1Byte>
 8001168:	4603      	mov	r3, r0
 800116a:	2b13      	cmp	r3, #19
 800116c:	d007      	beq.n	800117e <Socket_Listen+0x48>
	{
		Write_W5500_SOCK_1Byte(s,Sn_CR,CLOSE);//打开不成功,关闭Socket
 800116e:	79fb      	ldrb	r3, [r7, #7]
 8001170:	2210      	movs	r2, #16
 8001172:	2101      	movs	r1, #1
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff fb29 	bl	80007cc <Write_W5500_SOCK_1Byte>
		return FALSE;//返回FALSE(0x00)
 800117a:	2300      	movs	r3, #0
 800117c:	e019      	b.n	80011b2 <Socket_Listen+0x7c>
	}	
	Write_W5500_SOCK_1Byte(s,Sn_CR,LISTEN);//设置Socket为侦听模式	
 800117e:	79fb      	ldrb	r3, [r7, #7]
 8001180:	2202      	movs	r2, #2
 8001182:	2101      	movs	r1, #1
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff fb21 	bl	80007cc <Write_W5500_SOCK_1Byte>
	HAL_Delay(5);//延时5ms
 800118a:	2005      	movs	r0, #5
 800118c:	f000 ffcc 	bl	8002128 <HAL_Delay>
	if(Read_W5500_SOCK_1Byte(s,Sn_SR)!=SOCK_LISTEN)//如果socket设置失败
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	2103      	movs	r1, #3
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff fbdb 	bl	8000950 <Read_W5500_SOCK_1Byte>
 800119a:	4603      	mov	r3, r0
 800119c:	2b14      	cmp	r3, #20
 800119e:	d007      	beq.n	80011b0 <Socket_Listen+0x7a>
	{
		Write_W5500_SOCK_1Byte(s,Sn_CR,CLOSE);//设置不成功,关闭Socket
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	2210      	movs	r2, #16
 80011a4:	2101      	movs	r1, #1
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff fb10 	bl	80007cc <Write_W5500_SOCK_1Byte>
		return FALSE;//返回FALSE(0x00)
 80011ac:	2300      	movs	r3, #0
 80011ae:	e000      	b.n	80011b2 <Socket_Listen+0x7c>
	}

	return TRUE;
 80011b0:	2301      	movs	r3, #1

	//至此完成了Socket的打开和设置侦听工作,至于远程客户端是否与它建立连接,则需要等待Socket中断，
	//以判断Socket的连接是否成功。参考W5500数据手册的Socket中断状态
	//在服务器侦听模式不需要设置目的IP和目的端口号
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <Socket_UDP>:
* 返回值  : 成功返回TRUE(0xFF),失败返回FALSE(0x00)
* 说明    : 如果Socket工作在UDP模式,引用该程序,在UDP模式下,Socket通信不需要建立连接
*			该程序只调用一次，就使W5500设置为UDP模式
*******************************************************************************/
unsigned char Socket_UDP(SOCKET s)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b082      	sub	sp, #8
 80011be:	af00      	add	r7, sp, #0
 80011c0:	4603      	mov	r3, r0
 80011c2:	71fb      	strb	r3, [r7, #7]
	Write_W5500_SOCK_1Byte(s,Sn_MR,MR_UDP);//设置Socket为UDP模式*/
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	2202      	movs	r2, #2
 80011c8:	2100      	movs	r1, #0
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff fafe 	bl	80007cc <Write_W5500_SOCK_1Byte>
	Write_W5500_SOCK_1Byte(s,Sn_CR,OPEN);//打开Socket*/
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	2201      	movs	r2, #1
 80011d4:	2101      	movs	r1, #1
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff faf8 	bl	80007cc <Write_W5500_SOCK_1Byte>

	
	HAL_Delay(5);//延时5ms
 80011dc:	2005      	movs	r0, #5
 80011de:	f000 ffa3 	bl	8002128 <HAL_Delay>

	if(Read_W5500_SOCK_1Byte(s,Sn_SR)!=SOCK_UDP)//如果Socket打开失败
 80011e2:	79fb      	ldrb	r3, [r7, #7]
 80011e4:	2103      	movs	r1, #3
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff fbb2 	bl	8000950 <Read_W5500_SOCK_1Byte>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b22      	cmp	r3, #34	; 0x22
 80011f0:	d007      	beq.n	8001202 <Socket_UDP+0x48>
	{
		Write_W5500_SOCK_1Byte(s,Sn_CR,CLOSE);//打开不成功,关闭Socket
 80011f2:	79fb      	ldrb	r3, [r7, #7]
 80011f4:	2210      	movs	r2, #16
 80011f6:	2101      	movs	r1, #1
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff fae7 	bl	80007cc <Write_W5500_SOCK_1Byte>
		//printf("Socket_UDP failed!\n");
		return FALSE;//返回FALSE(0x00)
 80011fe:	2300      	movs	r3, #0
 8001200:	e000      	b.n	8001204 <Socket_UDP+0x4a>
	}
	else
	{
		//printf("UDP Success!\n");
		return TRUE;
 8001202:	2301      	movs	r3, #1
	}

	//至此完成了Socket的打开和UDP模式设置,在这种模式下它不需要与远程主机建立连接
	//因为Socket不需要建立连接,所以在发送数据前都可以设置目的主机IP和目的Socket的端口号
	//如果目的主机IP和目的Socket的端口号是固定的,在运行过程中没有改变,那么也可以在这里设置
}
 8001204:	4618      	mov	r0, r3
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <W5500_Interrupt_Process>:
* 输出    : 无
* 返回值  : 无
* 说明    : 无
*******************************************************************************/
void W5500_Interrupt_Process(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
	
	//中断方式
	unsigned char i,j;

IntDispose:
	W5500_Interrupt=0;//清零中断标志
 8001212:	4b3c      	ldr	r3, [pc, #240]	; (8001304 <W5500_Interrupt_Process+0xf8>)
 8001214:	2200      	movs	r2, #0
 8001216:	701a      	strb	r2, [r3, #0]
	i = Read_W5500_1Byte(IR);//读取中断标志寄存器
 8001218:	2015      	movs	r0, #21
 800121a:	f7ff fb78 	bl	800090e <Read_W5500_1Byte>
 800121e:	4603      	mov	r3, r0
 8001220:	71fb      	strb	r3, [r7, #7]

	Write_W5500_1Byte(IR, (i&0xf0));//回写清除中断标志
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	f023 030f 	bic.w	r3, r3, #15
 8001228:	b2db      	uxtb	r3, r3
 800122a:	4619      	mov	r1, r3
 800122c:	2015      	movs	r0, #21
 800122e:	f7ff fa57 	bl	80006e0 <Write_W5500_1Byte>

	if((i & CONFLICT) == CONFLICT)//IP地址冲突异常处理
 8001232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001236:	2b00      	cmp	r3, #0
 8001238:	da02      	bge.n	8001240 <W5500_Interrupt_Process+0x34>
	{
		 //自己添加代码
		printf("ip conflict!\r\n");
 800123a:	4833      	ldr	r0, [pc, #204]	; (8001308 <W5500_Interrupt_Process+0xfc>)
 800123c:	f006 f838 	bl	80072b0 <puts>
	}

	if((i & UNREACH) == UNREACH)//UDP模式下地址无法到达异常处理
 8001240:	79fb      	ldrb	r3, [r7, #7]
 8001242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001246:	2b00      	cmp	r3, #0
 8001248:	d002      	beq.n	8001250 <W5500_Interrupt_Process+0x44>
	{
		//自己添加代码
		printf("address can't reach!\r\n");
 800124a:	4830      	ldr	r0, [pc, #192]	; (800130c <W5500_Interrupt_Process+0x100>)
 800124c:	f006 f830 	bl	80072b0 <puts>
	}

	i=Read_W5500_1Byte(SIR);//读取端口中断标志寄存器
 8001250:	2017      	movs	r0, #23
 8001252:	f7ff fb5c 	bl	800090e <Read_W5500_1Byte>
 8001256:	4603      	mov	r3, r0
 8001258:	71fb      	strb	r3, [r7, #7]
	if((i & S0_INT) == S0_INT)//Socket0事件处理 
 800125a:	79fb      	ldrb	r3, [r7, #7]
 800125c:	f003 0301 	and.w	r3, r3, #1
 8001260:	2b00      	cmp	r3, #0
 8001262:	d043      	beq.n	80012ec <W5500_Interrupt_Process+0xe0>
	{
		//printf("Socket event process!\n");
		j=Read_W5500_SOCK_1Byte(0,Sn_IR);//读取Socket0中断标志寄存器
 8001264:	2102      	movs	r1, #2
 8001266:	2000      	movs	r0, #0
 8001268:	f7ff fb72 	bl	8000950 <Read_W5500_SOCK_1Byte>
 800126c:	4603      	mov	r3, r0
 800126e:	71bb      	strb	r3, [r7, #6]
		Write_W5500_SOCK_1Byte(0,Sn_IR,j);
 8001270:	79bb      	ldrb	r3, [r7, #6]
 8001272:	461a      	mov	r2, r3
 8001274:	2102      	movs	r1, #2
 8001276:	2000      	movs	r0, #0
 8001278:	f7ff faa8 	bl	80007cc <Write_W5500_SOCK_1Byte>
		if(j&IR_CON)//在TCP模式下,Socket0成功连接 
 800127c:	79bb      	ldrb	r3, [r7, #6]
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	2b00      	cmp	r3, #0
 8001284:	d006      	beq.n	8001294 <W5500_Interrupt_Process+0x88>
		{
			//printf("Socket Connect Success!\n");
			S0_State|=S_CONN;//网络连接状态0x02,端口完成连接，可以正常传输数据
 8001286:	4b22      	ldr	r3, [pc, #136]	; (8001310 <W5500_Interrupt_Process+0x104>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	f043 0302 	orr.w	r3, r3, #2
 800128e:	b2da      	uxtb	r2, r3
 8001290:	4b1f      	ldr	r3, [pc, #124]	; (8001310 <W5500_Interrupt_Process+0x104>)
 8001292:	701a      	strb	r2, [r3, #0]
		}
		if(j&IR_DISCON)//在TCP模式下Socket断开连接处理
 8001294:	79bb      	ldrb	r3, [r7, #6]
 8001296:	f003 0302 	and.w	r3, r3, #2
 800129a:	2b00      	cmp	r3, #0
 800129c:	d00a      	beq.n	80012b4 <W5500_Interrupt_Process+0xa8>
		{
			//DEBUG_PRINT("TCP 1 Socket disconnect!\n");
			Write_W5500_SOCK_1Byte(0,Sn_CR,CLOSE);//关闭端口,等待重新打开连接 
 800129e:	2210      	movs	r2, #16
 80012a0:	2101      	movs	r1, #1
 80012a2:	2000      	movs	r0, #0
 80012a4:	f7ff fa92 	bl	80007cc <Write_W5500_SOCK_1Byte>
			Socket_Init(0);		//指定Socket(0~7)初始化,初始化端口0
 80012a8:	2000      	movs	r0, #0
 80012aa:	f7ff fec3 	bl	8001034 <Socket_Init>
			S0_State=0;//网络连接状态0x00,端口连接失败
 80012ae:	4b18      	ldr	r3, [pc, #96]	; (8001310 <W5500_Interrupt_Process+0x104>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	701a      	strb	r2, [r3, #0]
//		if(j&IR_SEND_OK)//Socket0数据发送完成,可以再次启动S_tx_process()函数发送数据
//		{
//			printf("data SEND_OK\n\r");
//			S0_Data|=S_TRANSMITOK;//端口发送一个数据包完成
//		}
		if(j&IR_RECV)//Socket接收到数据,可以启动S_rx_process()函数 
 80012b4:	79bb      	ldrb	r3, [r7, #6]
 80012b6:	f003 0304 	and.w	r3, r3, #4
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d009      	beq.n	80012d2 <W5500_Interrupt_Process+0xc6>
		{
			printf("data RECV_OK!\n\r");
 80012be:	4815      	ldr	r0, [pc, #84]	; (8001314 <W5500_Interrupt_Process+0x108>)
 80012c0:	f005 ff70 	bl	80071a4 <iprintf>
			S0_Data|=S_RECEIVE;//端口接收到一个数据包
 80012c4:	4b14      	ldr	r3, [pc, #80]	; (8001318 <W5500_Interrupt_Process+0x10c>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	f043 0301 	orr.w	r3, r3, #1
 80012cc:	b2da      	uxtb	r2, r3
 80012ce:	4b12      	ldr	r3, [pc, #72]	; (8001318 <W5500_Interrupt_Process+0x10c>)
 80012d0:	701a      	strb	r2, [r3, #0]
		}
		if(j&IR_TIMEOUT)//Socket连接或数据传输超时处理 
 80012d2:	79bb      	ldrb	r3, [r7, #6]
 80012d4:	f003 0308 	and.w	r3, r3, #8
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d007      	beq.n	80012ec <W5500_Interrupt_Process+0xe0>
		{
			//DEBUG_PRINT("Socket timeout!\n");
			Write_W5500_SOCK_1Byte(0,Sn_CR,CLOSE);// 关闭端口,等待重新打开连接 
 80012dc:	2210      	movs	r2, #16
 80012de:	2101      	movs	r1, #1
 80012e0:	2000      	movs	r0, #0
 80012e2:	f7ff fa73 	bl	80007cc <Write_W5500_SOCK_1Byte>
			S0_State=0;//网络连接状态0x00,端口连接失败
 80012e6:	4b0a      	ldr	r3, [pc, #40]	; (8001310 <W5500_Interrupt_Process+0x104>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	701a      	strb	r2, [r3, #0]
		}
	}
	if(Read_W5500_1Byte(SIR) != 0)
 80012ec:	2017      	movs	r0, #23
 80012ee:	f7ff fb0e 	bl	800090e <Read_W5500_1Byte>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d000      	beq.n	80012fa <W5500_Interrupt_Process+0xee>
	{		
		//printf("IntDispose\n");
		goto IntDispose;
 80012f8:	e78b      	b.n	8001212 <W5500_Interrupt_Process+0x6>
	}
}
 80012fa:	bf00      	nop
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	200010b0 	.word	0x200010b0
 8001308:	08008208 	.word	0x08008208
 800130c:	08008218 	.word	0x08008218
 8001310:	200000ae 	.word	0x200000ae
 8001314:	08008230 	.word	0x08008230
 8001318:	200000af 	.word	0x200000af

0800131c <W5500_Initialization>:
//		Write_W5500_SOCK_4Byte(2, Sn_DIPR, S2_DIP);//设置目的主机IP
//		Write_W5500_SOCK_2Byte(2, Sn_DPORTR, S2_DPort[0]*256+S2_DPort[1]);//设置目的主机端口号		
//}

void W5500_Initialization(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
	W5500_Init();	
 8001320:	f7ff fd66 	bl	8000df0 <W5500_Init>
	Detect_Gateway();	
 8001324:	f7ff fdd0 	bl	8000ec8 <Detect_Gateway>
	Socket_Init(0);
 8001328:	2000      	movs	r0, #0
 800132a:	f7ff fe83 	bl	8001034 <Socket_Init>
	//Socket_Init(1);
//	Socket_Init(2);
	//Dport_Set();
}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
	...

08001334 <Load_Net_Parameters>:


void Load_Net_Parameters(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
	Gateway_IP[0] = 192;
 8001338:	4b2a      	ldr	r3, [pc, #168]	; (80013e4 <Load_Net_Parameters+0xb0>)
 800133a:	22c0      	movs	r2, #192	; 0xc0
 800133c:	701a      	strb	r2, [r3, #0]
	Gateway_IP[1] = 168;
 800133e:	4b29      	ldr	r3, [pc, #164]	; (80013e4 <Load_Net_Parameters+0xb0>)
 8001340:	22a8      	movs	r2, #168	; 0xa8
 8001342:	705a      	strb	r2, [r3, #1]
	Gateway_IP[2] = 100;
 8001344:	4b27      	ldr	r3, [pc, #156]	; (80013e4 <Load_Net_Parameters+0xb0>)
 8001346:	2264      	movs	r2, #100	; 0x64
 8001348:	709a      	strb	r2, [r3, #2]
	Gateway_IP[3] = 1;
 800134a:	4b26      	ldr	r3, [pc, #152]	; (80013e4 <Load_Net_Parameters+0xb0>)
 800134c:	2201      	movs	r2, #1
 800134e:	70da      	strb	r2, [r3, #3]

	Sub_Mask[0]=255;
 8001350:	4b25      	ldr	r3, [pc, #148]	; (80013e8 <Load_Net_Parameters+0xb4>)
 8001352:	22ff      	movs	r2, #255	; 0xff
 8001354:	701a      	strb	r2, [r3, #0]
	Sub_Mask[1]=255;
 8001356:	4b24      	ldr	r3, [pc, #144]	; (80013e8 <Load_Net_Parameters+0xb4>)
 8001358:	22ff      	movs	r2, #255	; 0xff
 800135a:	705a      	strb	r2, [r3, #1]
	Sub_Mask[2]=255;
 800135c:	4b22      	ldr	r3, [pc, #136]	; (80013e8 <Load_Net_Parameters+0xb4>)
 800135e:	22ff      	movs	r2, #255	; 0xff
 8001360:	709a      	strb	r2, [r3, #2]
	Sub_Mask[3]=0;
 8001362:	4b21      	ldr	r3, [pc, #132]	; (80013e8 <Load_Net_Parameters+0xb4>)
 8001364:	2200      	movs	r2, #0
 8001366:	70da      	strb	r2, [r3, #3]

	Phy_Addr[0]=0x0c;
 8001368:	4b20      	ldr	r3, [pc, #128]	; (80013ec <Load_Net_Parameters+0xb8>)
 800136a:	220c      	movs	r2, #12
 800136c:	701a      	strb	r2, [r3, #0]
	Phy_Addr[1]=0x29;
 800136e:	4b1f      	ldr	r3, [pc, #124]	; (80013ec <Load_Net_Parameters+0xb8>)
 8001370:	2229      	movs	r2, #41	; 0x29
 8001372:	705a      	strb	r2, [r3, #1]
	Phy_Addr[2]=0xab;
 8001374:	4b1d      	ldr	r3, [pc, #116]	; (80013ec <Load_Net_Parameters+0xb8>)
 8001376:	22ab      	movs	r2, #171	; 0xab
 8001378:	709a      	strb	r2, [r3, #2]
	Phy_Addr[3]=0x7c;
 800137a:	4b1c      	ldr	r3, [pc, #112]	; (80013ec <Load_Net_Parameters+0xb8>)
 800137c:	227c      	movs	r2, #124	; 0x7c
 800137e:	70da      	strb	r2, [r3, #3]
	Phy_Addr[4]=0x00;
 8001380:	4b1a      	ldr	r3, [pc, #104]	; (80013ec <Load_Net_Parameters+0xb8>)
 8001382:	2200      	movs	r2, #0
 8001384:	711a      	strb	r2, [r3, #4]
	Phy_Addr[5]=0x05;
 8001386:	4b19      	ldr	r3, [pc, #100]	; (80013ec <Load_Net_Parameters+0xb8>)
 8001388:	2205      	movs	r2, #5
 800138a:	715a      	strb	r2, [r3, #5]

	IP_Addr[0]=192;
 800138c:	4b18      	ldr	r3, [pc, #96]	; (80013f0 <Load_Net_Parameters+0xbc>)
 800138e:	22c0      	movs	r2, #192	; 0xc0
 8001390:	701a      	strb	r2, [r3, #0]
	IP_Addr[1]=168;
 8001392:	4b17      	ldr	r3, [pc, #92]	; (80013f0 <Load_Net_Parameters+0xbc>)
 8001394:	22a8      	movs	r2, #168	; 0xa8
 8001396:	705a      	strb	r2, [r3, #1]
	IP_Addr[2]=100;
 8001398:	4b15      	ldr	r3, [pc, #84]	; (80013f0 <Load_Net_Parameters+0xbc>)
 800139a:	2264      	movs	r2, #100	; 0x64
 800139c:	709a      	strb	r2, [r3, #2]
	IP_Addr[3]=10;
 800139e:	4b14      	ldr	r3, [pc, #80]	; (80013f0 <Load_Net_Parameters+0xbc>)
 80013a0:	220a      	movs	r2, #10
 80013a2:	70da      	strb	r2, [r3, #3]

	S0_Port[0] = 0x13;//5000 
 80013a4:	4b13      	ldr	r3, [pc, #76]	; (80013f4 <Load_Net_Parameters+0xc0>)
 80013a6:	2213      	movs	r2, #19
 80013a8:	701a      	strb	r2, [r3, #0]
	S0_Port[1] = 0x88;
 80013aa:	4b12      	ldr	r3, [pc, #72]	; (80013f4 <Load_Net_Parameters+0xc0>)
 80013ac:	2288      	movs	r2, #136	; 0x88
 80013ae:	705a      	strb	r2, [r3, #1]

	S0_DIP[0]=192;
 80013b0:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <Load_Net_Parameters+0xc4>)
 80013b2:	22c0      	movs	r2, #192	; 0xc0
 80013b4:	701a      	strb	r2, [r3, #0]
	S0_DIP[1]=168;
 80013b6:	4b10      	ldr	r3, [pc, #64]	; (80013f8 <Load_Net_Parameters+0xc4>)
 80013b8:	22a8      	movs	r2, #168	; 0xa8
 80013ba:	705a      	strb	r2, [r3, #1]
	S0_DIP[2]=100;
 80013bc:	4b0e      	ldr	r3, [pc, #56]	; (80013f8 <Load_Net_Parameters+0xc4>)
 80013be:	2264      	movs	r2, #100	; 0x64
 80013c0:	709a      	strb	r2, [r3, #2]
	S0_DIP[3]=7;
 80013c2:	4b0d      	ldr	r3, [pc, #52]	; (80013f8 <Load_Net_Parameters+0xc4>)
 80013c4:	2207      	movs	r2, #7
 80013c6:	70da      	strb	r2, [r3, #3]

	S0_DPort[0] = 0x22;//8899
 80013c8:	4b0c      	ldr	r3, [pc, #48]	; (80013fc <Load_Net_Parameters+0xc8>)
 80013ca:	2222      	movs	r2, #34	; 0x22
 80013cc:	701a      	strb	r2, [r3, #0]
	S0_DPort[1] = 0xC3;
 80013ce:	4b0b      	ldr	r3, [pc, #44]	; (80013fc <Load_Net_Parameters+0xc8>)
 80013d0:	22c3      	movs	r2, #195	; 0xc3
 80013d2:	705a      	strb	r2, [r3, #1]
//	UDP_DIPR[3] = 10;
//
//	UDP_DPORT[0] = 0x17;
//	UDP_DPORT[1] = 0x70;

	S0_Mode=UDP_MODE;
 80013d4:	4b0a      	ldr	r3, [pc, #40]	; (8001400 <Load_Net_Parameters+0xcc>)
 80013d6:	2202      	movs	r2, #2
 80013d8:	701a      	strb	r2, [r3, #0]
}
 80013da:	bf00      	nop
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	20000090 	.word	0x20000090
 80013e8:	20000094 	.word	0x20000094
 80013ec:	20000098 	.word	0x20000098
 80013f0:	200000a0 	.word	0x200000a0
 80013f4:	200000a4 	.word	0x200000a4
 80013f8:	200000a8 	.word	0x200000a8
 80013fc:	200000ac 	.word	0x200000ac
 8001400:	20000000 	.word	0x20000000

08001404 <Process_Socket_Data>:


void Process_Socket_Data(SOCKET s)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	4603      	mov	r3, r0
 800140c:	71fb      	strb	r3, [r7, #7]
	unsigned short size;
	size=Read_SOCK_Data_Buffer(s, Rx_Buffer);
 800140e:	79fb      	ldrb	r3, [r7, #7]
 8001410:	491c      	ldr	r1, [pc, #112]	; (8001484 <Process_Socket_Data+0x80>)
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff fb02 	bl	8000a1c <Read_SOCK_Data_Buffer>
 8001418:	4603      	mov	r3, r0
 800141a:	81fb      	strh	r3, [r7, #14]
	//DEBUG_PRINT("size=%d\n",size);
	
//	for(int i=0;i<size;i++){
//		printf("%c ",Rx_Buffer[i]);
//	}
	S0_DIP[0] = Rx_Buffer[0];
 800141c:	4b19      	ldr	r3, [pc, #100]	; (8001484 <Process_Socket_Data+0x80>)
 800141e:	781a      	ldrb	r2, [r3, #0]
 8001420:	4b19      	ldr	r3, [pc, #100]	; (8001488 <Process_Socket_Data+0x84>)
 8001422:	701a      	strb	r2, [r3, #0]
	//DEBUG_PRINT("UDP_DIPR:%d\n",Rx_Buffer[0]);
	S0_DIP[1] = Rx_Buffer[1];
 8001424:	4b17      	ldr	r3, [pc, #92]	; (8001484 <Process_Socket_Data+0x80>)
 8001426:	785a      	ldrb	r2, [r3, #1]
 8001428:	4b17      	ldr	r3, [pc, #92]	; (8001488 <Process_Socket_Data+0x84>)
 800142a:	705a      	strb	r2, [r3, #1]
	S0_DIP[2] = Rx_Buffer[2];
 800142c:	4b15      	ldr	r3, [pc, #84]	; (8001484 <Process_Socket_Data+0x80>)
 800142e:	789a      	ldrb	r2, [r3, #2]
 8001430:	4b15      	ldr	r3, [pc, #84]	; (8001488 <Process_Socket_Data+0x84>)
 8001432:	709a      	strb	r2, [r3, #2]
	S0_DIP[3] = Rx_Buffer[3];
 8001434:	4b13      	ldr	r3, [pc, #76]	; (8001484 <Process_Socket_Data+0x80>)
 8001436:	78da      	ldrb	r2, [r3, #3]
 8001438:	4b13      	ldr	r3, [pc, #76]	; (8001488 <Process_Socket_Data+0x84>)
 800143a:	70da      	strb	r2, [r3, #3]

	S0_DPort[0] = Rx_Buffer[4];
 800143c:	4b11      	ldr	r3, [pc, #68]	; (8001484 <Process_Socket_Data+0x80>)
 800143e:	791a      	ldrb	r2, [r3, #4]
 8001440:	4b12      	ldr	r3, [pc, #72]	; (800148c <Process_Socket_Data+0x88>)
 8001442:	701a      	strb	r2, [r3, #0]
	S0_DPort[1] = Rx_Buffer[5];
 8001444:	4b0f      	ldr	r3, [pc, #60]	; (8001484 <Process_Socket_Data+0x80>)
 8001446:	795a      	ldrb	r2, [r3, #5]
 8001448:	4b10      	ldr	r3, [pc, #64]	; (800148c <Process_Socket_Data+0x88>)
 800144a:	705a      	strb	r2, [r3, #1]
	memcpy(Tx_Buffer, Rx_Buffer+8, size-8);
 800144c:	4910      	ldr	r1, [pc, #64]	; (8001490 <Process_Socket_Data+0x8c>)
 800144e:	89fb      	ldrh	r3, [r7, #14]
 8001450:	3b08      	subs	r3, #8
 8001452:	461a      	mov	r2, r3
 8001454:	480f      	ldr	r0, [pc, #60]	; (8001494 <Process_Socket_Data+0x90>)
 8001456:	f005 fe8f 	bl	8007178 <memcpy>
	Tx_Buffer[size-8] = 0xFF;
 800145a:	89fb      	ldrh	r3, [r7, #14]
 800145c:	3b08      	subs	r3, #8
 800145e:	4a0d      	ldr	r2, [pc, #52]	; (8001494 <Process_Socket_Data+0x90>)
 8001460:	21ff      	movs	r1, #255	; 0xff
 8001462:	54d1      	strb	r1, [r2, r3]
	//Write_SOCK_Data_Buffer(s, Tx_Buffer, size-7);
	HAL_UART_Transmit(&huart4, Tx_Buffer, size - 7, 200);
 8001464:	89fb      	ldrh	r3, [r7, #14]
 8001466:	3b07      	subs	r3, #7
 8001468:	b29a      	uxth	r2, r3
 800146a:	23c8      	movs	r3, #200	; 0xc8
 800146c:	4909      	ldr	r1, [pc, #36]	; (8001494 <Process_Socket_Data+0x90>)
 800146e:	480a      	ldr	r0, [pc, #40]	; (8001498 <Process_Socket_Data+0x94>)
 8001470:	f004 faf8 	bl	8005a64 <HAL_UART_Transmit>
	printf("uart4 receive data from w5500\r\n");
 8001474:	4809      	ldr	r0, [pc, #36]	; (800149c <Process_Socket_Data+0x98>)
 8001476:	f005 ff1b 	bl	80072b0 <puts>
}
 800147a:	bf00      	nop
 800147c:	3710      	adds	r7, #16
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	200000b0 	.word	0x200000b0
 8001488:	200000a8 	.word	0x200000a8
 800148c:	200000ac 	.word	0x200000ac
 8001490:	200000b8 	.word	0x200000b8
 8001494:	200008b0 	.word	0x200008b0
 8001498:	2000126c 	.word	0x2000126c
 800149c:	08008240 	.word	0x08008240

080014a0 <W5500_Socket_Set>:

void W5500_Socket_Set(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
	if(S0_State==0)//???ú03?ê??ˉ????
 80014a4:	4b20      	ldr	r3, [pc, #128]	; (8001528 <W5500_Socket_Set+0x88>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d133      	bne.n	8001514 <W5500_Socket_Set+0x74>
	{
		if(S0_Mode==TCP_SERVER)//TCP·t???÷?￡ê? 
 80014ac:	4b1f      	ldr	r3, [pc, #124]	; (800152c <W5500_Socket_Set+0x8c>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d10d      	bne.n	80014d0 <W5500_Socket_Set+0x30>
		{
			if(Socket_Listen(0)==TRUE)
 80014b4:	2000      	movs	r0, #0
 80014b6:	f7ff fe3e 	bl	8001136 <Socket_Listen>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d103      	bne.n	80014c8 <W5500_Socket_Set+0x28>
				S0_State=S_INIT;
 80014c0:	4b19      	ldr	r3, [pc, #100]	; (8001528 <W5500_Socket_Set+0x88>)
 80014c2:	2201      	movs	r2, #1
 80014c4:	701a      	strb	r2, [r3, #0]
 80014c6:	e025      	b.n	8001514 <W5500_Socket_Set+0x74>
			else
			{
				//DEBUG_PRINT("ERROR1\n");
				S0_State=0;
 80014c8:	4b17      	ldr	r3, [pc, #92]	; (8001528 <W5500_Socket_Set+0x88>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	701a      	strb	r2, [r3, #0]
 80014ce:	e021      	b.n	8001514 <W5500_Socket_Set+0x74>
			}
		}
		else if(S0_Mode==TCP_CLIENT)//TCP?í?§???￡ê? 
 80014d0:	4b16      	ldr	r3, [pc, #88]	; (800152c <W5500_Socket_Set+0x8c>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d10d      	bne.n	80014f4 <W5500_Socket_Set+0x54>
		{
			if(Socket_Connect(0)==TRUE)
 80014d8:	2000      	movs	r0, #0
 80014da:	f7ff fdfd 	bl	80010d8 <Socket_Connect>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d103      	bne.n	80014ec <W5500_Socket_Set+0x4c>
				S0_State=S_INIT;
 80014e4:	4b10      	ldr	r3, [pc, #64]	; (8001528 <W5500_Socket_Set+0x88>)
 80014e6:	2201      	movs	r2, #1
 80014e8:	701a      	strb	r2, [r3, #0]
 80014ea:	e013      	b.n	8001514 <W5500_Socket_Set+0x74>
			else
			{
				//DEBUG_PRINT("ERROR2\n");
				S0_State=0;
 80014ec:	4b0e      	ldr	r3, [pc, #56]	; (8001528 <W5500_Socket_Set+0x88>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	701a      	strb	r2, [r3, #0]
 80014f2:	e00f      	b.n	8001514 <W5500_Socket_Set+0x74>
			}
		}
		else//UDP?￡ê? 
		{
			if(Socket_UDP(0)==TRUE)
 80014f4:	2000      	movs	r0, #0
 80014f6:	f7ff fe60 	bl	80011ba <Socket_UDP>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d106      	bne.n	800150e <W5500_Socket_Set+0x6e>
			{
				S0_State=S_INIT|S_CONN;
 8001500:	4b09      	ldr	r3, [pc, #36]	; (8001528 <W5500_Socket_Set+0x88>)
 8001502:	2203      	movs	r2, #3
 8001504:	701a      	strb	r2, [r3, #0]
				printf("socket open success!\r\n");
 8001506:	480a      	ldr	r0, [pc, #40]	; (8001530 <W5500_Socket_Set+0x90>)
 8001508:	f005 fed2 	bl	80072b0 <puts>
 800150c:	e002      	b.n	8001514 <W5500_Socket_Set+0x74>
				//DEBUG_PRINT("Socket_UDP Success!\n");
			}
			else
			{
				//DEBUG_PRINT("ERROR3\n");
				S0_State=0;
 800150e:	4b06      	ldr	r3, [pc, #24]	; (8001528 <W5500_Socket_Set+0x88>)
 8001510:	2200      	movs	r2, #0
 8001512:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	Write_W5500_1Byte(PHYCFGR,0x4a);
 8001514:	214a      	movs	r1, #74	; 0x4a
 8001516:	202e      	movs	r0, #46	; 0x2e
 8001518:	f7ff f8e2 	bl	80006e0 <Write_W5500_1Byte>
	Write_W5500_1Byte(PHYCFGR,0xca);
 800151c:	21ca      	movs	r1, #202	; 0xca
 800151e:	202e      	movs	r0, #46	; 0x2e
 8001520:	f7ff f8de 	bl	80006e0 <Write_W5500_1Byte>
	//uint8_t PHY=Read_W5500_1Byte(PHYCFGR);
	//DEBUG_PRINT("PHYCFGR: %x\n",PHY);
}
 8001524:	bf00      	nop
 8001526:	bd80      	pop	{r7, pc}
 8001528:	200000ae 	.word	0x200000ae
 800152c:	20000000 	.word	0x20000000
 8001530:	08008260 	.word	0x08008260

08001534 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800153a:	4b10      	ldr	r3, [pc, #64]	; (800157c <MX_DMA_Init+0x48>)
 800153c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800153e:	4a0f      	ldr	r2, [pc, #60]	; (800157c <MX_DMA_Init+0x48>)
 8001540:	f043 0302 	orr.w	r3, r3, #2
 8001544:	6493      	str	r3, [r2, #72]	; 0x48
 8001546:	4b0d      	ldr	r3, [pc, #52]	; (800157c <MX_DMA_Init+0x48>)
 8001548:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	607b      	str	r3, [r7, #4]
 8001550:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 8001552:	2200      	movs	r2, #0
 8001554:	2100      	movs	r1, #0
 8001556:	203a      	movs	r0, #58	; 0x3a
 8001558:	f000 fee5 	bl	8002326 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 800155c:	203a      	movs	r0, #58	; 0x3a
 800155e:	f000 fefe 	bl	800235e <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 8001562:	2200      	movs	r2, #0
 8001564:	2100      	movs	r1, #0
 8001566:	203c      	movs	r0, #60	; 0x3c
 8001568:	f000 fedd 	bl	8002326 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 800156c:	203c      	movs	r0, #60	; 0x3c
 800156e:	f000 fef6 	bl	800235e <HAL_NVIC_EnableIRQ>

}
 8001572:	bf00      	nop
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40021000 	.word	0x40021000

08001580 <MX_GPIO_Init>:
        * EXTI
     PB6   ------> USART1_TX
     PB7   ------> USART1_RX
*/
void MX_GPIO_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b08a      	sub	sp, #40	; 0x28
 8001584:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001586:	f107 0314 	add.w	r3, r7, #20
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	605a      	str	r2, [r3, #4]
 8001590:	609a      	str	r2, [r3, #8]
 8001592:	60da      	str	r2, [r3, #12]
 8001594:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001596:	4b41      	ldr	r3, [pc, #260]	; (800169c <MX_GPIO_Init+0x11c>)
 8001598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800159a:	4a40      	ldr	r2, [pc, #256]	; (800169c <MX_GPIO_Init+0x11c>)
 800159c:	f043 0304 	orr.w	r3, r3, #4
 80015a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015a2:	4b3e      	ldr	r3, [pc, #248]	; (800169c <MX_GPIO_Init+0x11c>)
 80015a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a6:	f003 0304 	and.w	r3, r3, #4
 80015aa:	613b      	str	r3, [r7, #16]
 80015ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015ae:	4b3b      	ldr	r3, [pc, #236]	; (800169c <MX_GPIO_Init+0x11c>)
 80015b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b2:	4a3a      	ldr	r2, [pc, #232]	; (800169c <MX_GPIO_Init+0x11c>)
 80015b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015ba:	4b38      	ldr	r3, [pc, #224]	; (800169c <MX_GPIO_Init+0x11c>)
 80015bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c6:	4b35      	ldr	r3, [pc, #212]	; (800169c <MX_GPIO_Init+0x11c>)
 80015c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ca:	4a34      	ldr	r2, [pc, #208]	; (800169c <MX_GPIO_Init+0x11c>)
 80015cc:	f043 0301 	orr.w	r3, r3, #1
 80015d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015d2:	4b32      	ldr	r3, [pc, #200]	; (800169c <MX_GPIO_Init+0x11c>)
 80015d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	60bb      	str	r3, [r7, #8]
 80015dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015de:	4b2f      	ldr	r3, [pc, #188]	; (800169c <MX_GPIO_Init+0x11c>)
 80015e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e2:	4a2e      	ldr	r2, [pc, #184]	; (800169c <MX_GPIO_Init+0x11c>)
 80015e4:	f043 0302 	orr.w	r3, r3, #2
 80015e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015ea:	4b2c      	ldr	r3, [pc, #176]	; (800169c <MX_GPIO_Init+0x11c>)
 80015ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	607b      	str	r3, [r7, #4]
 80015f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W5500_RST_GPIO_Port, W5500_RST_Pin, GPIO_PIN_RESET);
 80015f6:	2200      	movs	r2, #0
 80015f8:	2180      	movs	r1, #128	; 0x80
 80015fa:	4829      	ldr	r0, [pc, #164]	; (80016a0 <MX_GPIO_Init+0x120>)
 80015fc:	f001 fade 	bl	8002bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_NSS_GPIO_Port, SPI3_NSS_Pin, GPIO_PIN_SET);
 8001600:	2201      	movs	r2, #1
 8001602:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001606:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800160a:	f001 fad7 	bl	8002bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = W5500_INT_Pin;
 800160e:	2340      	movs	r3, #64	; 0x40
 8001610:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001612:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001616:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001618:	2301      	movs	r3, #1
 800161a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(W5500_INT_GPIO_Port, &GPIO_InitStruct);
 800161c:	f107 0314 	add.w	r3, r7, #20
 8001620:	4619      	mov	r1, r3
 8001622:	481f      	ldr	r0, [pc, #124]	; (80016a0 <MX_GPIO_Init+0x120>)
 8001624:	f001 f938 	bl	8002898 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = W5500_RST_Pin;
 8001628:	2380      	movs	r3, #128	; 0x80
 800162a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800162c:	2301      	movs	r3, #1
 800162e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001634:	2301      	movs	r3, #1
 8001636:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(W5500_RST_GPIO_Port, &GPIO_InitStruct);
 8001638:	f107 0314 	add.w	r3, r7, #20
 800163c:	4619      	mov	r1, r3
 800163e:	4818      	ldr	r0, [pc, #96]	; (80016a0 <MX_GPIO_Init+0x120>)
 8001640:	f001 f92a 	bl	8002898 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI3_NSS_Pin;
 8001644:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001648:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800164a:	2301      	movs	r3, #1
 800164c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164e:	2300      	movs	r3, #0
 8001650:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001652:	2303      	movs	r3, #3
 8001654:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI3_NSS_GPIO_Port, &GPIO_InitStruct);
 8001656:	f107 0314 	add.w	r3, r7, #20
 800165a:	4619      	mov	r1, r3
 800165c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001660:	f001 f91a 	bl	8002898 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001664:	23c0      	movs	r3, #192	; 0xc0
 8001666:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001668:	2302      	movs	r3, #2
 800166a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166c:	2300      	movs	r3, #0
 800166e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001670:	2303      	movs	r3, #3
 8001672:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001674:	2307      	movs	r3, #7
 8001676:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001678:	f107 0314 	add.w	r3, r7, #20
 800167c:	4619      	mov	r1, r3
 800167e:	4809      	ldr	r0, [pc, #36]	; (80016a4 <MX_GPIO_Init+0x124>)
 8001680:	f001 f90a 	bl	8002898 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001684:	2200      	movs	r2, #0
 8001686:	2100      	movs	r1, #0
 8001688:	2017      	movs	r0, #23
 800168a:	f000 fe4c 	bl	8002326 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800168e:	2017      	movs	r0, #23
 8001690:	f000 fe65 	bl	800235e <HAL_NVIC_EnableIRQ>

}
 8001694:	bf00      	nop
 8001696:	3728      	adds	r7, #40	; 0x28
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	40021000 	.word	0x40021000
 80016a0:	48000800 	.word	0x48000800
 80016a4:	48000400 	.word	0x48000400

080016a8 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//GPIO外部中断处理回调函数
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	4603      	mov	r3, r0
 80016b0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_6){
 80016b2:	88fb      	ldrh	r3, [r7, #6]
 80016b4:	2b40      	cmp	r3, #64	; 0x40
 80016b6:	d102      	bne.n	80016be <HAL_GPIO_EXTI_Callback+0x16>
		W5500_Interrupt=1;
 80016b8:	4b04      	ldr	r3, [pc, #16]	; (80016cc <HAL_GPIO_EXTI_Callback+0x24>)
 80016ba:	2201      	movs	r2, #1
 80016bc:	701a      	strb	r2, [r3, #0]
	}
}
 80016be:	bf00      	nop
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	200010b0 	.word	0x200010b0

080016d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016d4:	f000 fcb3 	bl	800203e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016d8:	f000 f858 	bl	800178c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016dc:	f7ff ff50 	bl	8001580 <MX_GPIO_Init>
  MX_DMA_Init();
 80016e0:	f7ff ff28 	bl	8001534 <MX_DMA_Init>
  MX_SPI3_Init();
 80016e4:	f000 f8a6 	bl	8001834 <MX_SPI3_Init>
  MX_TIM2_Init();
 80016e8:	f000 fa96 	bl	8001c18 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80016ec:	f000 fb36 	bl	8001d5c <MX_USART2_UART_Init>
  MX_UART4_Init();
 80016f0:	f000 fb04 	bl	8001cfc <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
//  HAL_TIM_Base_Start_IT((TIM_HandleTypeDef *)&htim2); //�????????????启定时器2中断

  printf("uart init success\n\r");
 80016f4:	481f      	ldr	r0, [pc, #124]	; (8001774 <main+0xa4>)
 80016f6:	f005 fd55 	bl	80071a4 <iprintf>

  Load_Net_Parameters();		//装载网络参数
 80016fa:	f7ff fe1b 	bl	8001334 <Load_Net_Parameters>
  	W5500_Hardware_Reset();		//硬件复位W5500
 80016fe:	f7ff fb53 	bl	8000da8 <W5500_Hardware_Reset>
  	W5500_Initialization();		//W5500初始货配�?????????????
 8001702:	f7ff fe0b 	bl	800131c <W5500_Initialization>
  	printf("w5500 init success\n\r");
 8001706:	481c      	ldr	r0, [pc, #112]	; (8001778 <main+0xa8>)
 8001708:	f005 fd4c 	bl	80071a4 <iprintf>
  	W5500_Socket_Set();//W5500端口初始化配�??
 800170c:	f7ff fec8 	bl	80014a0 <W5500_Socket_Set>
  	__HAL_UART_ENABLE_IT(&huart4, UART_IT_IDLE);
 8001710:	4b1a      	ldr	r3, [pc, #104]	; (800177c <main+0xac>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	4b19      	ldr	r3, [pc, #100]	; (800177c <main+0xac>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f042 0210 	orr.w	r2, r2, #16
 800171e:	601a      	str	r2, [r3, #0]
  	__HAL_UART_ENABLE_IT(&huart4, UART_IT_RXNE);
 8001720:	4b16      	ldr	r3, [pc, #88]	; (800177c <main+0xac>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	4b15      	ldr	r3, [pc, #84]	; (800177c <main+0xac>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f042 0220 	orr.w	r2, r2, #32
 800172e:	601a      	str	r2, [r3, #0]
  	//__HAL_UART_CLEAR_IDLEFLAG(&huart4);
  	HAL_UART_Receive_DMA(&huart4, DMA_Buffer, DMA_BUFFER_LENGTH);
 8001730:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001734:	4912      	ldr	r1, [pc, #72]	; (8001780 <main+0xb0>)
 8001736:	4811      	ldr	r0, [pc, #68]	; (800177c <main+0xac>)
 8001738:	f004 fa28 	bl	8005b8c <HAL_UART_Receive_DMA>

  /* USER CODE END 2 */
  	HAL_Delay(1000);
 800173c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001740:	f000 fcf2 	bl	8002128 <HAL_Delay>
//	  HAL_UART_Transmit(&huart4, buf, sizeof(buf), 200);

//
//	  	  printf("system is running\r\n");
//	  	  HAL_Delay(1000);
	  		if(W5500_Interrupt)//处理W5500中断
 8001744:	4b0f      	ldr	r3, [pc, #60]	; (8001784 <main+0xb4>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <main+0x80>
	  		{
	  			W5500_Interrupt_Process();//W5500中断处理程序框架
 800174c:	f7ff fd5e 	bl	800120c <W5500_Interrupt_Process>
	  		}
	  		if((S0_Data & S_RECEIVE) == S_RECEIVE)//如果Socket0接收到数�??
 8001750:	4b0d      	ldr	r3, [pc, #52]	; (8001788 <main+0xb8>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	f003 0301 	and.w	r3, r3, #1
 8001758:	2b00      	cmp	r3, #0
 800175a:	d0f3      	beq.n	8001744 <main+0x74>
	  		{
	  			S0_Data&=~S_RECEIVE;
 800175c:	4b0a      	ldr	r3, [pc, #40]	; (8001788 <main+0xb8>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	f023 0301 	bic.w	r3, r3, #1
 8001764:	b2da      	uxtb	r2, r3
 8001766:	4b08      	ldr	r3, [pc, #32]	; (8001788 <main+0xb8>)
 8001768:	701a      	strb	r2, [r3, #0]
	  			Process_Socket_Data(0);//W5500接收并发送接收到的数�??
 800176a:	2000      	movs	r0, #0
 800176c:	f7ff fe4a 	bl	8001404 <Process_Socket_Data>
	  		if(W5500_Interrupt)//处理W5500中断
 8001770:	e7e8      	b.n	8001744 <main+0x74>
 8001772:	bf00      	nop
 8001774:	08008278 	.word	0x08008278
 8001778:	0800828c 	.word	0x0800828c
 800177c:	2000126c 	.word	0x2000126c
 8001780:	20001168 	.word	0x20001168
 8001784:	200010b0 	.word	0x200010b0
 8001788:	200000af 	.word	0x200000af

0800178c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b096      	sub	sp, #88	; 0x58
 8001790:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001792:	f107 0314 	add.w	r3, r7, #20
 8001796:	2244      	movs	r2, #68	; 0x44
 8001798:	2100      	movs	r1, #0
 800179a:	4618      	mov	r0, r3
 800179c:	f005 fcfa 	bl	8007194 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017a0:	463b      	mov	r3, r7
 80017a2:	2200      	movs	r2, #0
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	605a      	str	r2, [r3, #4]
 80017a8:	609a      	str	r2, [r3, #8]
 80017aa:	60da      	str	r2, [r3, #12]
 80017ac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80017ae:	f44f 7000 	mov.w	r0, #512	; 0x200
 80017b2:	f001 fa41 	bl	8002c38 <HAL_PWREx_ControlVoltageScaling>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80017bc:	f000 f835 	bl	800182a <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017c0:	2301      	movs	r3, #1
 80017c2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017ca:	2302      	movs	r3, #2
 80017cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017ce:	2303      	movs	r3, #3
 80017d0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 80017d2:	2302      	movs	r3, #2
 80017d4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 12;
 80017d6:	230c      	movs	r3, #12
 80017d8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017da:	2302      	movs	r3, #2
 80017dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80017de:	2302      	movs	r3, #2
 80017e0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80017e2:	2302      	movs	r3, #2
 80017e4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017e6:	f107 0314 	add.w	r3, r7, #20
 80017ea:	4618      	mov	r0, r3
 80017ec:	f001 fa7a 	bl	8002ce4 <HAL_RCC_OscConfig>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80017f6:	f000 f818 	bl	800182a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017fa:	230f      	movs	r3, #15
 80017fc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017fe:	2303      	movs	r3, #3
 8001800:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001802:	2300      	movs	r3, #0
 8001804:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001806:	2300      	movs	r3, #0
 8001808:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800180a:	2300      	movs	r3, #0
 800180c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800180e:	463b      	mov	r3, r7
 8001810:	2104      	movs	r1, #4
 8001812:	4618      	mov	r0, r3
 8001814:	f001 fe80 	bl	8003518 <HAL_RCC_ClockConfig>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800181e:	f000 f804 	bl	800182a <Error_Handler>
  }
}
 8001822:	bf00      	nop
 8001824:	3758      	adds	r7, #88	; 0x58
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800182a:	b480      	push	{r7}
 800182c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800182e:	b672      	cpsid	i
}
 8001830:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001832:	e7fe      	b.n	8001832 <Error_Handler+0x8>

08001834 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001838:	4b1b      	ldr	r3, [pc, #108]	; (80018a8 <MX_SPI3_Init+0x74>)
 800183a:	4a1c      	ldr	r2, [pc, #112]	; (80018ac <MX_SPI3_Init+0x78>)
 800183c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800183e:	4b1a      	ldr	r3, [pc, #104]	; (80018a8 <MX_SPI3_Init+0x74>)
 8001840:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001844:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001846:	4b18      	ldr	r3, [pc, #96]	; (80018a8 <MX_SPI3_Init+0x74>)
 8001848:	2200      	movs	r2, #0
 800184a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800184c:	4b16      	ldr	r3, [pc, #88]	; (80018a8 <MX_SPI3_Init+0x74>)
 800184e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001852:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001854:	4b14      	ldr	r3, [pc, #80]	; (80018a8 <MX_SPI3_Init+0x74>)
 8001856:	2200      	movs	r2, #0
 8001858:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800185a:	4b13      	ldr	r3, [pc, #76]	; (80018a8 <MX_SPI3_Init+0x74>)
 800185c:	2200      	movs	r2, #0
 800185e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001860:	4b11      	ldr	r3, [pc, #68]	; (80018a8 <MX_SPI3_Init+0x74>)
 8001862:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001866:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001868:	4b0f      	ldr	r3, [pc, #60]	; (80018a8 <MX_SPI3_Init+0x74>)
 800186a:	2200      	movs	r2, #0
 800186c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800186e:	4b0e      	ldr	r3, [pc, #56]	; (80018a8 <MX_SPI3_Init+0x74>)
 8001870:	2200      	movs	r2, #0
 8001872:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001874:	4b0c      	ldr	r3, [pc, #48]	; (80018a8 <MX_SPI3_Init+0x74>)
 8001876:	2200      	movs	r2, #0
 8001878:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800187a:	4b0b      	ldr	r3, [pc, #44]	; (80018a8 <MX_SPI3_Init+0x74>)
 800187c:	2200      	movs	r2, #0
 800187e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001880:	4b09      	ldr	r3, [pc, #36]	; (80018a8 <MX_SPI3_Init+0x74>)
 8001882:	2207      	movs	r2, #7
 8001884:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001886:	4b08      	ldr	r3, [pc, #32]	; (80018a8 <MX_SPI3_Init+0x74>)
 8001888:	2200      	movs	r2, #0
 800188a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800188c:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <MX_SPI3_Init+0x74>)
 800188e:	2208      	movs	r2, #8
 8001890:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001892:	4805      	ldr	r0, [pc, #20]	; (80018a8 <MX_SPI3_Init+0x74>)
 8001894:	f002 fd2e 	bl	80042f4 <HAL_SPI_Init>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800189e:	f7ff ffc4 	bl	800182a <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	200010b4 	.word	0x200010b4
 80018ac:	40003c00 	.word	0x40003c00

080018b0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b08a      	sub	sp, #40	; 0x28
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b8:	f107 0314 	add.w	r3, r7, #20
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	605a      	str	r2, [r3, #4]
 80018c2:	609a      	str	r2, [r3, #8]
 80018c4:	60da      	str	r2, [r3, #12]
 80018c6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a17      	ldr	r2, [pc, #92]	; (800192c <HAL_SPI_MspInit+0x7c>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d127      	bne.n	8001922 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80018d2:	4b17      	ldr	r3, [pc, #92]	; (8001930 <HAL_SPI_MspInit+0x80>)
 80018d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018d6:	4a16      	ldr	r2, [pc, #88]	; (8001930 <HAL_SPI_MspInit+0x80>)
 80018d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018dc:	6593      	str	r3, [r2, #88]	; 0x58
 80018de:	4b14      	ldr	r3, [pc, #80]	; (8001930 <HAL_SPI_MspInit+0x80>)
 80018e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018e6:	613b      	str	r3, [r7, #16]
 80018e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ea:	4b11      	ldr	r3, [pc, #68]	; (8001930 <HAL_SPI_MspInit+0x80>)
 80018ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ee:	4a10      	ldr	r2, [pc, #64]	; (8001930 <HAL_SPI_MspInit+0x80>)
 80018f0:	f043 0302 	orr.w	r3, r3, #2
 80018f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018f6:	4b0e      	ldr	r3, [pc, #56]	; (8001930 <HAL_SPI_MspInit+0x80>)
 80018f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018fa:	f003 0302 	and.w	r3, r3, #2
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI3_SCK
    PB4 (NJTRST)     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001902:	2338      	movs	r3, #56	; 0x38
 8001904:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001906:	2302      	movs	r3, #2
 8001908:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190a:	2300      	movs	r3, #0
 800190c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800190e:	2303      	movs	r3, #3
 8001910:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001912:	2306      	movs	r3, #6
 8001914:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001916:	f107 0314 	add.w	r3, r7, #20
 800191a:	4619      	mov	r1, r3
 800191c:	4805      	ldr	r0, [pc, #20]	; (8001934 <HAL_SPI_MspInit+0x84>)
 800191e:	f000 ffbb 	bl	8002898 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001922:	bf00      	nop
 8001924:	3728      	adds	r7, #40	; 0x28
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	40003c00 	.word	0x40003c00
 8001930:	40021000 	.word	0x40021000
 8001934:	48000400 	.word	0x48000400

08001938 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800193e:	4b0f      	ldr	r3, [pc, #60]	; (800197c <HAL_MspInit+0x44>)
 8001940:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001942:	4a0e      	ldr	r2, [pc, #56]	; (800197c <HAL_MspInit+0x44>)
 8001944:	f043 0301 	orr.w	r3, r3, #1
 8001948:	6613      	str	r3, [r2, #96]	; 0x60
 800194a:	4b0c      	ldr	r3, [pc, #48]	; (800197c <HAL_MspInit+0x44>)
 800194c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	607b      	str	r3, [r7, #4]
 8001954:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001956:	4b09      	ldr	r3, [pc, #36]	; (800197c <HAL_MspInit+0x44>)
 8001958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800195a:	4a08      	ldr	r2, [pc, #32]	; (800197c <HAL_MspInit+0x44>)
 800195c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001960:	6593      	str	r3, [r2, #88]	; 0x58
 8001962:	4b06      	ldr	r3, [pc, #24]	; (800197c <HAL_MspInit+0x44>)
 8001964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800196a:	603b      	str	r3, [r7, #0]
 800196c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 800196e:	2005      	movs	r0, #5
 8001970:	f000 fcce 	bl	8002310 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001974:	bf00      	nop
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	40021000 	.word	0x40021000

08001980 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001984:	e7fe      	b.n	8001984 <NMI_Handler+0x4>

08001986 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001986:	b480      	push	{r7}
 8001988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800198a:	e7fe      	b.n	800198a <HardFault_Handler+0x4>

0800198c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001990:	e7fe      	b.n	8001990 <MemManage_Handler+0x4>

08001992 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001992:	b480      	push	{r7}
 8001994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001996:	e7fe      	b.n	8001996 <BusFault_Handler+0x4>

08001998 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800199c:	e7fe      	b.n	800199c <UsageFault_Handler+0x4>

0800199e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800199e:	b480      	push	{r7}
 80019a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019b0:	bf00      	nop
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr

080019ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019ba:	b480      	push	{r7}
 80019bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019be:	bf00      	nop
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019cc:	f000 fb8c 	bl	80020e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019d0:	bf00      	nop
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(W5500_INT_Pin);
 80019d8:	2040      	movs	r0, #64	; 0x40
 80019da:	f001 f907 	bl	8002bec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}
	...

080019e4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019e8:	4802      	ldr	r0, [pc, #8]	; (80019f4 <TIM2_IRQHandler+0x10>)
 80019ea:	f003 fbf8 	bl	80051de <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019ee:	bf00      	nop
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	2000111c 	.word	0x2000111c

080019f8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80019fe:	481d      	ldr	r0, [pc, #116]	; (8001a74 <UART4_IRQHandler+0x7c>)
 8001a00:	f004 f9ac 	bl	8005d5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */
  if(__HAL_UART_GET_FLAG(&huart4, UART_FLAG_IDLE) != RESET){
 8001a04:	4b1b      	ldr	r3, [pc, #108]	; (8001a74 <UART4_IRQHandler+0x7c>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	69db      	ldr	r3, [r3, #28]
 8001a0a:	f003 0310 	and.w	r3, r3, #16
 8001a0e:	2b10      	cmp	r3, #16
 8001a10:	d12d      	bne.n	8001a6e <UART4_IRQHandler+0x76>
	  __HAL_UART_CLEAR_IDLEFLAG(&huart4); //清楚空闲中断标志�?
 8001a12:	4b18      	ldr	r3, [pc, #96]	; (8001a74 <UART4_IRQHandler+0x7c>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2210      	movs	r2, #16
 8001a18:	621a      	str	r2, [r3, #32]
	  HAL_UART_DMAStop(&huart4);		//停止本次DMA传输
 8001a1a:	4816      	ldr	r0, [pc, #88]	; (8001a74 <UART4_IRQHandler+0x7c>)
 8001a1c:	f004 f90c 	bl	8005c38 <HAL_UART_DMAStop>
	  if (DMA_RECV_flag == 0){
 8001a20:	4b15      	ldr	r3, [pc, #84]	; (8001a78 <UART4_IRQHandler+0x80>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d109      	bne.n	8001a3c <UART4_IRQHandler+0x44>
	  		  DMA_RECV_flag = 1;
 8001a28:	4b13      	ldr	r3, [pc, #76]	; (8001a78 <UART4_IRQHandler+0x80>)
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	601a      	str	r2, [r3, #0]
	  		  HAL_UART_Receive_DMA(&huart4, DMA_Buffer, DMA_BUFFER_LENGTH);
 8001a2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a32:	4912      	ldr	r1, [pc, #72]	; (8001a7c <UART4_IRQHandler+0x84>)
 8001a34:	480f      	ldr	r0, [pc, #60]	; (8001a74 <UART4_IRQHandler+0x7c>)
 8001a36:	f004 f8a9 	bl	8005b8c <HAL_UART_Receive_DMA>
	  		  return;
 8001a3a:	e018      	b.n	8001a6e <UART4_IRQHandler+0x76>
	  	  }
	  unsigned int len = DMA_BUFFER_LENGTH  - __HAL_DMA_GET_COUNTER(&hdma_uart4_rx);
 8001a3c:	4b10      	ldr	r3, [pc, #64]	; (8001a80 <UART4_IRQHandler+0x88>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8001a46:	607b      	str	r3, [r7, #4]
	//  memcpy(Data_Buffer, DMA_Buffer, sizeof(DMA_Buffer));
	  Write_SOCK_Data_Buffer(0, DMA_Buffer, len);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	490b      	ldr	r1, [pc, #44]	; (8001a7c <UART4_IRQHandler+0x84>)
 8001a50:	2000      	movs	r0, #0
 8001a52:	f7ff f919 	bl	8000c88 <Write_SOCK_Data_Buffer>
//	  HAL_UART_Transmit(&huart4, DMA_Buffer, len, 200);
	  memset(DMA_Buffer, 0, DMA_BUFFER_LENGTH);
 8001a56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	4807      	ldr	r0, [pc, #28]	; (8001a7c <UART4_IRQHandler+0x84>)
 8001a5e:	f005 fb99 	bl	8007194 <memset>
	  HAL_UART_Receive_DMA(&huart4, DMA_Buffer, DMA_BUFFER_LENGTH);
 8001a62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a66:	4905      	ldr	r1, [pc, #20]	; (8001a7c <UART4_IRQHandler+0x84>)
 8001a68:	4802      	ldr	r0, [pc, #8]	; (8001a74 <UART4_IRQHandler+0x7c>)
 8001a6a:	f004 f88f 	bl	8005b8c <HAL_UART_Receive_DMA>
  }
  /* USER CODE END UART4_IRQn 1 */
}
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	2000126c 	.word	0x2000126c
 8001a78:	20001268 	.word	0x20001268
 8001a7c:	20001168 	.word	0x20001168
 8001a80:	20001374 	.word	0x20001374

08001a84 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8001a88:	4802      	ldr	r0, [pc, #8]	; (8001a94 <DMA2_Channel3_IRQHandler+0x10>)
 8001a8a:	f000 fe1a 	bl	80026c2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	200013bc 	.word	0x200013bc

08001a98 <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001a9c:	4802      	ldr	r0, [pc, #8]	; (8001aa8 <DMA2_Channel5_IRQHandler+0x10>)
 8001a9e:	f000 fe10 	bl	80026c2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20001374 	.word	0x20001374

08001aac <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b086      	sub	sp, #24
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	60b9      	str	r1, [r7, #8]
 8001ab6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ab8:	2300      	movs	r3, #0
 8001aba:	617b      	str	r3, [r7, #20]
 8001abc:	e00a      	b.n	8001ad4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001abe:	f3af 8000 	nop.w
 8001ac2:	4601      	mov	r1, r0
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	1c5a      	adds	r2, r3, #1
 8001ac8:	60ba      	str	r2, [r7, #8]
 8001aca:	b2ca      	uxtb	r2, r1
 8001acc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	617b      	str	r3, [r7, #20]
 8001ad4:	697a      	ldr	r2, [r7, #20]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	dbf0      	blt.n	8001abe <_read+0x12>
	}

return len;
 8001adc:	687b      	ldr	r3, [r7, #4]
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3718      	adds	r7, #24
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b086      	sub	sp, #24
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	60f8      	str	r0, [r7, #12]
 8001aee:	60b9      	str	r1, [r7, #8]
 8001af0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001af2:	2300      	movs	r3, #0
 8001af4:	617b      	str	r3, [r7, #20]
 8001af6:	e009      	b.n	8001b0c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	1c5a      	adds	r2, r3, #1
 8001afc:	60ba      	str	r2, [r7, #8]
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f000 fa61 	bl	8001fc8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	617b      	str	r3, [r7, #20]
 8001b0c:	697a      	ldr	r2, [r7, #20]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	dbf1      	blt.n	8001af8 <_write+0x12>
	}
	return len;
 8001b14:	687b      	ldr	r3, [r7, #4]
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3718      	adds	r7, #24
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <_close>:

int _close(int file)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	b083      	sub	sp, #12
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
	return -1;
 8001b26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr

08001b36 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b36:	b480      	push	{r7}
 8001b38:	b083      	sub	sp, #12
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
 8001b3e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b46:	605a      	str	r2, [r3, #4]
	return 0;
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr

08001b56 <_isatty>:

int _isatty(int file)
{
 8001b56:	b480      	push	{r7}
 8001b58:	b083      	sub	sp, #12
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
	return 1;
 8001b5e:	2301      	movs	r3, #1
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	607a      	str	r2, [r7, #4]
	return 0;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3714      	adds	r7, #20
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
	...

08001b88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b086      	sub	sp, #24
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b90:	4a14      	ldr	r2, [pc, #80]	; (8001be4 <_sbrk+0x5c>)
 8001b92:	4b15      	ldr	r3, [pc, #84]	; (8001be8 <_sbrk+0x60>)
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b9c:	4b13      	ldr	r3, [pc, #76]	; (8001bec <_sbrk+0x64>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d102      	bne.n	8001baa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ba4:	4b11      	ldr	r3, [pc, #68]	; (8001bec <_sbrk+0x64>)
 8001ba6:	4a12      	ldr	r2, [pc, #72]	; (8001bf0 <_sbrk+0x68>)
 8001ba8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001baa:	4b10      	ldr	r3, [pc, #64]	; (8001bec <_sbrk+0x64>)
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d207      	bcs.n	8001bc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bb8:	f005 fab4 	bl	8007124 <__errno>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	220c      	movs	r2, #12
 8001bc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8001bc6:	e009      	b.n	8001bdc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bc8:	4b08      	ldr	r3, [pc, #32]	; (8001bec <_sbrk+0x64>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bce:	4b07      	ldr	r3, [pc, #28]	; (8001bec <_sbrk+0x64>)
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	4a05      	ldr	r2, [pc, #20]	; (8001bec <_sbrk+0x64>)
 8001bd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bda:	68fb      	ldr	r3, [r7, #12]
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3718      	adds	r7, #24
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	20050000 	.word	0x20050000
 8001be8:	00000400 	.word	0x00000400
 8001bec:	20001118 	.word	0x20001118
 8001bf0:	20001418 	.word	0x20001418

08001bf4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001bf8:	4b06      	ldr	r3, [pc, #24]	; (8001c14 <SystemInit+0x20>)
 8001bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bfe:	4a05      	ldr	r2, [pc, #20]	; (8001c14 <SystemInit+0x20>)
 8001c00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001c08:	bf00      	nop
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	e000ed00 	.word	0xe000ed00

08001c18 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b088      	sub	sp, #32
 8001c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c1e:	f107 0310 	add.w	r3, r7, #16
 8001c22:	2200      	movs	r2, #0
 8001c24:	601a      	str	r2, [r3, #0]
 8001c26:	605a      	str	r2, [r3, #4]
 8001c28:	609a      	str	r2, [r3, #8]
 8001c2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c2c:	1d3b      	adds	r3, r7, #4
 8001c2e:	2200      	movs	r2, #0
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	605a      	str	r2, [r3, #4]
 8001c34:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c36:	4b1e      	ldr	r3, [pc, #120]	; (8001cb0 <MX_TIM2_Init+0x98>)
 8001c38:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c3c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001c3e:	4b1c      	ldr	r3, [pc, #112]	; (8001cb0 <MX_TIM2_Init+0x98>)
 8001c40:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001c44:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c46:	4b1a      	ldr	r3, [pc, #104]	; (8001cb0 <MX_TIM2_Init+0x98>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8001c4c:	4b18      	ldr	r3, [pc, #96]	; (8001cb0 <MX_TIM2_Init+0x98>)
 8001c4e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001c52:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c54:	4b16      	ldr	r3, [pc, #88]	; (8001cb0 <MX_TIM2_Init+0x98>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c5a:	4b15      	ldr	r3, [pc, #84]	; (8001cb0 <MX_TIM2_Init+0x98>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c60:	4813      	ldr	r0, [pc, #76]	; (8001cb0 <MX_TIM2_Init+0x98>)
 8001c62:	f003 fa65 	bl	8005130 <HAL_TIM_Base_Init>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001c6c:	f7ff fddd 	bl	800182a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c74:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c76:	f107 0310 	add.w	r3, r7, #16
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	480c      	ldr	r0, [pc, #48]	; (8001cb0 <MX_TIM2_Init+0x98>)
 8001c7e:	f003 fbcd 	bl	800541c <HAL_TIM_ConfigClockSource>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001c88:	f7ff fdcf 	bl	800182a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c90:	2300      	movs	r3, #0
 8001c92:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c94:	1d3b      	adds	r3, r7, #4
 8001c96:	4619      	mov	r1, r3
 8001c98:	4805      	ldr	r0, [pc, #20]	; (8001cb0 <MX_TIM2_Init+0x98>)
 8001c9a:	f003 fdef 	bl	800587c <HAL_TIMEx_MasterConfigSynchronization>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001ca4:	f7ff fdc1 	bl	800182a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ca8:	bf00      	nop
 8001caa:	3720      	adds	r7, #32
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	2000111c 	.word	0x2000111c

08001cb4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cc4:	d113      	bne.n	8001cee <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cc6:	4b0c      	ldr	r3, [pc, #48]	; (8001cf8 <HAL_TIM_Base_MspInit+0x44>)
 8001cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cca:	4a0b      	ldr	r2, [pc, #44]	; (8001cf8 <HAL_TIM_Base_MspInit+0x44>)
 8001ccc:	f043 0301 	orr.w	r3, r3, #1
 8001cd0:	6593      	str	r3, [r2, #88]	; 0x58
 8001cd2:	4b09      	ldr	r3, [pc, #36]	; (8001cf8 <HAL_TIM_Base_MspInit+0x44>)
 8001cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8001cde:	2200      	movs	r2, #0
 8001ce0:	2101      	movs	r1, #1
 8001ce2:	201c      	movs	r0, #28
 8001ce4:	f000 fb1f 	bl	8002326 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ce8:	201c      	movs	r0, #28
 8001cea:	f000 fb38 	bl	800235e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001cee:	bf00      	nop
 8001cf0:	3710      	adds	r7, #16
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	40021000 	.word	0x40021000

08001cfc <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart4_rx;
DMA_HandleTypeDef hdma_uart4_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001d00:	4b14      	ldr	r3, [pc, #80]	; (8001d54 <MX_UART4_Init+0x58>)
 8001d02:	4a15      	ldr	r2, [pc, #84]	; (8001d58 <MX_UART4_Init+0x5c>)
 8001d04:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001d06:	4b13      	ldr	r3, [pc, #76]	; (8001d54 <MX_UART4_Init+0x58>)
 8001d08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d0c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001d0e:	4b11      	ldr	r3, [pc, #68]	; (8001d54 <MX_UART4_Init+0x58>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001d14:	4b0f      	ldr	r3, [pc, #60]	; (8001d54 <MX_UART4_Init+0x58>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001d1a:	4b0e      	ldr	r3, [pc, #56]	; (8001d54 <MX_UART4_Init+0x58>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001d20:	4b0c      	ldr	r3, [pc, #48]	; (8001d54 <MX_UART4_Init+0x58>)
 8001d22:	220c      	movs	r2, #12
 8001d24:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d26:	4b0b      	ldr	r3, [pc, #44]	; (8001d54 <MX_UART4_Init+0x58>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d2c:	4b09      	ldr	r3, [pc, #36]	; (8001d54 <MX_UART4_Init+0x58>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d32:	4b08      	ldr	r3, [pc, #32]	; (8001d54 <MX_UART4_Init+0x58>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d38:	4b06      	ldr	r3, [pc, #24]	; (8001d54 <MX_UART4_Init+0x58>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001d3e:	4805      	ldr	r0, [pc, #20]	; (8001d54 <MX_UART4_Init+0x58>)
 8001d40:	f003 fe42 	bl	80059c8 <HAL_UART_Init>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001d4a:	f7ff fd6e 	bl	800182a <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001d4e:	bf00      	nop
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	2000126c 	.word	0x2000126c
 8001d58:	40004c00 	.word	0x40004c00

08001d5c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d60:	4b14      	ldr	r3, [pc, #80]	; (8001db4 <MX_USART2_UART_Init+0x58>)
 8001d62:	4a15      	ldr	r2, [pc, #84]	; (8001db8 <MX_USART2_UART_Init+0x5c>)
 8001d64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d66:	4b13      	ldr	r3, [pc, #76]	; (8001db4 <MX_USART2_UART_Init+0x58>)
 8001d68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d6e:	4b11      	ldr	r3, [pc, #68]	; (8001db4 <MX_USART2_UART_Init+0x58>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d74:	4b0f      	ldr	r3, [pc, #60]	; (8001db4 <MX_USART2_UART_Init+0x58>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d7a:	4b0e      	ldr	r3, [pc, #56]	; (8001db4 <MX_USART2_UART_Init+0x58>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d80:	4b0c      	ldr	r3, [pc, #48]	; (8001db4 <MX_USART2_UART_Init+0x58>)
 8001d82:	220c      	movs	r2, #12
 8001d84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d86:	4b0b      	ldr	r3, [pc, #44]	; (8001db4 <MX_USART2_UART_Init+0x58>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d8c:	4b09      	ldr	r3, [pc, #36]	; (8001db4 <MX_USART2_UART_Init+0x58>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d92:	4b08      	ldr	r3, [pc, #32]	; (8001db4 <MX_USART2_UART_Init+0x58>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d98:	4b06      	ldr	r3, [pc, #24]	; (8001db4 <MX_USART2_UART_Init+0x58>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d9e:	4805      	ldr	r0, [pc, #20]	; (8001db4 <MX_USART2_UART_Init+0x58>)
 8001da0:	f003 fe12 	bl	80059c8 <HAL_UART_Init>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001daa:	f7ff fd3e 	bl	800182a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001dae:	bf00      	nop
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	200012f0 	.word	0x200012f0
 8001db8:	40004400 	.word	0x40004400

08001dbc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b0ae      	sub	sp, #184	; 0xb8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	605a      	str	r2, [r3, #4]
 8001dce:	609a      	str	r2, [r3, #8]
 8001dd0:	60da      	str	r2, [r3, #12]
 8001dd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001dd4:	f107 0318 	add.w	r3, r7, #24
 8001dd8:	228c      	movs	r2, #140	; 0x8c
 8001dda:	2100      	movs	r1, #0
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f005 f9d9 	bl	8007194 <memset>
  if(uartHandle->Instance==UART4)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a71      	ldr	r2, [pc, #452]	; (8001fac <HAL_UART_MspInit+0x1f0>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	f040 8099 	bne.w	8001f20 <HAL_UART_MspInit+0x164>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001dee:	2308      	movs	r3, #8
 8001df0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001df2:	2300      	movs	r3, #0
 8001df4:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001df6:	f107 0318 	add.w	r3, r7, #24
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f001 fdb0 	bl	8003960 <HAL_RCCEx_PeriphCLKConfig>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001e06:	f7ff fd10 	bl	800182a <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001e0a:	4b69      	ldr	r3, [pc, #420]	; (8001fb0 <HAL_UART_MspInit+0x1f4>)
 8001e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e0e:	4a68      	ldr	r2, [pc, #416]	; (8001fb0 <HAL_UART_MspInit+0x1f4>)
 8001e10:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001e14:	6593      	str	r3, [r2, #88]	; 0x58
 8001e16:	4b66      	ldr	r3, [pc, #408]	; (8001fb0 <HAL_UART_MspInit+0x1f4>)
 8001e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e1e:	617b      	str	r3, [r7, #20]
 8001e20:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e22:	4b63      	ldr	r3, [pc, #396]	; (8001fb0 <HAL_UART_MspInit+0x1f4>)
 8001e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e26:	4a62      	ldr	r2, [pc, #392]	; (8001fb0 <HAL_UART_MspInit+0x1f4>)
 8001e28:	f043 0301 	orr.w	r3, r3, #1
 8001e2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e2e:	4b60      	ldr	r3, [pc, #384]	; (8001fb0 <HAL_UART_MspInit+0x1f4>)
 8001e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	613b      	str	r3, [r7, #16]
 8001e38:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e40:	2302      	movs	r3, #2
 8001e42:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e46:	2300      	movs	r3, #0
 8001e48:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001e52:	2308      	movs	r3, #8
 8001e54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e58:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e62:	f000 fd19 	bl	8002898 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA2_Channel5;
 8001e66:	4b53      	ldr	r3, [pc, #332]	; (8001fb4 <HAL_UART_MspInit+0x1f8>)
 8001e68:	4a53      	ldr	r2, [pc, #332]	; (8001fb8 <HAL_UART_MspInit+0x1fc>)
 8001e6a:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_2;
 8001e6c:	4b51      	ldr	r3, [pc, #324]	; (8001fb4 <HAL_UART_MspInit+0x1f8>)
 8001e6e:	2202      	movs	r2, #2
 8001e70:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e72:	4b50      	ldr	r3, [pc, #320]	; (8001fb4 <HAL_UART_MspInit+0x1f8>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e78:	4b4e      	ldr	r3, [pc, #312]	; (8001fb4 <HAL_UART_MspInit+0x1f8>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e7e:	4b4d      	ldr	r3, [pc, #308]	; (8001fb4 <HAL_UART_MspInit+0x1f8>)
 8001e80:	2280      	movs	r2, #128	; 0x80
 8001e82:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e84:	4b4b      	ldr	r3, [pc, #300]	; (8001fb4 <HAL_UART_MspInit+0x1f8>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e8a:	4b4a      	ldr	r3, [pc, #296]	; (8001fb4 <HAL_UART_MspInit+0x1f8>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8001e90:	4b48      	ldr	r3, [pc, #288]	; (8001fb4 <HAL_UART_MspInit+0x1f8>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001e96:	4b47      	ldr	r3, [pc, #284]	; (8001fb4 <HAL_UART_MspInit+0x1f8>)
 8001e98:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e9c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001e9e:	4845      	ldr	r0, [pc, #276]	; (8001fb4 <HAL_UART_MspInit+0x1f8>)
 8001ea0:	f000 fa78 	bl	8002394 <HAL_DMA_Init>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <HAL_UART_MspInit+0xf2>
    {
      Error_Handler();
 8001eaa:	f7ff fcbe 	bl	800182a <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a40      	ldr	r2, [pc, #256]	; (8001fb4 <HAL_UART_MspInit+0x1f8>)
 8001eb2:	671a      	str	r2, [r3, #112]	; 0x70
 8001eb4:	4a3f      	ldr	r2, [pc, #252]	; (8001fb4 <HAL_UART_MspInit+0x1f8>)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6293      	str	r3, [r2, #40]	; 0x28

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA2_Channel3;
 8001eba:	4b40      	ldr	r3, [pc, #256]	; (8001fbc <HAL_UART_MspInit+0x200>)
 8001ebc:	4a40      	ldr	r2, [pc, #256]	; (8001fc0 <HAL_UART_MspInit+0x204>)
 8001ebe:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_2;
 8001ec0:	4b3e      	ldr	r3, [pc, #248]	; (8001fbc <HAL_UART_MspInit+0x200>)
 8001ec2:	2202      	movs	r2, #2
 8001ec4:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ec6:	4b3d      	ldr	r3, [pc, #244]	; (8001fbc <HAL_UART_MspInit+0x200>)
 8001ec8:	2210      	movs	r2, #16
 8001eca:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ecc:	4b3b      	ldr	r3, [pc, #236]	; (8001fbc <HAL_UART_MspInit+0x200>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ed2:	4b3a      	ldr	r3, [pc, #232]	; (8001fbc <HAL_UART_MspInit+0x200>)
 8001ed4:	2280      	movs	r2, #128	; 0x80
 8001ed6:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ed8:	4b38      	ldr	r3, [pc, #224]	; (8001fbc <HAL_UART_MspInit+0x200>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ede:	4b37      	ldr	r3, [pc, #220]	; (8001fbc <HAL_UART_MspInit+0x200>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8001ee4:	4b35      	ldr	r3, [pc, #212]	; (8001fbc <HAL_UART_MspInit+0x200>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001eea:	4b34      	ldr	r3, [pc, #208]	; (8001fbc <HAL_UART_MspInit+0x200>)
 8001eec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ef0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8001ef2:	4832      	ldr	r0, [pc, #200]	; (8001fbc <HAL_UART_MspInit+0x200>)
 8001ef4:	f000 fa4e 	bl	8002394 <HAL_DMA_Init>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <HAL_UART_MspInit+0x146>
    {
      Error_Handler();
 8001efe:	f7ff fc94 	bl	800182a <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a2d      	ldr	r2, [pc, #180]	; (8001fbc <HAL_UART_MspInit+0x200>)
 8001f06:	66da      	str	r2, [r3, #108]	; 0x6c
 8001f08:	4a2c      	ldr	r2, [pc, #176]	; (8001fbc <HAL_UART_MspInit+0x200>)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6293      	str	r3, [r2, #40]	; 0x28

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 1, 0);
 8001f0e:	2200      	movs	r2, #0
 8001f10:	2101      	movs	r1, #1
 8001f12:	2034      	movs	r0, #52	; 0x34
 8001f14:	f000 fa07 	bl	8002326 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001f18:	2034      	movs	r0, #52	; 0x34
 8001f1a:	f000 fa20 	bl	800235e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001f1e:	e040      	b.n	8001fa2 <HAL_UART_MspInit+0x1e6>
  else if(uartHandle->Instance==USART2)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a27      	ldr	r2, [pc, #156]	; (8001fc4 <HAL_UART_MspInit+0x208>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d13b      	bne.n	8001fa2 <HAL_UART_MspInit+0x1e6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f32:	f107 0318 	add.w	r3, r7, #24
 8001f36:	4618      	mov	r0, r3
 8001f38:	f001 fd12 	bl	8003960 <HAL_RCCEx_PeriphCLKConfig>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <HAL_UART_MspInit+0x18a>
      Error_Handler();
 8001f42:	f7ff fc72 	bl	800182a <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f46:	4b1a      	ldr	r3, [pc, #104]	; (8001fb0 <HAL_UART_MspInit+0x1f4>)
 8001f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f4a:	4a19      	ldr	r2, [pc, #100]	; (8001fb0 <HAL_UART_MspInit+0x1f4>)
 8001f4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f50:	6593      	str	r3, [r2, #88]	; 0x58
 8001f52:	4b17      	ldr	r3, [pc, #92]	; (8001fb0 <HAL_UART_MspInit+0x1f4>)
 8001f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f5a:	60fb      	str	r3, [r7, #12]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f5e:	4b14      	ldr	r3, [pc, #80]	; (8001fb0 <HAL_UART_MspInit+0x1f4>)
 8001f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f62:	4a13      	ldr	r2, [pc, #76]	; (8001fb0 <HAL_UART_MspInit+0x1f4>)
 8001f64:	f043 0301 	orr.w	r3, r3, #1
 8001f68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f6a:	4b11      	ldr	r3, [pc, #68]	; (8001fb0 <HAL_UART_MspInit+0x1f4>)
 8001f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	60bb      	str	r3, [r7, #8]
 8001f74:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f76:	230c      	movs	r3, #12
 8001f78:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f82:	2300      	movs	r3, #0
 8001f84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f8e:	2307      	movs	r3, #7
 8001f90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f94:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001f98:	4619      	mov	r1, r3
 8001f9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f9e:	f000 fc7b 	bl	8002898 <HAL_GPIO_Init>
}
 8001fa2:	bf00      	nop
 8001fa4:	37b8      	adds	r7, #184	; 0xb8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	40004c00 	.word	0x40004c00
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	20001374 	.word	0x20001374
 8001fb8:	40020458 	.word	0x40020458
 8001fbc:	200013bc 	.word	0x200013bc
 8001fc0:	40020430 	.word	0x40020430
 8001fc4:	40004400 	.word	0x40004400

08001fc8 <__io_putchar>:
  * @brief Retargets the C library printf function to the USART.
  * @param None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
//  HAL_UART_Transmit_DMA(&huart2, (uint8_t *)&ch, 1);
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xffff);
 8001fd0:	1d39      	adds	r1, r7, #4
 8001fd2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	4803      	ldr	r0, [pc, #12]	; (8001fe8 <__io_putchar+0x20>)
 8001fda:	f003 fd43 	bl	8005a64 <HAL_UART_Transmit>
  return ch;
 8001fde:	687b      	ldr	r3, [r7, #4]
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3708      	adds	r7, #8
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	200012f0 	.word	0x200012f0

08001fec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001fec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002024 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ff0:	f7ff fe00 	bl	8001bf4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ff4:	480c      	ldr	r0, [pc, #48]	; (8002028 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ff6:	490d      	ldr	r1, [pc, #52]	; (800202c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ff8:	4a0d      	ldr	r2, [pc, #52]	; (8002030 <LoopForever+0xe>)
  movs r3, #0
 8001ffa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ffc:	e002      	b.n	8002004 <LoopCopyDataInit>

08001ffe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ffe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002000:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002002:	3304      	adds	r3, #4

08002004 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002004:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002006:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002008:	d3f9      	bcc.n	8001ffe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800200a:	4a0a      	ldr	r2, [pc, #40]	; (8002034 <LoopForever+0x12>)
  ldr r4, =_ebss
 800200c:	4c0a      	ldr	r4, [pc, #40]	; (8002038 <LoopForever+0x16>)
  movs r3, #0
 800200e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002010:	e001      	b.n	8002016 <LoopFillZerobss>

08002012 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002012:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002014:	3204      	adds	r2, #4

08002016 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002016:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002018:	d3fb      	bcc.n	8002012 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800201a:	f005 f889 	bl	8007130 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800201e:	f7ff fb57 	bl	80016d0 <main>

08002022 <LoopForever>:

LoopForever:
    b LoopForever
 8002022:	e7fe      	b.n	8002022 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002024:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002028:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800202c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002030:	08008394 	.word	0x08008394
  ldr r2, =_sbss
 8002034:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002038:	20001418 	.word	0x20001418

0800203c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800203c:	e7fe      	b.n	800203c <ADC1_2_IRQHandler>

0800203e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800203e:	b580      	push	{r7, lr}
 8002040:	b082      	sub	sp, #8
 8002042:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002044:	2300      	movs	r3, #0
 8002046:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002048:	2003      	movs	r0, #3
 800204a:	f000 f961 	bl	8002310 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800204e:	2000      	movs	r0, #0
 8002050:	f000 f80e 	bl	8002070 <HAL_InitTick>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d002      	beq.n	8002060 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	71fb      	strb	r3, [r7, #7]
 800205e:	e001      	b.n	8002064 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002060:	f7ff fc6a 	bl	8001938 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002064:	79fb      	ldrb	r3, [r7, #7]
}
 8002066:	4618      	mov	r0, r3
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
	...

08002070 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002078:	2300      	movs	r3, #0
 800207a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800207c:	4b17      	ldr	r3, [pc, #92]	; (80020dc <HAL_InitTick+0x6c>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d023      	beq.n	80020cc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002084:	4b16      	ldr	r3, [pc, #88]	; (80020e0 <HAL_InitTick+0x70>)
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	4b14      	ldr	r3, [pc, #80]	; (80020dc <HAL_InitTick+0x6c>)
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	4619      	mov	r1, r3
 800208e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002092:	fbb3 f3f1 	udiv	r3, r3, r1
 8002096:	fbb2 f3f3 	udiv	r3, r2, r3
 800209a:	4618      	mov	r0, r3
 800209c:	f000 f96d 	bl	800237a <HAL_SYSTICK_Config>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d10f      	bne.n	80020c6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2b0f      	cmp	r3, #15
 80020aa:	d809      	bhi.n	80020c0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020ac:	2200      	movs	r2, #0
 80020ae:	6879      	ldr	r1, [r7, #4]
 80020b0:	f04f 30ff 	mov.w	r0, #4294967295
 80020b4:	f000 f937 	bl	8002326 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020b8:	4a0a      	ldr	r2, [pc, #40]	; (80020e4 <HAL_InitTick+0x74>)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6013      	str	r3, [r2, #0]
 80020be:	e007      	b.n	80020d0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	73fb      	strb	r3, [r7, #15]
 80020c4:	e004      	b.n	80020d0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	73fb      	strb	r3, [r7, #15]
 80020ca:	e001      	b.n	80020d0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80020d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3710      	adds	r7, #16
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	2000000c 	.word	0x2000000c
 80020e0:	20000004 	.word	0x20000004
 80020e4:	20000008 	.word	0x20000008

080020e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020ec:	4b06      	ldr	r3, [pc, #24]	; (8002108 <HAL_IncTick+0x20>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	461a      	mov	r2, r3
 80020f2:	4b06      	ldr	r3, [pc, #24]	; (800210c <HAL_IncTick+0x24>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4413      	add	r3, r2
 80020f8:	4a04      	ldr	r2, [pc, #16]	; (800210c <HAL_IncTick+0x24>)
 80020fa:	6013      	str	r3, [r2, #0]
}
 80020fc:	bf00      	nop
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	2000000c 	.word	0x2000000c
 800210c:	20001404 	.word	0x20001404

08002110 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  return uwTick;
 8002114:	4b03      	ldr	r3, [pc, #12]	; (8002124 <HAL_GetTick+0x14>)
 8002116:	681b      	ldr	r3, [r3, #0]
}
 8002118:	4618      	mov	r0, r3
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	20001404 	.word	0x20001404

08002128 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002130:	f7ff ffee 	bl	8002110 <HAL_GetTick>
 8002134:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002140:	d005      	beq.n	800214e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002142:	4b0a      	ldr	r3, [pc, #40]	; (800216c <HAL_Delay+0x44>)
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	461a      	mov	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	4413      	add	r3, r2
 800214c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800214e:	bf00      	nop
 8002150:	f7ff ffde 	bl	8002110 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	68fa      	ldr	r2, [r7, #12]
 800215c:	429a      	cmp	r2, r3
 800215e:	d8f7      	bhi.n	8002150 <HAL_Delay+0x28>
  {
  }
}
 8002160:	bf00      	nop
 8002162:	bf00      	nop
 8002164:	3710      	adds	r7, #16
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	2000000c 	.word	0x2000000c

08002170 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f003 0307 	and.w	r3, r3, #7
 800217e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002180:	4b0c      	ldr	r3, [pc, #48]	; (80021b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002186:	68ba      	ldr	r2, [r7, #8]
 8002188:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800218c:	4013      	ands	r3, r2
 800218e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002198:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800219c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021a2:	4a04      	ldr	r2, [pc, #16]	; (80021b4 <__NVIC_SetPriorityGrouping+0x44>)
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	60d3      	str	r3, [r2, #12]
}
 80021a8:	bf00      	nop
 80021aa:	3714      	adds	r7, #20
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr
 80021b4:	e000ed00 	.word	0xe000ed00

080021b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021bc:	4b04      	ldr	r3, [pc, #16]	; (80021d0 <__NVIC_GetPriorityGrouping+0x18>)
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	0a1b      	lsrs	r3, r3, #8
 80021c2:	f003 0307 	and.w	r3, r3, #7
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr
 80021d0:	e000ed00 	.word	0xe000ed00

080021d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	4603      	mov	r3, r0
 80021dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	db0b      	blt.n	80021fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021e6:	79fb      	ldrb	r3, [r7, #7]
 80021e8:	f003 021f 	and.w	r2, r3, #31
 80021ec:	4907      	ldr	r1, [pc, #28]	; (800220c <__NVIC_EnableIRQ+0x38>)
 80021ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f2:	095b      	lsrs	r3, r3, #5
 80021f4:	2001      	movs	r0, #1
 80021f6:	fa00 f202 	lsl.w	r2, r0, r2
 80021fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021fe:	bf00      	nop
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	e000e100 	.word	0xe000e100

08002210 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	4603      	mov	r3, r0
 8002218:	6039      	str	r1, [r7, #0]
 800221a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800221c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002220:	2b00      	cmp	r3, #0
 8002222:	db0a      	blt.n	800223a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	b2da      	uxtb	r2, r3
 8002228:	490c      	ldr	r1, [pc, #48]	; (800225c <__NVIC_SetPriority+0x4c>)
 800222a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222e:	0112      	lsls	r2, r2, #4
 8002230:	b2d2      	uxtb	r2, r2
 8002232:	440b      	add	r3, r1
 8002234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002238:	e00a      	b.n	8002250 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	b2da      	uxtb	r2, r3
 800223e:	4908      	ldr	r1, [pc, #32]	; (8002260 <__NVIC_SetPriority+0x50>)
 8002240:	79fb      	ldrb	r3, [r7, #7]
 8002242:	f003 030f 	and.w	r3, r3, #15
 8002246:	3b04      	subs	r3, #4
 8002248:	0112      	lsls	r2, r2, #4
 800224a:	b2d2      	uxtb	r2, r2
 800224c:	440b      	add	r3, r1
 800224e:	761a      	strb	r2, [r3, #24]
}
 8002250:	bf00      	nop
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr
 800225c:	e000e100 	.word	0xe000e100
 8002260:	e000ed00 	.word	0xe000ed00

08002264 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002264:	b480      	push	{r7}
 8002266:	b089      	sub	sp, #36	; 0x24
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f003 0307 	and.w	r3, r3, #7
 8002276:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	f1c3 0307 	rsb	r3, r3, #7
 800227e:	2b04      	cmp	r3, #4
 8002280:	bf28      	it	cs
 8002282:	2304      	movcs	r3, #4
 8002284:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	3304      	adds	r3, #4
 800228a:	2b06      	cmp	r3, #6
 800228c:	d902      	bls.n	8002294 <NVIC_EncodePriority+0x30>
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	3b03      	subs	r3, #3
 8002292:	e000      	b.n	8002296 <NVIC_EncodePriority+0x32>
 8002294:	2300      	movs	r3, #0
 8002296:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002298:	f04f 32ff 	mov.w	r2, #4294967295
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	fa02 f303 	lsl.w	r3, r2, r3
 80022a2:	43da      	mvns	r2, r3
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	401a      	ands	r2, r3
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022ac:	f04f 31ff 	mov.w	r1, #4294967295
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	fa01 f303 	lsl.w	r3, r1, r3
 80022b6:	43d9      	mvns	r1, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022bc:	4313      	orrs	r3, r2
         );
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3724      	adds	r7, #36	; 0x24
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
	...

080022cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	3b01      	subs	r3, #1
 80022d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022dc:	d301      	bcc.n	80022e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022de:	2301      	movs	r3, #1
 80022e0:	e00f      	b.n	8002302 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022e2:	4a0a      	ldr	r2, [pc, #40]	; (800230c <SysTick_Config+0x40>)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	3b01      	subs	r3, #1
 80022e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022ea:	210f      	movs	r1, #15
 80022ec:	f04f 30ff 	mov.w	r0, #4294967295
 80022f0:	f7ff ff8e 	bl	8002210 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022f4:	4b05      	ldr	r3, [pc, #20]	; (800230c <SysTick_Config+0x40>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022fa:	4b04      	ldr	r3, [pc, #16]	; (800230c <SysTick_Config+0x40>)
 80022fc:	2207      	movs	r2, #7
 80022fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	3708      	adds	r7, #8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	e000e010 	.word	0xe000e010

08002310 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f7ff ff29 	bl	8002170 <__NVIC_SetPriorityGrouping>
}
 800231e:	bf00      	nop
 8002320:	3708      	adds	r7, #8
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002326:	b580      	push	{r7, lr}
 8002328:	b086      	sub	sp, #24
 800232a:	af00      	add	r7, sp, #0
 800232c:	4603      	mov	r3, r0
 800232e:	60b9      	str	r1, [r7, #8]
 8002330:	607a      	str	r2, [r7, #4]
 8002332:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002334:	2300      	movs	r3, #0
 8002336:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002338:	f7ff ff3e 	bl	80021b8 <__NVIC_GetPriorityGrouping>
 800233c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	68b9      	ldr	r1, [r7, #8]
 8002342:	6978      	ldr	r0, [r7, #20]
 8002344:	f7ff ff8e 	bl	8002264 <NVIC_EncodePriority>
 8002348:	4602      	mov	r2, r0
 800234a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800234e:	4611      	mov	r1, r2
 8002350:	4618      	mov	r0, r3
 8002352:	f7ff ff5d 	bl	8002210 <__NVIC_SetPriority>
}
 8002356:	bf00      	nop
 8002358:	3718      	adds	r7, #24
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800235e:	b580      	push	{r7, lr}
 8002360:	b082      	sub	sp, #8
 8002362:	af00      	add	r7, sp, #0
 8002364:	4603      	mov	r3, r0
 8002366:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236c:	4618      	mov	r0, r3
 800236e:	f7ff ff31 	bl	80021d4 <__NVIC_EnableIRQ>
}
 8002372:	bf00      	nop
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}

0800237a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800237a:	b580      	push	{r7, lr}
 800237c:	b082      	sub	sp, #8
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f7ff ffa2 	bl	80022cc <SysTick_Config>
 8002388:	4603      	mov	r3, r0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
	...

08002394 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002394:	b480      	push	{r7}
 8002396:	b085      	sub	sp, #20
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d101      	bne.n	80023a6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e098      	b.n	80024d8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	461a      	mov	r2, r3
 80023ac:	4b4d      	ldr	r3, [pc, #308]	; (80024e4 <HAL_DMA_Init+0x150>)
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d80f      	bhi.n	80023d2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	461a      	mov	r2, r3
 80023b8:	4b4b      	ldr	r3, [pc, #300]	; (80024e8 <HAL_DMA_Init+0x154>)
 80023ba:	4413      	add	r3, r2
 80023bc:	4a4b      	ldr	r2, [pc, #300]	; (80024ec <HAL_DMA_Init+0x158>)
 80023be:	fba2 2303 	umull	r2, r3, r2, r3
 80023c2:	091b      	lsrs	r3, r3, #4
 80023c4:	009a      	lsls	r2, r3, #2
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a48      	ldr	r2, [pc, #288]	; (80024f0 <HAL_DMA_Init+0x15c>)
 80023ce:	641a      	str	r2, [r3, #64]	; 0x40
 80023d0:	e00e      	b.n	80023f0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	461a      	mov	r2, r3
 80023d8:	4b46      	ldr	r3, [pc, #280]	; (80024f4 <HAL_DMA_Init+0x160>)
 80023da:	4413      	add	r3, r2
 80023dc:	4a43      	ldr	r2, [pc, #268]	; (80024ec <HAL_DMA_Init+0x158>)
 80023de:	fba2 2303 	umull	r2, r3, r2, r3
 80023e2:	091b      	lsrs	r3, r3, #4
 80023e4:	009a      	lsls	r2, r3, #2
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a42      	ldr	r2, [pc, #264]	; (80024f8 <HAL_DMA_Init+0x164>)
 80023ee:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2202      	movs	r2, #2
 80023f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002406:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800240a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002414:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002420:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	699b      	ldr	r3, [r3, #24]
 8002426:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800242c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a1b      	ldr	r3, [r3, #32]
 8002432:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002434:	68fa      	ldr	r2, [r7, #12]
 8002436:	4313      	orrs	r3, r2
 8002438:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	68fa      	ldr	r2, [r7, #12]
 8002440:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800244a:	d039      	beq.n	80024c0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002450:	4a27      	ldr	r2, [pc, #156]	; (80024f0 <HAL_DMA_Init+0x15c>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d11a      	bne.n	800248c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002456:	4b29      	ldr	r3, [pc, #164]	; (80024fc <HAL_DMA_Init+0x168>)
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800245e:	f003 031c 	and.w	r3, r3, #28
 8002462:	210f      	movs	r1, #15
 8002464:	fa01 f303 	lsl.w	r3, r1, r3
 8002468:	43db      	mvns	r3, r3
 800246a:	4924      	ldr	r1, [pc, #144]	; (80024fc <HAL_DMA_Init+0x168>)
 800246c:	4013      	ands	r3, r2
 800246e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002470:	4b22      	ldr	r3, [pc, #136]	; (80024fc <HAL_DMA_Init+0x168>)
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6859      	ldr	r1, [r3, #4]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800247c:	f003 031c 	and.w	r3, r3, #28
 8002480:	fa01 f303 	lsl.w	r3, r1, r3
 8002484:	491d      	ldr	r1, [pc, #116]	; (80024fc <HAL_DMA_Init+0x168>)
 8002486:	4313      	orrs	r3, r2
 8002488:	600b      	str	r3, [r1, #0]
 800248a:	e019      	b.n	80024c0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800248c:	4b1c      	ldr	r3, [pc, #112]	; (8002500 <HAL_DMA_Init+0x16c>)
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002494:	f003 031c 	and.w	r3, r3, #28
 8002498:	210f      	movs	r1, #15
 800249a:	fa01 f303 	lsl.w	r3, r1, r3
 800249e:	43db      	mvns	r3, r3
 80024a0:	4917      	ldr	r1, [pc, #92]	; (8002500 <HAL_DMA_Init+0x16c>)
 80024a2:	4013      	ands	r3, r2
 80024a4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80024a6:	4b16      	ldr	r3, [pc, #88]	; (8002500 <HAL_DMA_Init+0x16c>)
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6859      	ldr	r1, [r3, #4]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b2:	f003 031c 	and.w	r3, r3, #28
 80024b6:	fa01 f303 	lsl.w	r3, r1, r3
 80024ba:	4911      	ldr	r1, [pc, #68]	; (8002500 <HAL_DMA_Init+0x16c>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2201      	movs	r2, #1
 80024ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80024d6:	2300      	movs	r3, #0
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3714      	adds	r7, #20
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr
 80024e4:	40020407 	.word	0x40020407
 80024e8:	bffdfff8 	.word	0xbffdfff8
 80024ec:	cccccccd 	.word	0xcccccccd
 80024f0:	40020000 	.word	0x40020000
 80024f4:	bffdfbf8 	.word	0xbffdfbf8
 80024f8:	40020400 	.word	0x40020400
 80024fc:	400200a8 	.word	0x400200a8
 8002500:	400204a8 	.word	0x400204a8

08002504 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b086      	sub	sp, #24
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	607a      	str	r2, [r7, #4]
 8002510:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002512:	2300      	movs	r3, #0
 8002514:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800251c:	2b01      	cmp	r3, #1
 800251e:	d101      	bne.n	8002524 <HAL_DMA_Start_IT+0x20>
 8002520:	2302      	movs	r3, #2
 8002522:	e04b      	b.n	80025bc <HAL_DMA_Start_IT+0xb8>
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002532:	b2db      	uxtb	r3, r3
 8002534:	2b01      	cmp	r3, #1
 8002536:	d13a      	bne.n	80025ae <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2202      	movs	r2, #2
 800253c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2200      	movs	r2, #0
 8002544:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f022 0201 	bic.w	r2, r2, #1
 8002554:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	68b9      	ldr	r1, [r7, #8]
 800255c:	68f8      	ldr	r0, [r7, #12]
 800255e:	f000 f96b 	bl	8002838 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002566:	2b00      	cmp	r3, #0
 8002568:	d008      	beq.n	800257c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f042 020e 	orr.w	r2, r2, #14
 8002578:	601a      	str	r2, [r3, #0]
 800257a:	e00f      	b.n	800259c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f022 0204 	bic.w	r2, r2, #4
 800258a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f042 020a 	orr.w	r2, r2, #10
 800259a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f042 0201 	orr.w	r2, r2, #1
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	e005      	b.n	80025ba <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80025b6:	2302      	movs	r3, #2
 80025b8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80025ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3718      	adds	r7, #24
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b085      	sub	sp, #20
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025cc:	2300      	movs	r3, #0
 80025ce:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d008      	beq.n	80025ee <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2204      	movs	r2, #4
 80025e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e022      	b.n	8002634 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f022 020e 	bic.w	r2, r2, #14
 80025fc:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f022 0201 	bic.w	r2, r2, #1
 800260c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002612:	f003 021c 	and.w	r2, r3, #28
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261a:	2101      	movs	r1, #1
 800261c:	fa01 f202 	lsl.w	r2, r1, r2
 8002620:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2201      	movs	r2, #1
 8002626:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002632:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002634:	4618      	mov	r0, r3
 8002636:	3714      	adds	r7, #20
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr

08002640 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002648:	2300      	movs	r3, #0
 800264a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002652:	b2db      	uxtb	r3, r3
 8002654:	2b02      	cmp	r3, #2
 8002656:	d005      	beq.n	8002664 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2204      	movs	r2, #4
 800265c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	73fb      	strb	r3, [r7, #15]
 8002662:	e029      	b.n	80026b8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f022 020e 	bic.w	r2, r2, #14
 8002672:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f022 0201 	bic.w	r2, r2, #1
 8002682:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002688:	f003 021c 	and.w	r2, r3, #28
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002690:	2101      	movs	r1, #1
 8002692:	fa01 f202 	lsl.w	r2, r1, r2
 8002696:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d003      	beq.n	80026b8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	4798      	blx	r3
    }
  }
  return status;
 80026b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b084      	sub	sp, #16
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026de:	f003 031c 	and.w	r3, r3, #28
 80026e2:	2204      	movs	r2, #4
 80026e4:	409a      	lsls	r2, r3
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	4013      	ands	r3, r2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d026      	beq.n	800273c <HAL_DMA_IRQHandler+0x7a>
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	f003 0304 	and.w	r3, r3, #4
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d021      	beq.n	800273c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0320 	and.w	r3, r3, #32
 8002702:	2b00      	cmp	r3, #0
 8002704:	d107      	bne.n	8002716 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f022 0204 	bic.w	r2, r2, #4
 8002714:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271a:	f003 021c 	and.w	r2, r3, #28
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	2104      	movs	r1, #4
 8002724:	fa01 f202 	lsl.w	r2, r1, r2
 8002728:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272e:	2b00      	cmp	r3, #0
 8002730:	d071      	beq.n	8002816 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800273a:	e06c      	b.n	8002816 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002740:	f003 031c 	and.w	r3, r3, #28
 8002744:	2202      	movs	r2, #2
 8002746:	409a      	lsls	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	4013      	ands	r3, r2
 800274c:	2b00      	cmp	r3, #0
 800274e:	d02e      	beq.n	80027ae <HAL_DMA_IRQHandler+0xec>
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	2b00      	cmp	r3, #0
 8002758:	d029      	beq.n	80027ae <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0320 	and.w	r3, r3, #32
 8002764:	2b00      	cmp	r3, #0
 8002766:	d10b      	bne.n	8002780 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f022 020a 	bic.w	r2, r2, #10
 8002776:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002784:	f003 021c 	and.w	r2, r3, #28
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278c:	2102      	movs	r1, #2
 800278e:	fa01 f202 	lsl.w	r2, r1, r2
 8002792:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d038      	beq.n	8002816 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80027ac:	e033      	b.n	8002816 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b2:	f003 031c 	and.w	r3, r3, #28
 80027b6:	2208      	movs	r2, #8
 80027b8:	409a      	lsls	r2, r3
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	4013      	ands	r3, r2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d02a      	beq.n	8002818 <HAL_DMA_IRQHandler+0x156>
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	f003 0308 	and.w	r3, r3, #8
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d025      	beq.n	8002818 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f022 020e 	bic.w	r2, r2, #14
 80027da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e0:	f003 021c 	and.w	r2, r3, #28
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e8:	2101      	movs	r1, #1
 80027ea:	fa01 f202 	lsl.w	r2, r1, r2
 80027ee:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2201      	movs	r2, #1
 80027fa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800280a:	2b00      	cmp	r3, #0
 800280c:	d004      	beq.n	8002818 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002816:	bf00      	nop
 8002818:	bf00      	nop
}
 800281a:	3710      	adds	r7, #16
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 800282c:	4618      	mov	r0, r3
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr

08002838 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002838:	b480      	push	{r7}
 800283a:	b085      	sub	sp, #20
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
 8002844:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800284a:	f003 021c 	and.w	r2, r3, #28
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002852:	2101      	movs	r1, #1
 8002854:	fa01 f202 	lsl.w	r2, r1, r2
 8002858:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	683a      	ldr	r2, [r7, #0]
 8002860:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	2b10      	cmp	r3, #16
 8002868:	d108      	bne.n	800287c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	68ba      	ldr	r2, [r7, #8]
 8002878:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800287a:	e007      	b.n	800288c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	68ba      	ldr	r2, [r7, #8]
 8002882:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	60da      	str	r2, [r3, #12]
}
 800288c:	bf00      	nop
 800288e:	3714      	adds	r7, #20
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002898:	b480      	push	{r7}
 800289a:	b087      	sub	sp, #28
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028a2:	2300      	movs	r3, #0
 80028a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028a6:	e166      	b.n	8002b76 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	2101      	movs	r1, #1
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	fa01 f303 	lsl.w	r3, r1, r3
 80028b4:	4013      	ands	r3, r2
 80028b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	f000 8158 	beq.w	8002b70 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f003 0303 	and.w	r3, r3, #3
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d005      	beq.n	80028d8 <HAL_GPIO_Init+0x40>
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f003 0303 	and.w	r3, r3, #3
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d130      	bne.n	800293a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	2203      	movs	r2, #3
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	43db      	mvns	r3, r3
 80028ea:	693a      	ldr	r2, [r7, #16]
 80028ec:	4013      	ands	r3, r2
 80028ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	68da      	ldr	r2, [r3, #12]
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	693a      	ldr	r2, [r7, #16]
 80028fe:	4313      	orrs	r3, r2
 8002900:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	693a      	ldr	r2, [r7, #16]
 8002906:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800290e:	2201      	movs	r2, #1
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	fa02 f303 	lsl.w	r3, r2, r3
 8002916:	43db      	mvns	r3, r3
 8002918:	693a      	ldr	r2, [r7, #16]
 800291a:	4013      	ands	r3, r2
 800291c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	091b      	lsrs	r3, r3, #4
 8002924:	f003 0201 	and.w	r2, r3, #1
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	fa02 f303 	lsl.w	r3, r2, r3
 800292e:	693a      	ldr	r2, [r7, #16]
 8002930:	4313      	orrs	r3, r2
 8002932:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f003 0303 	and.w	r3, r3, #3
 8002942:	2b03      	cmp	r3, #3
 8002944:	d017      	beq.n	8002976 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	005b      	lsls	r3, r3, #1
 8002950:	2203      	movs	r2, #3
 8002952:	fa02 f303 	lsl.w	r3, r2, r3
 8002956:	43db      	mvns	r3, r3
 8002958:	693a      	ldr	r2, [r7, #16]
 800295a:	4013      	ands	r3, r2
 800295c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	689a      	ldr	r2, [r3, #8]
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	005b      	lsls	r3, r3, #1
 8002966:	fa02 f303 	lsl.w	r3, r2, r3
 800296a:	693a      	ldr	r2, [r7, #16]
 800296c:	4313      	orrs	r3, r2
 800296e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	693a      	ldr	r2, [r7, #16]
 8002974:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f003 0303 	and.w	r3, r3, #3
 800297e:	2b02      	cmp	r3, #2
 8002980:	d123      	bne.n	80029ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	08da      	lsrs	r2, r3, #3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	3208      	adds	r2, #8
 800298a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800298e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	f003 0307 	and.w	r3, r3, #7
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	220f      	movs	r2, #15
 800299a:	fa02 f303 	lsl.w	r3, r2, r3
 800299e:	43db      	mvns	r3, r3
 80029a0:	693a      	ldr	r2, [r7, #16]
 80029a2:	4013      	ands	r3, r2
 80029a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	691a      	ldr	r2, [r3, #16]
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	f003 0307 	and.w	r3, r3, #7
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	fa02 f303 	lsl.w	r3, r2, r3
 80029b6:	693a      	ldr	r2, [r7, #16]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	08da      	lsrs	r2, r3, #3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	3208      	adds	r2, #8
 80029c4:	6939      	ldr	r1, [r7, #16]
 80029c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	005b      	lsls	r3, r3, #1
 80029d4:	2203      	movs	r2, #3
 80029d6:	fa02 f303 	lsl.w	r3, r2, r3
 80029da:	43db      	mvns	r3, r3
 80029dc:	693a      	ldr	r2, [r7, #16]
 80029de:	4013      	ands	r3, r2
 80029e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f003 0203 	and.w	r2, r3, #3
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	005b      	lsls	r3, r3, #1
 80029ee:	fa02 f303 	lsl.w	r3, r2, r3
 80029f2:	693a      	ldr	r2, [r7, #16]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	693a      	ldr	r2, [r7, #16]
 80029fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	f000 80b2 	beq.w	8002b70 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a0c:	4b61      	ldr	r3, [pc, #388]	; (8002b94 <HAL_GPIO_Init+0x2fc>)
 8002a0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a10:	4a60      	ldr	r2, [pc, #384]	; (8002b94 <HAL_GPIO_Init+0x2fc>)
 8002a12:	f043 0301 	orr.w	r3, r3, #1
 8002a16:	6613      	str	r3, [r2, #96]	; 0x60
 8002a18:	4b5e      	ldr	r3, [pc, #376]	; (8002b94 <HAL_GPIO_Init+0x2fc>)
 8002a1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a1c:	f003 0301 	and.w	r3, r3, #1
 8002a20:	60bb      	str	r3, [r7, #8]
 8002a22:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002a24:	4a5c      	ldr	r2, [pc, #368]	; (8002b98 <HAL_GPIO_Init+0x300>)
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	089b      	lsrs	r3, r3, #2
 8002a2a:	3302      	adds	r3, #2
 8002a2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a30:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	f003 0303 	and.w	r3, r3, #3
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	220f      	movs	r2, #15
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	43db      	mvns	r3, r3
 8002a42:	693a      	ldr	r2, [r7, #16]
 8002a44:	4013      	ands	r3, r2
 8002a46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002a4e:	d02b      	beq.n	8002aa8 <HAL_GPIO_Init+0x210>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4a52      	ldr	r2, [pc, #328]	; (8002b9c <HAL_GPIO_Init+0x304>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d025      	beq.n	8002aa4 <HAL_GPIO_Init+0x20c>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	4a51      	ldr	r2, [pc, #324]	; (8002ba0 <HAL_GPIO_Init+0x308>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d01f      	beq.n	8002aa0 <HAL_GPIO_Init+0x208>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4a50      	ldr	r2, [pc, #320]	; (8002ba4 <HAL_GPIO_Init+0x30c>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d019      	beq.n	8002a9c <HAL_GPIO_Init+0x204>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	4a4f      	ldr	r2, [pc, #316]	; (8002ba8 <HAL_GPIO_Init+0x310>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d013      	beq.n	8002a98 <HAL_GPIO_Init+0x200>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	4a4e      	ldr	r2, [pc, #312]	; (8002bac <HAL_GPIO_Init+0x314>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d00d      	beq.n	8002a94 <HAL_GPIO_Init+0x1fc>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	4a4d      	ldr	r2, [pc, #308]	; (8002bb0 <HAL_GPIO_Init+0x318>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d007      	beq.n	8002a90 <HAL_GPIO_Init+0x1f8>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	4a4c      	ldr	r2, [pc, #304]	; (8002bb4 <HAL_GPIO_Init+0x31c>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d101      	bne.n	8002a8c <HAL_GPIO_Init+0x1f4>
 8002a88:	2307      	movs	r3, #7
 8002a8a:	e00e      	b.n	8002aaa <HAL_GPIO_Init+0x212>
 8002a8c:	2308      	movs	r3, #8
 8002a8e:	e00c      	b.n	8002aaa <HAL_GPIO_Init+0x212>
 8002a90:	2306      	movs	r3, #6
 8002a92:	e00a      	b.n	8002aaa <HAL_GPIO_Init+0x212>
 8002a94:	2305      	movs	r3, #5
 8002a96:	e008      	b.n	8002aaa <HAL_GPIO_Init+0x212>
 8002a98:	2304      	movs	r3, #4
 8002a9a:	e006      	b.n	8002aaa <HAL_GPIO_Init+0x212>
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e004      	b.n	8002aaa <HAL_GPIO_Init+0x212>
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	e002      	b.n	8002aaa <HAL_GPIO_Init+0x212>
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e000      	b.n	8002aaa <HAL_GPIO_Init+0x212>
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	697a      	ldr	r2, [r7, #20]
 8002aac:	f002 0203 	and.w	r2, r2, #3
 8002ab0:	0092      	lsls	r2, r2, #2
 8002ab2:	4093      	lsls	r3, r2
 8002ab4:	693a      	ldr	r2, [r7, #16]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002aba:	4937      	ldr	r1, [pc, #220]	; (8002b98 <HAL_GPIO_Init+0x300>)
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	089b      	lsrs	r3, r3, #2
 8002ac0:	3302      	adds	r3, #2
 8002ac2:	693a      	ldr	r2, [r7, #16]
 8002ac4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ac8:	4b3b      	ldr	r3, [pc, #236]	; (8002bb8 <HAL_GPIO_Init+0x320>)
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	43db      	mvns	r3, r3
 8002ad2:	693a      	ldr	r2, [r7, #16]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d003      	beq.n	8002aec <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002aec:	4a32      	ldr	r2, [pc, #200]	; (8002bb8 <HAL_GPIO_Init+0x320>)
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002af2:	4b31      	ldr	r3, [pc, #196]	; (8002bb8 <HAL_GPIO_Init+0x320>)
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	43db      	mvns	r3, r3
 8002afc:	693a      	ldr	r2, [r7, #16]
 8002afe:	4013      	ands	r3, r2
 8002b00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d003      	beq.n	8002b16 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002b0e:	693a      	ldr	r2, [r7, #16]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b16:	4a28      	ldr	r2, [pc, #160]	; (8002bb8 <HAL_GPIO_Init+0x320>)
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002b1c:	4b26      	ldr	r3, [pc, #152]	; (8002bb8 <HAL_GPIO_Init+0x320>)
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	43db      	mvns	r3, r3
 8002b26:	693a      	ldr	r2, [r7, #16]
 8002b28:	4013      	ands	r3, r2
 8002b2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d003      	beq.n	8002b40 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002b38:	693a      	ldr	r2, [r7, #16]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002b40:	4a1d      	ldr	r2, [pc, #116]	; (8002bb8 <HAL_GPIO_Init+0x320>)
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002b46:	4b1c      	ldr	r3, [pc, #112]	; (8002bb8 <HAL_GPIO_Init+0x320>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	43db      	mvns	r3, r3
 8002b50:	693a      	ldr	r2, [r7, #16]
 8002b52:	4013      	ands	r3, r2
 8002b54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d003      	beq.n	8002b6a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002b62:	693a      	ldr	r2, [r7, #16]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002b6a:	4a13      	ldr	r2, [pc, #76]	; (8002bb8 <HAL_GPIO_Init+0x320>)
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	3301      	adds	r3, #1
 8002b74:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	f47f ae91 	bne.w	80028a8 <HAL_GPIO_Init+0x10>
  }
}
 8002b86:	bf00      	nop
 8002b88:	bf00      	nop
 8002b8a:	371c      	adds	r7, #28
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr
 8002b94:	40021000 	.word	0x40021000
 8002b98:	40010000 	.word	0x40010000
 8002b9c:	48000400 	.word	0x48000400
 8002ba0:	48000800 	.word	0x48000800
 8002ba4:	48000c00 	.word	0x48000c00
 8002ba8:	48001000 	.word	0x48001000
 8002bac:	48001400 	.word	0x48001400
 8002bb0:	48001800 	.word	0x48001800
 8002bb4:	48001c00 	.word	0x48001c00
 8002bb8:	40010400 	.word	0x40010400

08002bbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	807b      	strh	r3, [r7, #2]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bcc:	787b      	ldrb	r3, [r7, #1]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d003      	beq.n	8002bda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002bd2:	887a      	ldrh	r2, [r7, #2]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002bd8:	e002      	b.n	8002be0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002bda:	887a      	ldrh	r2, [r7, #2]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002bf6:	4b08      	ldr	r3, [pc, #32]	; (8002c18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bf8:	695a      	ldr	r2, [r3, #20]
 8002bfa:	88fb      	ldrh	r3, [r7, #6]
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d006      	beq.n	8002c10 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c02:	4a05      	ldr	r2, [pc, #20]	; (8002c18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c04:	88fb      	ldrh	r3, [r7, #6]
 8002c06:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c08:	88fb      	ldrh	r3, [r7, #6]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7fe fd4c 	bl	80016a8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002c10:	bf00      	nop
 8002c12:	3708      	adds	r7, #8
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	40010400 	.word	0x40010400

08002c1c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002c20:	4b04      	ldr	r3, [pc, #16]	; (8002c34 <HAL_PWREx_GetVoltageRange+0x18>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	40007000 	.word	0x40007000

08002c38 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b085      	sub	sp, #20
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c46:	d130      	bne.n	8002caa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c48:	4b23      	ldr	r3, [pc, #140]	; (8002cd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c54:	d038      	beq.n	8002cc8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c56:	4b20      	ldr	r3, [pc, #128]	; (8002cd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c5e:	4a1e      	ldr	r2, [pc, #120]	; (8002cd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c60:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c64:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c66:	4b1d      	ldr	r3, [pc, #116]	; (8002cdc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2232      	movs	r2, #50	; 0x32
 8002c6c:	fb02 f303 	mul.w	r3, r2, r3
 8002c70:	4a1b      	ldr	r2, [pc, #108]	; (8002ce0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002c72:	fba2 2303 	umull	r2, r3, r2, r3
 8002c76:	0c9b      	lsrs	r3, r3, #18
 8002c78:	3301      	adds	r3, #1
 8002c7a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c7c:	e002      	b.n	8002c84 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	3b01      	subs	r3, #1
 8002c82:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c84:	4b14      	ldr	r3, [pc, #80]	; (8002cd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c86:	695b      	ldr	r3, [r3, #20]
 8002c88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c90:	d102      	bne.n	8002c98 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d1f2      	bne.n	8002c7e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c98:	4b0f      	ldr	r3, [pc, #60]	; (8002cd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c9a:	695b      	ldr	r3, [r3, #20]
 8002c9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ca0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ca4:	d110      	bne.n	8002cc8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e00f      	b.n	8002cca <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002caa:	4b0b      	ldr	r3, [pc, #44]	; (8002cd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002cb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cb6:	d007      	beq.n	8002cc8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002cb8:	4b07      	ldr	r3, [pc, #28]	; (8002cd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002cc0:	4a05      	ldr	r2, [pc, #20]	; (8002cd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cc6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3714      	adds	r7, #20
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	40007000 	.word	0x40007000
 8002cdc:	20000004 	.word	0x20000004
 8002ce0:	431bde83 	.word	0x431bde83

08002ce4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b088      	sub	sp, #32
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d102      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	f000 bc08 	b.w	8003508 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cf8:	4b96      	ldr	r3, [pc, #600]	; (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	f003 030c 	and.w	r3, r3, #12
 8002d00:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d02:	4b94      	ldr	r3, [pc, #592]	; (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	f003 0303 	and.w	r3, r3, #3
 8002d0a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0310 	and.w	r3, r3, #16
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	f000 80e4 	beq.w	8002ee2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d007      	beq.n	8002d30 <HAL_RCC_OscConfig+0x4c>
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	2b0c      	cmp	r3, #12
 8002d24:	f040 808b 	bne.w	8002e3e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	f040 8087 	bne.w	8002e3e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d30:	4b88      	ldr	r3, [pc, #544]	; (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0302 	and.w	r3, r3, #2
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d005      	beq.n	8002d48 <HAL_RCC_OscConfig+0x64>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	699b      	ldr	r3, [r3, #24]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d101      	bne.n	8002d48 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e3df      	b.n	8003508 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a1a      	ldr	r2, [r3, #32]
 8002d4c:	4b81      	ldr	r3, [pc, #516]	; (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0308 	and.w	r3, r3, #8
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d004      	beq.n	8002d62 <HAL_RCC_OscConfig+0x7e>
 8002d58:	4b7e      	ldr	r3, [pc, #504]	; (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d60:	e005      	b.n	8002d6e <HAL_RCC_OscConfig+0x8a>
 8002d62:	4b7c      	ldr	r3, [pc, #496]	; (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002d64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d68:	091b      	lsrs	r3, r3, #4
 8002d6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d223      	bcs.n	8002dba <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a1b      	ldr	r3, [r3, #32]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f000 fd92 	bl	80038a0 <RCC_SetFlashLatencyFromMSIRange>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e3c0      	b.n	8003508 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d86:	4b73      	ldr	r3, [pc, #460]	; (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a72      	ldr	r2, [pc, #456]	; (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002d8c:	f043 0308 	orr.w	r3, r3, #8
 8002d90:	6013      	str	r3, [r2, #0]
 8002d92:	4b70      	ldr	r3, [pc, #448]	; (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a1b      	ldr	r3, [r3, #32]
 8002d9e:	496d      	ldr	r1, [pc, #436]	; (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002da4:	4b6b      	ldr	r3, [pc, #428]	; (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	69db      	ldr	r3, [r3, #28]
 8002db0:	021b      	lsls	r3, r3, #8
 8002db2:	4968      	ldr	r1, [pc, #416]	; (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	604b      	str	r3, [r1, #4]
 8002db8:	e025      	b.n	8002e06 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002dba:	4b66      	ldr	r3, [pc, #408]	; (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a65      	ldr	r2, [pc, #404]	; (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002dc0:	f043 0308 	orr.w	r3, r3, #8
 8002dc4:	6013      	str	r3, [r2, #0]
 8002dc6:	4b63      	ldr	r3, [pc, #396]	; (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a1b      	ldr	r3, [r3, #32]
 8002dd2:	4960      	ldr	r1, [pc, #384]	; (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002dd8:	4b5e      	ldr	r3, [pc, #376]	; (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	69db      	ldr	r3, [r3, #28]
 8002de4:	021b      	lsls	r3, r3, #8
 8002de6:	495b      	ldr	r1, [pc, #364]	; (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d109      	bne.n	8002e06 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a1b      	ldr	r3, [r3, #32]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f000 fd52 	bl	80038a0 <RCC_SetFlashLatencyFromMSIRange>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d001      	beq.n	8002e06 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e380      	b.n	8003508 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e06:	f000 fc87 	bl	8003718 <HAL_RCC_GetSysClockFreq>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	4b51      	ldr	r3, [pc, #324]	; (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	091b      	lsrs	r3, r3, #4
 8002e12:	f003 030f 	and.w	r3, r3, #15
 8002e16:	4950      	ldr	r1, [pc, #320]	; (8002f58 <HAL_RCC_OscConfig+0x274>)
 8002e18:	5ccb      	ldrb	r3, [r1, r3]
 8002e1a:	f003 031f 	and.w	r3, r3, #31
 8002e1e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e22:	4a4e      	ldr	r2, [pc, #312]	; (8002f5c <HAL_RCC_OscConfig+0x278>)
 8002e24:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002e26:	4b4e      	ldr	r3, [pc, #312]	; (8002f60 <HAL_RCC_OscConfig+0x27c>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7ff f920 	bl	8002070 <HAL_InitTick>
 8002e30:	4603      	mov	r3, r0
 8002e32:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002e34:	7bfb      	ldrb	r3, [r7, #15]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d052      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002e3a:	7bfb      	ldrb	r3, [r7, #15]
 8002e3c:	e364      	b.n	8003508 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d032      	beq.n	8002eac <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002e46:	4b43      	ldr	r3, [pc, #268]	; (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a42      	ldr	r2, [pc, #264]	; (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002e4c:	f043 0301 	orr.w	r3, r3, #1
 8002e50:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e52:	f7ff f95d 	bl	8002110 <HAL_GetTick>
 8002e56:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e58:	e008      	b.n	8002e6c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e5a:	f7ff f959 	bl	8002110 <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d901      	bls.n	8002e6c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e34d      	b.n	8003508 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e6c:	4b39      	ldr	r3, [pc, #228]	; (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0302 	and.w	r3, r3, #2
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d0f0      	beq.n	8002e5a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e78:	4b36      	ldr	r3, [pc, #216]	; (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a35      	ldr	r2, [pc, #212]	; (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002e7e:	f043 0308 	orr.w	r3, r3, #8
 8002e82:	6013      	str	r3, [r2, #0]
 8002e84:	4b33      	ldr	r3, [pc, #204]	; (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a1b      	ldr	r3, [r3, #32]
 8002e90:	4930      	ldr	r1, [pc, #192]	; (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e96:	4b2f      	ldr	r3, [pc, #188]	; (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	69db      	ldr	r3, [r3, #28]
 8002ea2:	021b      	lsls	r3, r3, #8
 8002ea4:	492b      	ldr	r1, [pc, #172]	; (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	604b      	str	r3, [r1, #4]
 8002eaa:	e01a      	b.n	8002ee2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002eac:	4b29      	ldr	r3, [pc, #164]	; (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a28      	ldr	r2, [pc, #160]	; (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002eb2:	f023 0301 	bic.w	r3, r3, #1
 8002eb6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002eb8:	f7ff f92a 	bl	8002110 <HAL_GetTick>
 8002ebc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ebe:	e008      	b.n	8002ed2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ec0:	f7ff f926 	bl	8002110 <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e31a      	b.n	8003508 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ed2:	4b20      	ldr	r3, [pc, #128]	; (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d1f0      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x1dc>
 8002ede:	e000      	b.n	8002ee2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ee0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0301 	and.w	r3, r3, #1
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d073      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	2b08      	cmp	r3, #8
 8002ef2:	d005      	beq.n	8002f00 <HAL_RCC_OscConfig+0x21c>
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	2b0c      	cmp	r3, #12
 8002ef8:	d10e      	bne.n	8002f18 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	2b03      	cmp	r3, #3
 8002efe:	d10b      	bne.n	8002f18 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f00:	4b14      	ldr	r3, [pc, #80]	; (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d063      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x2f0>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d15f      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e2f7      	b.n	8003508 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f20:	d106      	bne.n	8002f30 <HAL_RCC_OscConfig+0x24c>
 8002f22:	4b0c      	ldr	r3, [pc, #48]	; (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a0b      	ldr	r2, [pc, #44]	; (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002f28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f2c:	6013      	str	r3, [r2, #0]
 8002f2e:	e025      	b.n	8002f7c <HAL_RCC_OscConfig+0x298>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f38:	d114      	bne.n	8002f64 <HAL_RCC_OscConfig+0x280>
 8002f3a:	4b06      	ldr	r3, [pc, #24]	; (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a05      	ldr	r2, [pc, #20]	; (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002f40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f44:	6013      	str	r3, [r2, #0]
 8002f46:	4b03      	ldr	r3, [pc, #12]	; (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a02      	ldr	r2, [pc, #8]	; (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002f4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f50:	6013      	str	r3, [r2, #0]
 8002f52:	e013      	b.n	8002f7c <HAL_RCC_OscConfig+0x298>
 8002f54:	40021000 	.word	0x40021000
 8002f58:	080082a4 	.word	0x080082a4
 8002f5c:	20000004 	.word	0x20000004
 8002f60:	20000008 	.word	0x20000008
 8002f64:	4ba0      	ldr	r3, [pc, #640]	; (80031e8 <HAL_RCC_OscConfig+0x504>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a9f      	ldr	r2, [pc, #636]	; (80031e8 <HAL_RCC_OscConfig+0x504>)
 8002f6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f6e:	6013      	str	r3, [r2, #0]
 8002f70:	4b9d      	ldr	r3, [pc, #628]	; (80031e8 <HAL_RCC_OscConfig+0x504>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a9c      	ldr	r2, [pc, #624]	; (80031e8 <HAL_RCC_OscConfig+0x504>)
 8002f76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d013      	beq.n	8002fac <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f84:	f7ff f8c4 	bl	8002110 <HAL_GetTick>
 8002f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f8a:	e008      	b.n	8002f9e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f8c:	f7ff f8c0 	bl	8002110 <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	2b64      	cmp	r3, #100	; 0x64
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e2b4      	b.n	8003508 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f9e:	4b92      	ldr	r3, [pc, #584]	; (80031e8 <HAL_RCC_OscConfig+0x504>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d0f0      	beq.n	8002f8c <HAL_RCC_OscConfig+0x2a8>
 8002faa:	e014      	b.n	8002fd6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fac:	f7ff f8b0 	bl	8002110 <HAL_GetTick>
 8002fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fb2:	e008      	b.n	8002fc6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fb4:	f7ff f8ac 	bl	8002110 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b64      	cmp	r3, #100	; 0x64
 8002fc0:	d901      	bls.n	8002fc6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e2a0      	b.n	8003508 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fc6:	4b88      	ldr	r3, [pc, #544]	; (80031e8 <HAL_RCC_OscConfig+0x504>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1f0      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x2d0>
 8002fd2:	e000      	b.n	8002fd6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d060      	beq.n	80030a4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	2b04      	cmp	r3, #4
 8002fe6:	d005      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x310>
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	2b0c      	cmp	r3, #12
 8002fec:	d119      	bne.n	8003022 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d116      	bne.n	8003022 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ff4:	4b7c      	ldr	r3, [pc, #496]	; (80031e8 <HAL_RCC_OscConfig+0x504>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d005      	beq.n	800300c <HAL_RCC_OscConfig+0x328>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d101      	bne.n	800300c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e27d      	b.n	8003508 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800300c:	4b76      	ldr	r3, [pc, #472]	; (80031e8 <HAL_RCC_OscConfig+0x504>)
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	061b      	lsls	r3, r3, #24
 800301a:	4973      	ldr	r1, [pc, #460]	; (80031e8 <HAL_RCC_OscConfig+0x504>)
 800301c:	4313      	orrs	r3, r2
 800301e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003020:	e040      	b.n	80030a4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d023      	beq.n	8003072 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800302a:	4b6f      	ldr	r3, [pc, #444]	; (80031e8 <HAL_RCC_OscConfig+0x504>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a6e      	ldr	r2, [pc, #440]	; (80031e8 <HAL_RCC_OscConfig+0x504>)
 8003030:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003034:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003036:	f7ff f86b 	bl	8002110 <HAL_GetTick>
 800303a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800303c:	e008      	b.n	8003050 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800303e:	f7ff f867 	bl	8002110 <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	2b02      	cmp	r3, #2
 800304a:	d901      	bls.n	8003050 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e25b      	b.n	8003508 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003050:	4b65      	ldr	r3, [pc, #404]	; (80031e8 <HAL_RCC_OscConfig+0x504>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003058:	2b00      	cmp	r3, #0
 800305a:	d0f0      	beq.n	800303e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800305c:	4b62      	ldr	r3, [pc, #392]	; (80031e8 <HAL_RCC_OscConfig+0x504>)
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	691b      	ldr	r3, [r3, #16]
 8003068:	061b      	lsls	r3, r3, #24
 800306a:	495f      	ldr	r1, [pc, #380]	; (80031e8 <HAL_RCC_OscConfig+0x504>)
 800306c:	4313      	orrs	r3, r2
 800306e:	604b      	str	r3, [r1, #4]
 8003070:	e018      	b.n	80030a4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003072:	4b5d      	ldr	r3, [pc, #372]	; (80031e8 <HAL_RCC_OscConfig+0x504>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a5c      	ldr	r2, [pc, #368]	; (80031e8 <HAL_RCC_OscConfig+0x504>)
 8003078:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800307c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800307e:	f7ff f847 	bl	8002110 <HAL_GetTick>
 8003082:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003084:	e008      	b.n	8003098 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003086:	f7ff f843 	bl	8002110 <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	2b02      	cmp	r3, #2
 8003092:	d901      	bls.n	8003098 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e237      	b.n	8003508 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003098:	4b53      	ldr	r3, [pc, #332]	; (80031e8 <HAL_RCC_OscConfig+0x504>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d1f0      	bne.n	8003086 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0308 	and.w	r3, r3, #8
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d03c      	beq.n	800312a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	695b      	ldr	r3, [r3, #20]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d01c      	beq.n	80030f2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030b8:	4b4b      	ldr	r3, [pc, #300]	; (80031e8 <HAL_RCC_OscConfig+0x504>)
 80030ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030be:	4a4a      	ldr	r2, [pc, #296]	; (80031e8 <HAL_RCC_OscConfig+0x504>)
 80030c0:	f043 0301 	orr.w	r3, r3, #1
 80030c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030c8:	f7ff f822 	bl	8002110 <HAL_GetTick>
 80030cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030ce:	e008      	b.n	80030e2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030d0:	f7ff f81e 	bl	8002110 <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e212      	b.n	8003508 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030e2:	4b41      	ldr	r3, [pc, #260]	; (80031e8 <HAL_RCC_OscConfig+0x504>)
 80030e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030e8:	f003 0302 	and.w	r3, r3, #2
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d0ef      	beq.n	80030d0 <HAL_RCC_OscConfig+0x3ec>
 80030f0:	e01b      	b.n	800312a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030f2:	4b3d      	ldr	r3, [pc, #244]	; (80031e8 <HAL_RCC_OscConfig+0x504>)
 80030f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030f8:	4a3b      	ldr	r2, [pc, #236]	; (80031e8 <HAL_RCC_OscConfig+0x504>)
 80030fa:	f023 0301 	bic.w	r3, r3, #1
 80030fe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003102:	f7ff f805 	bl	8002110 <HAL_GetTick>
 8003106:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003108:	e008      	b.n	800311c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800310a:	f7ff f801 	bl	8002110 <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	2b02      	cmp	r3, #2
 8003116:	d901      	bls.n	800311c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e1f5      	b.n	8003508 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800311c:	4b32      	ldr	r3, [pc, #200]	; (80031e8 <HAL_RCC_OscConfig+0x504>)
 800311e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003122:	f003 0302 	and.w	r3, r3, #2
 8003126:	2b00      	cmp	r3, #0
 8003128:	d1ef      	bne.n	800310a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0304 	and.w	r3, r3, #4
 8003132:	2b00      	cmp	r3, #0
 8003134:	f000 80a6 	beq.w	8003284 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003138:	2300      	movs	r3, #0
 800313a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800313c:	4b2a      	ldr	r3, [pc, #168]	; (80031e8 <HAL_RCC_OscConfig+0x504>)
 800313e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003140:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d10d      	bne.n	8003164 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003148:	4b27      	ldr	r3, [pc, #156]	; (80031e8 <HAL_RCC_OscConfig+0x504>)
 800314a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800314c:	4a26      	ldr	r2, [pc, #152]	; (80031e8 <HAL_RCC_OscConfig+0x504>)
 800314e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003152:	6593      	str	r3, [r2, #88]	; 0x58
 8003154:	4b24      	ldr	r3, [pc, #144]	; (80031e8 <HAL_RCC_OscConfig+0x504>)
 8003156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003158:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800315c:	60bb      	str	r3, [r7, #8]
 800315e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003160:	2301      	movs	r3, #1
 8003162:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003164:	4b21      	ldr	r3, [pc, #132]	; (80031ec <HAL_RCC_OscConfig+0x508>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800316c:	2b00      	cmp	r3, #0
 800316e:	d118      	bne.n	80031a2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003170:	4b1e      	ldr	r3, [pc, #120]	; (80031ec <HAL_RCC_OscConfig+0x508>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a1d      	ldr	r2, [pc, #116]	; (80031ec <HAL_RCC_OscConfig+0x508>)
 8003176:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800317a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800317c:	f7fe ffc8 	bl	8002110 <HAL_GetTick>
 8003180:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003182:	e008      	b.n	8003196 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003184:	f7fe ffc4 	bl	8002110 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	2b02      	cmp	r3, #2
 8003190:	d901      	bls.n	8003196 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e1b8      	b.n	8003508 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003196:	4b15      	ldr	r3, [pc, #84]	; (80031ec <HAL_RCC_OscConfig+0x508>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d0f0      	beq.n	8003184 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d108      	bne.n	80031bc <HAL_RCC_OscConfig+0x4d8>
 80031aa:	4b0f      	ldr	r3, [pc, #60]	; (80031e8 <HAL_RCC_OscConfig+0x504>)
 80031ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031b0:	4a0d      	ldr	r2, [pc, #52]	; (80031e8 <HAL_RCC_OscConfig+0x504>)
 80031b2:	f043 0301 	orr.w	r3, r3, #1
 80031b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031ba:	e029      	b.n	8003210 <HAL_RCC_OscConfig+0x52c>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	2b05      	cmp	r3, #5
 80031c2:	d115      	bne.n	80031f0 <HAL_RCC_OscConfig+0x50c>
 80031c4:	4b08      	ldr	r3, [pc, #32]	; (80031e8 <HAL_RCC_OscConfig+0x504>)
 80031c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ca:	4a07      	ldr	r2, [pc, #28]	; (80031e8 <HAL_RCC_OscConfig+0x504>)
 80031cc:	f043 0304 	orr.w	r3, r3, #4
 80031d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031d4:	4b04      	ldr	r3, [pc, #16]	; (80031e8 <HAL_RCC_OscConfig+0x504>)
 80031d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031da:	4a03      	ldr	r2, [pc, #12]	; (80031e8 <HAL_RCC_OscConfig+0x504>)
 80031dc:	f043 0301 	orr.w	r3, r3, #1
 80031e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031e4:	e014      	b.n	8003210 <HAL_RCC_OscConfig+0x52c>
 80031e6:	bf00      	nop
 80031e8:	40021000 	.word	0x40021000
 80031ec:	40007000 	.word	0x40007000
 80031f0:	4b9d      	ldr	r3, [pc, #628]	; (8003468 <HAL_RCC_OscConfig+0x784>)
 80031f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031f6:	4a9c      	ldr	r2, [pc, #624]	; (8003468 <HAL_RCC_OscConfig+0x784>)
 80031f8:	f023 0301 	bic.w	r3, r3, #1
 80031fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003200:	4b99      	ldr	r3, [pc, #612]	; (8003468 <HAL_RCC_OscConfig+0x784>)
 8003202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003206:	4a98      	ldr	r2, [pc, #608]	; (8003468 <HAL_RCC_OscConfig+0x784>)
 8003208:	f023 0304 	bic.w	r3, r3, #4
 800320c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d016      	beq.n	8003246 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003218:	f7fe ff7a 	bl	8002110 <HAL_GetTick>
 800321c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800321e:	e00a      	b.n	8003236 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003220:	f7fe ff76 	bl	8002110 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	f241 3288 	movw	r2, #5000	; 0x1388
 800322e:	4293      	cmp	r3, r2
 8003230:	d901      	bls.n	8003236 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e168      	b.n	8003508 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003236:	4b8c      	ldr	r3, [pc, #560]	; (8003468 <HAL_RCC_OscConfig+0x784>)
 8003238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800323c:	f003 0302 	and.w	r3, r3, #2
 8003240:	2b00      	cmp	r3, #0
 8003242:	d0ed      	beq.n	8003220 <HAL_RCC_OscConfig+0x53c>
 8003244:	e015      	b.n	8003272 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003246:	f7fe ff63 	bl	8002110 <HAL_GetTick>
 800324a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800324c:	e00a      	b.n	8003264 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800324e:	f7fe ff5f 	bl	8002110 <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	f241 3288 	movw	r2, #5000	; 0x1388
 800325c:	4293      	cmp	r3, r2
 800325e:	d901      	bls.n	8003264 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e151      	b.n	8003508 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003264:	4b80      	ldr	r3, [pc, #512]	; (8003468 <HAL_RCC_OscConfig+0x784>)
 8003266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800326a:	f003 0302 	and.w	r3, r3, #2
 800326e:	2b00      	cmp	r3, #0
 8003270:	d1ed      	bne.n	800324e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003272:	7ffb      	ldrb	r3, [r7, #31]
 8003274:	2b01      	cmp	r3, #1
 8003276:	d105      	bne.n	8003284 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003278:	4b7b      	ldr	r3, [pc, #492]	; (8003468 <HAL_RCC_OscConfig+0x784>)
 800327a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800327c:	4a7a      	ldr	r2, [pc, #488]	; (8003468 <HAL_RCC_OscConfig+0x784>)
 800327e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003282:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0320 	and.w	r3, r3, #32
 800328c:	2b00      	cmp	r3, #0
 800328e:	d03c      	beq.n	800330a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003294:	2b00      	cmp	r3, #0
 8003296:	d01c      	beq.n	80032d2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003298:	4b73      	ldr	r3, [pc, #460]	; (8003468 <HAL_RCC_OscConfig+0x784>)
 800329a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800329e:	4a72      	ldr	r2, [pc, #456]	; (8003468 <HAL_RCC_OscConfig+0x784>)
 80032a0:	f043 0301 	orr.w	r3, r3, #1
 80032a4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032a8:	f7fe ff32 	bl	8002110 <HAL_GetTick>
 80032ac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80032ae:	e008      	b.n	80032c2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032b0:	f7fe ff2e 	bl	8002110 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e122      	b.n	8003508 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80032c2:	4b69      	ldr	r3, [pc, #420]	; (8003468 <HAL_RCC_OscConfig+0x784>)
 80032c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032c8:	f003 0302 	and.w	r3, r3, #2
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d0ef      	beq.n	80032b0 <HAL_RCC_OscConfig+0x5cc>
 80032d0:	e01b      	b.n	800330a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80032d2:	4b65      	ldr	r3, [pc, #404]	; (8003468 <HAL_RCC_OscConfig+0x784>)
 80032d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032d8:	4a63      	ldr	r2, [pc, #396]	; (8003468 <HAL_RCC_OscConfig+0x784>)
 80032da:	f023 0301 	bic.w	r3, r3, #1
 80032de:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032e2:	f7fe ff15 	bl	8002110 <HAL_GetTick>
 80032e6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80032e8:	e008      	b.n	80032fc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032ea:	f7fe ff11 	bl	8002110 <HAL_GetTick>
 80032ee:	4602      	mov	r2, r0
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d901      	bls.n	80032fc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e105      	b.n	8003508 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80032fc:	4b5a      	ldr	r3, [pc, #360]	; (8003468 <HAL_RCC_OscConfig+0x784>)
 80032fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1ef      	bne.n	80032ea <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330e:	2b00      	cmp	r3, #0
 8003310:	f000 80f9 	beq.w	8003506 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003318:	2b02      	cmp	r3, #2
 800331a:	f040 80cf 	bne.w	80034bc <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800331e:	4b52      	ldr	r3, [pc, #328]	; (8003468 <HAL_RCC_OscConfig+0x784>)
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	f003 0203 	and.w	r2, r3, #3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332e:	429a      	cmp	r2, r3
 8003330:	d12c      	bne.n	800338c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333c:	3b01      	subs	r3, #1
 800333e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003340:	429a      	cmp	r2, r3
 8003342:	d123      	bne.n	800338c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800334e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003350:	429a      	cmp	r2, r3
 8003352:	d11b      	bne.n	800338c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800335e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003360:	429a      	cmp	r2, r3
 8003362:	d113      	bne.n	800338c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800336e:	085b      	lsrs	r3, r3, #1
 8003370:	3b01      	subs	r3, #1
 8003372:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003374:	429a      	cmp	r2, r3
 8003376:	d109      	bne.n	800338c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003382:	085b      	lsrs	r3, r3, #1
 8003384:	3b01      	subs	r3, #1
 8003386:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003388:	429a      	cmp	r2, r3
 800338a:	d071      	beq.n	8003470 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	2b0c      	cmp	r3, #12
 8003390:	d068      	beq.n	8003464 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003392:	4b35      	ldr	r3, [pc, #212]	; (8003468 <HAL_RCC_OscConfig+0x784>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d105      	bne.n	80033aa <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800339e:	4b32      	ldr	r3, [pc, #200]	; (8003468 <HAL_RCC_OscConfig+0x784>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d001      	beq.n	80033ae <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e0ac      	b.n	8003508 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80033ae:	4b2e      	ldr	r3, [pc, #184]	; (8003468 <HAL_RCC_OscConfig+0x784>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a2d      	ldr	r2, [pc, #180]	; (8003468 <HAL_RCC_OscConfig+0x784>)
 80033b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033b8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80033ba:	f7fe fea9 	bl	8002110 <HAL_GetTick>
 80033be:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033c0:	e008      	b.n	80033d4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033c2:	f7fe fea5 	bl	8002110 <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d901      	bls.n	80033d4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e099      	b.n	8003508 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033d4:	4b24      	ldr	r3, [pc, #144]	; (8003468 <HAL_RCC_OscConfig+0x784>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d1f0      	bne.n	80033c2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033e0:	4b21      	ldr	r3, [pc, #132]	; (8003468 <HAL_RCC_OscConfig+0x784>)
 80033e2:	68da      	ldr	r2, [r3, #12]
 80033e4:	4b21      	ldr	r3, [pc, #132]	; (800346c <HAL_RCC_OscConfig+0x788>)
 80033e6:	4013      	ands	r3, r2
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80033f0:	3a01      	subs	r2, #1
 80033f2:	0112      	lsls	r2, r2, #4
 80033f4:	4311      	orrs	r1, r2
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80033fa:	0212      	lsls	r2, r2, #8
 80033fc:	4311      	orrs	r1, r2
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003402:	0852      	lsrs	r2, r2, #1
 8003404:	3a01      	subs	r2, #1
 8003406:	0552      	lsls	r2, r2, #21
 8003408:	4311      	orrs	r1, r2
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800340e:	0852      	lsrs	r2, r2, #1
 8003410:	3a01      	subs	r2, #1
 8003412:	0652      	lsls	r2, r2, #25
 8003414:	4311      	orrs	r1, r2
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800341a:	06d2      	lsls	r2, r2, #27
 800341c:	430a      	orrs	r2, r1
 800341e:	4912      	ldr	r1, [pc, #72]	; (8003468 <HAL_RCC_OscConfig+0x784>)
 8003420:	4313      	orrs	r3, r2
 8003422:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003424:	4b10      	ldr	r3, [pc, #64]	; (8003468 <HAL_RCC_OscConfig+0x784>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a0f      	ldr	r2, [pc, #60]	; (8003468 <HAL_RCC_OscConfig+0x784>)
 800342a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800342e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003430:	4b0d      	ldr	r3, [pc, #52]	; (8003468 <HAL_RCC_OscConfig+0x784>)
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	4a0c      	ldr	r2, [pc, #48]	; (8003468 <HAL_RCC_OscConfig+0x784>)
 8003436:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800343a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800343c:	f7fe fe68 	bl	8002110 <HAL_GetTick>
 8003440:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003442:	e008      	b.n	8003456 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003444:	f7fe fe64 	bl	8002110 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	2b02      	cmp	r3, #2
 8003450:	d901      	bls.n	8003456 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e058      	b.n	8003508 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003456:	4b04      	ldr	r3, [pc, #16]	; (8003468 <HAL_RCC_OscConfig+0x784>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d0f0      	beq.n	8003444 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003462:	e050      	b.n	8003506 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e04f      	b.n	8003508 <HAL_RCC_OscConfig+0x824>
 8003468:	40021000 	.word	0x40021000
 800346c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003470:	4b27      	ldr	r3, [pc, #156]	; (8003510 <HAL_RCC_OscConfig+0x82c>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d144      	bne.n	8003506 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800347c:	4b24      	ldr	r3, [pc, #144]	; (8003510 <HAL_RCC_OscConfig+0x82c>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a23      	ldr	r2, [pc, #140]	; (8003510 <HAL_RCC_OscConfig+0x82c>)
 8003482:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003486:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003488:	4b21      	ldr	r3, [pc, #132]	; (8003510 <HAL_RCC_OscConfig+0x82c>)
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	4a20      	ldr	r2, [pc, #128]	; (8003510 <HAL_RCC_OscConfig+0x82c>)
 800348e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003492:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003494:	f7fe fe3c 	bl	8002110 <HAL_GetTick>
 8003498:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800349a:	e008      	b.n	80034ae <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800349c:	f7fe fe38 	bl	8002110 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e02c      	b.n	8003508 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034ae:	4b18      	ldr	r3, [pc, #96]	; (8003510 <HAL_RCC_OscConfig+0x82c>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d0f0      	beq.n	800349c <HAL_RCC_OscConfig+0x7b8>
 80034ba:	e024      	b.n	8003506 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	2b0c      	cmp	r3, #12
 80034c0:	d01f      	beq.n	8003502 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034c2:	4b13      	ldr	r3, [pc, #76]	; (8003510 <HAL_RCC_OscConfig+0x82c>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a12      	ldr	r2, [pc, #72]	; (8003510 <HAL_RCC_OscConfig+0x82c>)
 80034c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ce:	f7fe fe1f 	bl	8002110 <HAL_GetTick>
 80034d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034d4:	e008      	b.n	80034e8 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034d6:	f7fe fe1b 	bl	8002110 <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d901      	bls.n	80034e8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e00f      	b.n	8003508 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034e8:	4b09      	ldr	r3, [pc, #36]	; (8003510 <HAL_RCC_OscConfig+0x82c>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d1f0      	bne.n	80034d6 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80034f4:	4b06      	ldr	r3, [pc, #24]	; (8003510 <HAL_RCC_OscConfig+0x82c>)
 80034f6:	68da      	ldr	r2, [r3, #12]
 80034f8:	4905      	ldr	r1, [pc, #20]	; (8003510 <HAL_RCC_OscConfig+0x82c>)
 80034fa:	4b06      	ldr	r3, [pc, #24]	; (8003514 <HAL_RCC_OscConfig+0x830>)
 80034fc:	4013      	ands	r3, r2
 80034fe:	60cb      	str	r3, [r1, #12]
 8003500:	e001      	b.n	8003506 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e000      	b.n	8003508 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003506:	2300      	movs	r3, #0
}
 8003508:	4618      	mov	r0, r3
 800350a:	3720      	adds	r7, #32
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}
 8003510:	40021000 	.word	0x40021000
 8003514:	feeefffc 	.word	0xfeeefffc

08003518 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d101      	bne.n	800352c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e0e7      	b.n	80036fc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800352c:	4b75      	ldr	r3, [pc, #468]	; (8003704 <HAL_RCC_ClockConfig+0x1ec>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0307 	and.w	r3, r3, #7
 8003534:	683a      	ldr	r2, [r7, #0]
 8003536:	429a      	cmp	r2, r3
 8003538:	d910      	bls.n	800355c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800353a:	4b72      	ldr	r3, [pc, #456]	; (8003704 <HAL_RCC_ClockConfig+0x1ec>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f023 0207 	bic.w	r2, r3, #7
 8003542:	4970      	ldr	r1, [pc, #448]	; (8003704 <HAL_RCC_ClockConfig+0x1ec>)
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	4313      	orrs	r3, r2
 8003548:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800354a:	4b6e      	ldr	r3, [pc, #440]	; (8003704 <HAL_RCC_ClockConfig+0x1ec>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0307 	and.w	r3, r3, #7
 8003552:	683a      	ldr	r2, [r7, #0]
 8003554:	429a      	cmp	r2, r3
 8003556:	d001      	beq.n	800355c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e0cf      	b.n	80036fc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0302 	and.w	r3, r3, #2
 8003564:	2b00      	cmp	r3, #0
 8003566:	d010      	beq.n	800358a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	689a      	ldr	r2, [r3, #8]
 800356c:	4b66      	ldr	r3, [pc, #408]	; (8003708 <HAL_RCC_ClockConfig+0x1f0>)
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003574:	429a      	cmp	r2, r3
 8003576:	d908      	bls.n	800358a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003578:	4b63      	ldr	r3, [pc, #396]	; (8003708 <HAL_RCC_ClockConfig+0x1f0>)
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	4960      	ldr	r1, [pc, #384]	; (8003708 <HAL_RCC_ClockConfig+0x1f0>)
 8003586:	4313      	orrs	r3, r2
 8003588:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0301 	and.w	r3, r3, #1
 8003592:	2b00      	cmp	r3, #0
 8003594:	d04c      	beq.n	8003630 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	2b03      	cmp	r3, #3
 800359c:	d107      	bne.n	80035ae <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800359e:	4b5a      	ldr	r3, [pc, #360]	; (8003708 <HAL_RCC_ClockConfig+0x1f0>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d121      	bne.n	80035ee <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e0a6      	b.n	80036fc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d107      	bne.n	80035c6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035b6:	4b54      	ldr	r3, [pc, #336]	; (8003708 <HAL_RCC_ClockConfig+0x1f0>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d115      	bne.n	80035ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e09a      	b.n	80036fc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d107      	bne.n	80035de <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035ce:	4b4e      	ldr	r3, [pc, #312]	; (8003708 <HAL_RCC_ClockConfig+0x1f0>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d109      	bne.n	80035ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e08e      	b.n	80036fc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035de:	4b4a      	ldr	r3, [pc, #296]	; (8003708 <HAL_RCC_ClockConfig+0x1f0>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d101      	bne.n	80035ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e086      	b.n	80036fc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80035ee:	4b46      	ldr	r3, [pc, #280]	; (8003708 <HAL_RCC_ClockConfig+0x1f0>)
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f023 0203 	bic.w	r2, r3, #3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	4943      	ldr	r1, [pc, #268]	; (8003708 <HAL_RCC_ClockConfig+0x1f0>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003600:	f7fe fd86 	bl	8002110 <HAL_GetTick>
 8003604:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003606:	e00a      	b.n	800361e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003608:	f7fe fd82 	bl	8002110 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	f241 3288 	movw	r2, #5000	; 0x1388
 8003616:	4293      	cmp	r3, r2
 8003618:	d901      	bls.n	800361e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e06e      	b.n	80036fc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800361e:	4b3a      	ldr	r3, [pc, #232]	; (8003708 <HAL_RCC_ClockConfig+0x1f0>)
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f003 020c 	and.w	r2, r3, #12
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	429a      	cmp	r2, r3
 800362e:	d1eb      	bne.n	8003608 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0302 	and.w	r3, r3, #2
 8003638:	2b00      	cmp	r3, #0
 800363a:	d010      	beq.n	800365e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	689a      	ldr	r2, [r3, #8]
 8003640:	4b31      	ldr	r3, [pc, #196]	; (8003708 <HAL_RCC_ClockConfig+0x1f0>)
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003648:	429a      	cmp	r2, r3
 800364a:	d208      	bcs.n	800365e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800364c:	4b2e      	ldr	r3, [pc, #184]	; (8003708 <HAL_RCC_ClockConfig+0x1f0>)
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	492b      	ldr	r1, [pc, #172]	; (8003708 <HAL_RCC_ClockConfig+0x1f0>)
 800365a:	4313      	orrs	r3, r2
 800365c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800365e:	4b29      	ldr	r3, [pc, #164]	; (8003704 <HAL_RCC_ClockConfig+0x1ec>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0307 	and.w	r3, r3, #7
 8003666:	683a      	ldr	r2, [r7, #0]
 8003668:	429a      	cmp	r2, r3
 800366a:	d210      	bcs.n	800368e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800366c:	4b25      	ldr	r3, [pc, #148]	; (8003704 <HAL_RCC_ClockConfig+0x1ec>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f023 0207 	bic.w	r2, r3, #7
 8003674:	4923      	ldr	r1, [pc, #140]	; (8003704 <HAL_RCC_ClockConfig+0x1ec>)
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	4313      	orrs	r3, r2
 800367a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800367c:	4b21      	ldr	r3, [pc, #132]	; (8003704 <HAL_RCC_ClockConfig+0x1ec>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0307 	and.w	r3, r3, #7
 8003684:	683a      	ldr	r2, [r7, #0]
 8003686:	429a      	cmp	r2, r3
 8003688:	d001      	beq.n	800368e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e036      	b.n	80036fc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0304 	and.w	r3, r3, #4
 8003696:	2b00      	cmp	r3, #0
 8003698:	d008      	beq.n	80036ac <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800369a:	4b1b      	ldr	r3, [pc, #108]	; (8003708 <HAL_RCC_ClockConfig+0x1f0>)
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	4918      	ldr	r1, [pc, #96]	; (8003708 <HAL_RCC_ClockConfig+0x1f0>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0308 	and.w	r3, r3, #8
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d009      	beq.n	80036cc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036b8:	4b13      	ldr	r3, [pc, #76]	; (8003708 <HAL_RCC_ClockConfig+0x1f0>)
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	691b      	ldr	r3, [r3, #16]
 80036c4:	00db      	lsls	r3, r3, #3
 80036c6:	4910      	ldr	r1, [pc, #64]	; (8003708 <HAL_RCC_ClockConfig+0x1f0>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80036cc:	f000 f824 	bl	8003718 <HAL_RCC_GetSysClockFreq>
 80036d0:	4602      	mov	r2, r0
 80036d2:	4b0d      	ldr	r3, [pc, #52]	; (8003708 <HAL_RCC_ClockConfig+0x1f0>)
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	091b      	lsrs	r3, r3, #4
 80036d8:	f003 030f 	and.w	r3, r3, #15
 80036dc:	490b      	ldr	r1, [pc, #44]	; (800370c <HAL_RCC_ClockConfig+0x1f4>)
 80036de:	5ccb      	ldrb	r3, [r1, r3]
 80036e0:	f003 031f 	and.w	r3, r3, #31
 80036e4:	fa22 f303 	lsr.w	r3, r2, r3
 80036e8:	4a09      	ldr	r2, [pc, #36]	; (8003710 <HAL_RCC_ClockConfig+0x1f8>)
 80036ea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80036ec:	4b09      	ldr	r3, [pc, #36]	; (8003714 <HAL_RCC_ClockConfig+0x1fc>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f7fe fcbd 	bl	8002070 <HAL_InitTick>
 80036f6:	4603      	mov	r3, r0
 80036f8:	72fb      	strb	r3, [r7, #11]

  return status;
 80036fa:	7afb      	ldrb	r3, [r7, #11]
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3710      	adds	r7, #16
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	40022000 	.word	0x40022000
 8003708:	40021000 	.word	0x40021000
 800370c:	080082a4 	.word	0x080082a4
 8003710:	20000004 	.word	0x20000004
 8003714:	20000008 	.word	0x20000008

08003718 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003718:	b480      	push	{r7}
 800371a:	b089      	sub	sp, #36	; 0x24
 800371c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800371e:	2300      	movs	r3, #0
 8003720:	61fb      	str	r3, [r7, #28]
 8003722:	2300      	movs	r3, #0
 8003724:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003726:	4b3e      	ldr	r3, [pc, #248]	; (8003820 <HAL_RCC_GetSysClockFreq+0x108>)
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f003 030c 	and.w	r3, r3, #12
 800372e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003730:	4b3b      	ldr	r3, [pc, #236]	; (8003820 <HAL_RCC_GetSysClockFreq+0x108>)
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	f003 0303 	and.w	r3, r3, #3
 8003738:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d005      	beq.n	800374c <HAL_RCC_GetSysClockFreq+0x34>
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	2b0c      	cmp	r3, #12
 8003744:	d121      	bne.n	800378a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2b01      	cmp	r3, #1
 800374a:	d11e      	bne.n	800378a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800374c:	4b34      	ldr	r3, [pc, #208]	; (8003820 <HAL_RCC_GetSysClockFreq+0x108>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0308 	and.w	r3, r3, #8
 8003754:	2b00      	cmp	r3, #0
 8003756:	d107      	bne.n	8003768 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003758:	4b31      	ldr	r3, [pc, #196]	; (8003820 <HAL_RCC_GetSysClockFreq+0x108>)
 800375a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800375e:	0a1b      	lsrs	r3, r3, #8
 8003760:	f003 030f 	and.w	r3, r3, #15
 8003764:	61fb      	str	r3, [r7, #28]
 8003766:	e005      	b.n	8003774 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003768:	4b2d      	ldr	r3, [pc, #180]	; (8003820 <HAL_RCC_GetSysClockFreq+0x108>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	091b      	lsrs	r3, r3, #4
 800376e:	f003 030f 	and.w	r3, r3, #15
 8003772:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003774:	4a2b      	ldr	r2, [pc, #172]	; (8003824 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800377c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d10d      	bne.n	80037a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003788:	e00a      	b.n	80037a0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	2b04      	cmp	r3, #4
 800378e:	d102      	bne.n	8003796 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003790:	4b25      	ldr	r3, [pc, #148]	; (8003828 <HAL_RCC_GetSysClockFreq+0x110>)
 8003792:	61bb      	str	r3, [r7, #24]
 8003794:	e004      	b.n	80037a0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	2b08      	cmp	r3, #8
 800379a:	d101      	bne.n	80037a0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800379c:	4b23      	ldr	r3, [pc, #140]	; (800382c <HAL_RCC_GetSysClockFreq+0x114>)
 800379e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	2b0c      	cmp	r3, #12
 80037a4:	d134      	bne.n	8003810 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80037a6:	4b1e      	ldr	r3, [pc, #120]	; (8003820 <HAL_RCC_GetSysClockFreq+0x108>)
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	f003 0303 	and.w	r3, r3, #3
 80037ae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d003      	beq.n	80037be <HAL_RCC_GetSysClockFreq+0xa6>
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	2b03      	cmp	r3, #3
 80037ba:	d003      	beq.n	80037c4 <HAL_RCC_GetSysClockFreq+0xac>
 80037bc:	e005      	b.n	80037ca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80037be:	4b1a      	ldr	r3, [pc, #104]	; (8003828 <HAL_RCC_GetSysClockFreq+0x110>)
 80037c0:	617b      	str	r3, [r7, #20]
      break;
 80037c2:	e005      	b.n	80037d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80037c4:	4b19      	ldr	r3, [pc, #100]	; (800382c <HAL_RCC_GetSysClockFreq+0x114>)
 80037c6:	617b      	str	r3, [r7, #20]
      break;
 80037c8:	e002      	b.n	80037d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	617b      	str	r3, [r7, #20]
      break;
 80037ce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80037d0:	4b13      	ldr	r3, [pc, #76]	; (8003820 <HAL_RCC_GetSysClockFreq+0x108>)
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	091b      	lsrs	r3, r3, #4
 80037d6:	f003 0307 	and.w	r3, r3, #7
 80037da:	3301      	adds	r3, #1
 80037dc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80037de:	4b10      	ldr	r3, [pc, #64]	; (8003820 <HAL_RCC_GetSysClockFreq+0x108>)
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	0a1b      	lsrs	r3, r3, #8
 80037e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037e8:	697a      	ldr	r2, [r7, #20]
 80037ea:	fb03 f202 	mul.w	r2, r3, r2
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037f4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80037f6:	4b0a      	ldr	r3, [pc, #40]	; (8003820 <HAL_RCC_GetSysClockFreq+0x108>)
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	0e5b      	lsrs	r3, r3, #25
 80037fc:	f003 0303 	and.w	r3, r3, #3
 8003800:	3301      	adds	r3, #1
 8003802:	005b      	lsls	r3, r3, #1
 8003804:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003806:	697a      	ldr	r2, [r7, #20]
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	fbb2 f3f3 	udiv	r3, r2, r3
 800380e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003810:	69bb      	ldr	r3, [r7, #24]
}
 8003812:	4618      	mov	r0, r3
 8003814:	3724      	adds	r7, #36	; 0x24
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	40021000 	.word	0x40021000
 8003824:	080082bc 	.word	0x080082bc
 8003828:	00f42400 	.word	0x00f42400
 800382c:	016e3600 	.word	0x016e3600

08003830 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003830:	b480      	push	{r7}
 8003832:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003834:	4b03      	ldr	r3, [pc, #12]	; (8003844 <HAL_RCC_GetHCLKFreq+0x14>)
 8003836:	681b      	ldr	r3, [r3, #0]
}
 8003838:	4618      	mov	r0, r3
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	20000004 	.word	0x20000004

08003848 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800384c:	f7ff fff0 	bl	8003830 <HAL_RCC_GetHCLKFreq>
 8003850:	4602      	mov	r2, r0
 8003852:	4b06      	ldr	r3, [pc, #24]	; (800386c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	0a1b      	lsrs	r3, r3, #8
 8003858:	f003 0307 	and.w	r3, r3, #7
 800385c:	4904      	ldr	r1, [pc, #16]	; (8003870 <HAL_RCC_GetPCLK1Freq+0x28>)
 800385e:	5ccb      	ldrb	r3, [r1, r3]
 8003860:	f003 031f 	and.w	r3, r3, #31
 8003864:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003868:	4618      	mov	r0, r3
 800386a:	bd80      	pop	{r7, pc}
 800386c:	40021000 	.word	0x40021000
 8003870:	080082b4 	.word	0x080082b4

08003874 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003878:	f7ff ffda 	bl	8003830 <HAL_RCC_GetHCLKFreq>
 800387c:	4602      	mov	r2, r0
 800387e:	4b06      	ldr	r3, [pc, #24]	; (8003898 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	0adb      	lsrs	r3, r3, #11
 8003884:	f003 0307 	and.w	r3, r3, #7
 8003888:	4904      	ldr	r1, [pc, #16]	; (800389c <HAL_RCC_GetPCLK2Freq+0x28>)
 800388a:	5ccb      	ldrb	r3, [r1, r3]
 800388c:	f003 031f 	and.w	r3, r3, #31
 8003890:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003894:	4618      	mov	r0, r3
 8003896:	bd80      	pop	{r7, pc}
 8003898:	40021000 	.word	0x40021000
 800389c:	080082b4 	.word	0x080082b4

080038a0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b086      	sub	sp, #24
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80038a8:	2300      	movs	r3, #0
 80038aa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80038ac:	4b2a      	ldr	r3, [pc, #168]	; (8003958 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d003      	beq.n	80038c0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80038b8:	f7ff f9b0 	bl	8002c1c <HAL_PWREx_GetVoltageRange>
 80038bc:	6178      	str	r0, [r7, #20]
 80038be:	e014      	b.n	80038ea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80038c0:	4b25      	ldr	r3, [pc, #148]	; (8003958 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038c4:	4a24      	ldr	r2, [pc, #144]	; (8003958 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038ca:	6593      	str	r3, [r2, #88]	; 0x58
 80038cc:	4b22      	ldr	r3, [pc, #136]	; (8003958 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038d4:	60fb      	str	r3, [r7, #12]
 80038d6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80038d8:	f7ff f9a0 	bl	8002c1c <HAL_PWREx_GetVoltageRange>
 80038dc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80038de:	4b1e      	ldr	r3, [pc, #120]	; (8003958 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038e2:	4a1d      	ldr	r2, [pc, #116]	; (8003958 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038e8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038f0:	d10b      	bne.n	800390a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2b80      	cmp	r3, #128	; 0x80
 80038f6:	d919      	bls.n	800392c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2ba0      	cmp	r3, #160	; 0xa0
 80038fc:	d902      	bls.n	8003904 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80038fe:	2302      	movs	r3, #2
 8003900:	613b      	str	r3, [r7, #16]
 8003902:	e013      	b.n	800392c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003904:	2301      	movs	r3, #1
 8003906:	613b      	str	r3, [r7, #16]
 8003908:	e010      	b.n	800392c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2b80      	cmp	r3, #128	; 0x80
 800390e:	d902      	bls.n	8003916 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003910:	2303      	movs	r3, #3
 8003912:	613b      	str	r3, [r7, #16]
 8003914:	e00a      	b.n	800392c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2b80      	cmp	r3, #128	; 0x80
 800391a:	d102      	bne.n	8003922 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800391c:	2302      	movs	r3, #2
 800391e:	613b      	str	r3, [r7, #16]
 8003920:	e004      	b.n	800392c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2b70      	cmp	r3, #112	; 0x70
 8003926:	d101      	bne.n	800392c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003928:	2301      	movs	r3, #1
 800392a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800392c:	4b0b      	ldr	r3, [pc, #44]	; (800395c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f023 0207 	bic.w	r2, r3, #7
 8003934:	4909      	ldr	r1, [pc, #36]	; (800395c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	4313      	orrs	r3, r2
 800393a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800393c:	4b07      	ldr	r3, [pc, #28]	; (800395c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0307 	and.w	r3, r3, #7
 8003944:	693a      	ldr	r2, [r7, #16]
 8003946:	429a      	cmp	r2, r3
 8003948:	d001      	beq.n	800394e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e000      	b.n	8003950 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800394e:	2300      	movs	r3, #0
}
 8003950:	4618      	mov	r0, r3
 8003952:	3718      	adds	r7, #24
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}
 8003958:	40021000 	.word	0x40021000
 800395c:	40022000 	.word	0x40022000

08003960 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b086      	sub	sp, #24
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003968:	2300      	movs	r3, #0
 800396a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800396c:	2300      	movs	r3, #0
 800396e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003978:	2b00      	cmp	r3, #0
 800397a:	d041      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003980:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003984:	d02a      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003986:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800398a:	d824      	bhi.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800398c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003990:	d008      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003992:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003996:	d81e      	bhi.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003998:	2b00      	cmp	r3, #0
 800399a:	d00a      	beq.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800399c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039a0:	d010      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80039a2:	e018      	b.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80039a4:	4b86      	ldr	r3, [pc, #536]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	4a85      	ldr	r2, [pc, #532]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039ae:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039b0:	e015      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	3304      	adds	r3, #4
 80039b6:	2100      	movs	r1, #0
 80039b8:	4618      	mov	r0, r3
 80039ba:	f000 facd 	bl	8003f58 <RCCEx_PLLSAI1_Config>
 80039be:	4603      	mov	r3, r0
 80039c0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039c2:	e00c      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	3320      	adds	r3, #32
 80039c8:	2100      	movs	r1, #0
 80039ca:	4618      	mov	r0, r3
 80039cc:	f000 fbb6 	bl	800413c <RCCEx_PLLSAI2_Config>
 80039d0:	4603      	mov	r3, r0
 80039d2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039d4:	e003      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	74fb      	strb	r3, [r7, #19]
      break;
 80039da:	e000      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80039dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039de:	7cfb      	ldrb	r3, [r7, #19]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d10b      	bne.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80039e4:	4b76      	ldr	r3, [pc, #472]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039f2:	4973      	ldr	r1, [pc, #460]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80039fa:	e001      	b.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039fc:	7cfb      	ldrb	r3, [r7, #19]
 80039fe:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d041      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a10:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003a14:	d02a      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003a16:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003a1a:	d824      	bhi.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003a1c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a20:	d008      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003a22:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a26:	d81e      	bhi.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d00a      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003a2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a30:	d010      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003a32:	e018      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003a34:	4b62      	ldr	r3, [pc, #392]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	4a61      	ldr	r2, [pc, #388]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a3e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a40:	e015      	b.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	3304      	adds	r3, #4
 8003a46:	2100      	movs	r1, #0
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f000 fa85 	bl	8003f58 <RCCEx_PLLSAI1_Config>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a52:	e00c      	b.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	3320      	adds	r3, #32
 8003a58:	2100      	movs	r1, #0
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f000 fb6e 	bl	800413c <RCCEx_PLLSAI2_Config>
 8003a60:	4603      	mov	r3, r0
 8003a62:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a64:	e003      	b.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	74fb      	strb	r3, [r7, #19]
      break;
 8003a6a:	e000      	b.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003a6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a6e:	7cfb      	ldrb	r3, [r7, #19]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d10b      	bne.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003a74:	4b52      	ldr	r3, [pc, #328]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a7a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a82:	494f      	ldr	r1, [pc, #316]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003a8a:	e001      	b.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a8c:	7cfb      	ldrb	r3, [r7, #19]
 8003a8e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	f000 80a0 	beq.w	8003bde <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003aa2:	4b47      	ldr	r3, [pc, #284]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d101      	bne.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e000      	b.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d00d      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ab8:	4b41      	ldr	r3, [pc, #260]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003abc:	4a40      	ldr	r2, [pc, #256]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003abe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ac2:	6593      	str	r3, [r2, #88]	; 0x58
 8003ac4:	4b3e      	ldr	r3, [pc, #248]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ac8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003acc:	60bb      	str	r3, [r7, #8]
 8003ace:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ad4:	4b3b      	ldr	r3, [pc, #236]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a3a      	ldr	r2, [pc, #232]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003ada:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ade:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ae0:	f7fe fb16 	bl	8002110 <HAL_GetTick>
 8003ae4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ae6:	e009      	b.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ae8:	f7fe fb12 	bl	8002110 <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d902      	bls.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	74fb      	strb	r3, [r7, #19]
        break;
 8003afa:	e005      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003afc:	4b31      	ldr	r3, [pc, #196]	; (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d0ef      	beq.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003b08:	7cfb      	ldrb	r3, [r7, #19]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d15c      	bne.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b0e:	4b2c      	ldr	r3, [pc, #176]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b18:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d01f      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b26:	697a      	ldr	r2, [r7, #20]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d019      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b2c:	4b24      	ldr	r3, [pc, #144]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b36:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b38:	4b21      	ldr	r3, [pc, #132]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b3e:	4a20      	ldr	r2, [pc, #128]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b48:	4b1d      	ldr	r3, [pc, #116]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b4e:	4a1c      	ldr	r2, [pc, #112]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003b58:	4a19      	ldr	r2, [pc, #100]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d016      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b6a:	f7fe fad1 	bl	8002110 <HAL_GetTick>
 8003b6e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b70:	e00b      	b.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b72:	f7fe facd 	bl	8002110 <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d902      	bls.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	74fb      	strb	r3, [r7, #19]
            break;
 8003b88:	e006      	b.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b8a:	4b0d      	ldr	r3, [pc, #52]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d0ec      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003b98:	7cfb      	ldrb	r3, [r7, #19]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d10c      	bne.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b9e:	4b08      	ldr	r3, [pc, #32]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ba4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bae:	4904      	ldr	r1, [pc, #16]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003bb6:	e009      	b.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003bb8:	7cfb      	ldrb	r3, [r7, #19]
 8003bba:	74bb      	strb	r3, [r7, #18]
 8003bbc:	e006      	b.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003bbe:	bf00      	nop
 8003bc0:	40021000 	.word	0x40021000
 8003bc4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bc8:	7cfb      	ldrb	r3, [r7, #19]
 8003bca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bcc:	7c7b      	ldrb	r3, [r7, #17]
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d105      	bne.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bd2:	4ba6      	ldr	r3, [pc, #664]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bd6:	4aa5      	ldr	r2, [pc, #660]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003bd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bdc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0301 	and.w	r3, r3, #1
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00a      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003bea:	4ba0      	ldr	r3, [pc, #640]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bf0:	f023 0203 	bic.w	r2, r3, #3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf8:	499c      	ldr	r1, [pc, #624]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0302 	and.w	r3, r3, #2
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d00a      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c0c:	4b97      	ldr	r3, [pc, #604]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c12:	f023 020c 	bic.w	r2, r3, #12
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c1a:	4994      	ldr	r1, [pc, #592]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0304 	and.w	r3, r3, #4
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00a      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c2e:	4b8f      	ldr	r3, [pc, #572]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c34:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3c:	498b      	ldr	r1, [pc, #556]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0308 	and.w	r3, r3, #8
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d00a      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c50:	4b86      	ldr	r3, [pc, #536]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c56:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c5e:	4983      	ldr	r1, [pc, #524]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0310 	and.w	r3, r3, #16
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d00a      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c72:	4b7e      	ldr	r3, [pc, #504]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c80:	497a      	ldr	r1, [pc, #488]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003c82:	4313      	orrs	r3, r2
 8003c84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0320 	and.w	r3, r3, #32
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d00a      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c94:	4b75      	ldr	r3, [pc, #468]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c9a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ca2:	4972      	ldr	r1, [pc, #456]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d00a      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003cb6:	4b6d      	ldr	r3, [pc, #436]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cbc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cc4:	4969      	ldr	r1, [pc, #420]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d00a      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003cd8:	4b64      	ldr	r3, [pc, #400]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cde:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ce6:	4961      	ldr	r1, [pc, #388]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00a      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003cfa:	4b5c      	ldr	r3, [pc, #368]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d00:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d08:	4958      	ldr	r1, [pc, #352]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d00a      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d1c:	4b53      	ldr	r3, [pc, #332]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d22:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d2a:	4950      	ldr	r1, [pc, #320]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d00a      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d3e:	4b4b      	ldr	r3, [pc, #300]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d44:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d4c:	4947      	ldr	r1, [pc, #284]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d00a      	beq.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003d60:	4b42      	ldr	r3, [pc, #264]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d62:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d66:	f023 0203 	bic.w	r2, r3, #3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d6e:	493f      	ldr	r1, [pc, #252]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d028      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d82:	4b3a      	ldr	r3, [pc, #232]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d88:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d90:	4936      	ldr	r1, [pc, #216]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003da0:	d106      	bne.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003da2:	4b32      	ldr	r3, [pc, #200]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	4a31      	ldr	r2, [pc, #196]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003da8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003dac:	60d3      	str	r3, [r2, #12]
 8003dae:	e011      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003db8:	d10c      	bne.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	3304      	adds	r3, #4
 8003dbe:	2101      	movs	r1, #1
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f000 f8c9 	bl	8003f58 <RCCEx_PLLSAI1_Config>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003dca:	7cfb      	ldrb	r3, [r7, #19]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d001      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8003dd0:	7cfb      	ldrb	r3, [r7, #19]
 8003dd2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d028      	beq.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003de0:	4b22      	ldr	r3, [pc, #136]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003de6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dee:	491f      	ldr	r1, [pc, #124]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003df0:	4313      	orrs	r3, r2
 8003df2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dfa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003dfe:	d106      	bne.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e00:	4b1a      	ldr	r3, [pc, #104]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	4a19      	ldr	r2, [pc, #100]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e0a:	60d3      	str	r3, [r2, #12]
 8003e0c:	e011      	b.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e12:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e16:	d10c      	bne.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	3304      	adds	r3, #4
 8003e1c:	2101      	movs	r1, #1
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f000 f89a 	bl	8003f58 <RCCEx_PLLSAI1_Config>
 8003e24:	4603      	mov	r3, r0
 8003e26:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e28:	7cfb      	ldrb	r3, [r7, #19]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d001      	beq.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8003e2e:	7cfb      	ldrb	r3, [r7, #19]
 8003e30:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d02a      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e3e:	4b0b      	ldr	r3, [pc, #44]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e44:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e4c:	4907      	ldr	r1, [pc, #28]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e5c:	d108      	bne.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e5e:	4b03      	ldr	r3, [pc, #12]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	4a02      	ldr	r2, [pc, #8]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e68:	60d3      	str	r3, [r2, #12]
 8003e6a:	e013      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8003e6c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e74:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e78:	d10c      	bne.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	3304      	adds	r3, #4
 8003e7e:	2101      	movs	r1, #1
 8003e80:	4618      	mov	r0, r3
 8003e82:	f000 f869 	bl	8003f58 <RCCEx_PLLSAI1_Config>
 8003e86:	4603      	mov	r3, r0
 8003e88:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e8a:	7cfb      	ldrb	r3, [r7, #19]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d001      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8003e90:	7cfb      	ldrb	r3, [r7, #19]
 8003e92:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d02f      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ea0:	4b2c      	ldr	r3, [pc, #176]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ea6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003eae:	4929      	ldr	r1, [pc, #164]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003eba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ebe:	d10d      	bne.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	3304      	adds	r3, #4
 8003ec4:	2102      	movs	r1, #2
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f000 f846 	bl	8003f58 <RCCEx_PLLSAI1_Config>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ed0:	7cfb      	ldrb	r3, [r7, #19]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d014      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8003ed6:	7cfb      	ldrb	r3, [r7, #19]
 8003ed8:	74bb      	strb	r3, [r7, #18]
 8003eda:	e011      	b.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ee0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ee4:	d10c      	bne.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	3320      	adds	r3, #32
 8003eea:	2102      	movs	r1, #2
 8003eec:	4618      	mov	r0, r3
 8003eee:	f000 f925 	bl	800413c <RCCEx_PLLSAI2_Config>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ef6:	7cfb      	ldrb	r3, [r7, #19]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d001      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8003efc:	7cfb      	ldrb	r3, [r7, #19]
 8003efe:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d00b      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003f0c:	4b11      	ldr	r3, [pc, #68]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f12:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f1c:	490d      	ldr	r1, [pc, #52]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d00b      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003f30:	4b08      	ldr	r3, [pc, #32]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f36:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f40:	4904      	ldr	r1, [pc, #16]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003f48:	7cbb      	ldrb	r3, [r7, #18]
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3718      	adds	r7, #24
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	40021000 	.word	0x40021000

08003f58 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f62:	2300      	movs	r3, #0
 8003f64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003f66:	4b74      	ldr	r3, [pc, #464]	; (8004138 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	f003 0303 	and.w	r3, r3, #3
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d018      	beq.n	8003fa4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003f72:	4b71      	ldr	r3, [pc, #452]	; (8004138 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	f003 0203 	and.w	r2, r3, #3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d10d      	bne.n	8003f9e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
       ||
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d009      	beq.n	8003f9e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003f8a:	4b6b      	ldr	r3, [pc, #428]	; (8004138 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	091b      	lsrs	r3, r3, #4
 8003f90:	f003 0307 	and.w	r3, r3, #7
 8003f94:	1c5a      	adds	r2, r3, #1
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	685b      	ldr	r3, [r3, #4]
       ||
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d047      	beq.n	800402e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	73fb      	strb	r3, [r7, #15]
 8003fa2:	e044      	b.n	800402e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2b03      	cmp	r3, #3
 8003faa:	d018      	beq.n	8003fde <RCCEx_PLLSAI1_Config+0x86>
 8003fac:	2b03      	cmp	r3, #3
 8003fae:	d825      	bhi.n	8003ffc <RCCEx_PLLSAI1_Config+0xa4>
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d002      	beq.n	8003fba <RCCEx_PLLSAI1_Config+0x62>
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d009      	beq.n	8003fcc <RCCEx_PLLSAI1_Config+0x74>
 8003fb8:	e020      	b.n	8003ffc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003fba:	4b5f      	ldr	r3, [pc, #380]	; (8004138 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0302 	and.w	r3, r3, #2
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d11d      	bne.n	8004002 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fca:	e01a      	b.n	8004002 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003fcc:	4b5a      	ldr	r3, [pc, #360]	; (8004138 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d116      	bne.n	8004006 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fdc:	e013      	b.n	8004006 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003fde:	4b56      	ldr	r3, [pc, #344]	; (8004138 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d10f      	bne.n	800400a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003fea:	4b53      	ldr	r3, [pc, #332]	; (8004138 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d109      	bne.n	800400a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003ffa:	e006      	b.n	800400a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	73fb      	strb	r3, [r7, #15]
      break;
 8004000:	e004      	b.n	800400c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004002:	bf00      	nop
 8004004:	e002      	b.n	800400c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004006:	bf00      	nop
 8004008:	e000      	b.n	800400c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800400a:	bf00      	nop
    }

    if(status == HAL_OK)
 800400c:	7bfb      	ldrb	r3, [r7, #15]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d10d      	bne.n	800402e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004012:	4b49      	ldr	r3, [pc, #292]	; (8004138 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6819      	ldr	r1, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	3b01      	subs	r3, #1
 8004024:	011b      	lsls	r3, r3, #4
 8004026:	430b      	orrs	r3, r1
 8004028:	4943      	ldr	r1, [pc, #268]	; (8004138 <RCCEx_PLLSAI1_Config+0x1e0>)
 800402a:	4313      	orrs	r3, r2
 800402c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800402e:	7bfb      	ldrb	r3, [r7, #15]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d17c      	bne.n	800412e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004034:	4b40      	ldr	r3, [pc, #256]	; (8004138 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a3f      	ldr	r2, [pc, #252]	; (8004138 <RCCEx_PLLSAI1_Config+0x1e0>)
 800403a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800403e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004040:	f7fe f866 	bl	8002110 <HAL_GetTick>
 8004044:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004046:	e009      	b.n	800405c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004048:	f7fe f862 	bl	8002110 <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	2b02      	cmp	r3, #2
 8004054:	d902      	bls.n	800405c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	73fb      	strb	r3, [r7, #15]
        break;
 800405a:	e005      	b.n	8004068 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800405c:	4b36      	ldr	r3, [pc, #216]	; (8004138 <RCCEx_PLLSAI1_Config+0x1e0>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d1ef      	bne.n	8004048 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004068:	7bfb      	ldrb	r3, [r7, #15]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d15f      	bne.n	800412e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d110      	bne.n	8004096 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004074:	4b30      	ldr	r3, [pc, #192]	; (8004138 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004076:	691b      	ldr	r3, [r3, #16]
 8004078:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800407c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	6892      	ldr	r2, [r2, #8]
 8004084:	0211      	lsls	r1, r2, #8
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	68d2      	ldr	r2, [r2, #12]
 800408a:	06d2      	lsls	r2, r2, #27
 800408c:	430a      	orrs	r2, r1
 800408e:	492a      	ldr	r1, [pc, #168]	; (8004138 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004090:	4313      	orrs	r3, r2
 8004092:	610b      	str	r3, [r1, #16]
 8004094:	e027      	b.n	80040e6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	2b01      	cmp	r3, #1
 800409a:	d112      	bne.n	80040c2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800409c:	4b26      	ldr	r3, [pc, #152]	; (8004138 <RCCEx_PLLSAI1_Config+0x1e0>)
 800409e:	691b      	ldr	r3, [r3, #16]
 80040a0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80040a4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	6892      	ldr	r2, [r2, #8]
 80040ac:	0211      	lsls	r1, r2, #8
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	6912      	ldr	r2, [r2, #16]
 80040b2:	0852      	lsrs	r2, r2, #1
 80040b4:	3a01      	subs	r2, #1
 80040b6:	0552      	lsls	r2, r2, #21
 80040b8:	430a      	orrs	r2, r1
 80040ba:	491f      	ldr	r1, [pc, #124]	; (8004138 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	610b      	str	r3, [r1, #16]
 80040c0:	e011      	b.n	80040e6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040c2:	4b1d      	ldr	r3, [pc, #116]	; (8004138 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80040ca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	6892      	ldr	r2, [r2, #8]
 80040d2:	0211      	lsls	r1, r2, #8
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	6952      	ldr	r2, [r2, #20]
 80040d8:	0852      	lsrs	r2, r2, #1
 80040da:	3a01      	subs	r2, #1
 80040dc:	0652      	lsls	r2, r2, #25
 80040de:	430a      	orrs	r2, r1
 80040e0:	4915      	ldr	r1, [pc, #84]	; (8004138 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80040e6:	4b14      	ldr	r3, [pc, #80]	; (8004138 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a13      	ldr	r2, [pc, #76]	; (8004138 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80040f0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040f2:	f7fe f80d 	bl	8002110 <HAL_GetTick>
 80040f6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80040f8:	e009      	b.n	800410e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80040fa:	f7fe f809 	bl	8002110 <HAL_GetTick>
 80040fe:	4602      	mov	r2, r0
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	2b02      	cmp	r3, #2
 8004106:	d902      	bls.n	800410e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004108:	2303      	movs	r3, #3
 800410a:	73fb      	strb	r3, [r7, #15]
          break;
 800410c:	e005      	b.n	800411a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800410e:	4b0a      	ldr	r3, [pc, #40]	; (8004138 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d0ef      	beq.n	80040fa <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800411a:	7bfb      	ldrb	r3, [r7, #15]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d106      	bne.n	800412e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004120:	4b05      	ldr	r3, [pc, #20]	; (8004138 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004122:	691a      	ldr	r2, [r3, #16]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	699b      	ldr	r3, [r3, #24]
 8004128:	4903      	ldr	r1, [pc, #12]	; (8004138 <RCCEx_PLLSAI1_Config+0x1e0>)
 800412a:	4313      	orrs	r3, r2
 800412c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800412e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004130:	4618      	mov	r0, r3
 8004132:	3710      	adds	r7, #16
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}
 8004138:	40021000 	.word	0x40021000

0800413c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004146:	2300      	movs	r3, #0
 8004148:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800414a:	4b69      	ldr	r3, [pc, #420]	; (80042f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	f003 0303 	and.w	r3, r3, #3
 8004152:	2b00      	cmp	r3, #0
 8004154:	d018      	beq.n	8004188 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004156:	4b66      	ldr	r3, [pc, #408]	; (80042f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	f003 0203 	and.w	r2, r3, #3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	429a      	cmp	r2, r3
 8004164:	d10d      	bne.n	8004182 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
       ||
 800416a:	2b00      	cmp	r3, #0
 800416c:	d009      	beq.n	8004182 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800416e:	4b60      	ldr	r3, [pc, #384]	; (80042f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	091b      	lsrs	r3, r3, #4
 8004174:	f003 0307 	and.w	r3, r3, #7
 8004178:	1c5a      	adds	r2, r3, #1
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
       ||
 800417e:	429a      	cmp	r2, r3
 8004180:	d047      	beq.n	8004212 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	73fb      	strb	r3, [r7, #15]
 8004186:	e044      	b.n	8004212 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2b03      	cmp	r3, #3
 800418e:	d018      	beq.n	80041c2 <RCCEx_PLLSAI2_Config+0x86>
 8004190:	2b03      	cmp	r3, #3
 8004192:	d825      	bhi.n	80041e0 <RCCEx_PLLSAI2_Config+0xa4>
 8004194:	2b01      	cmp	r3, #1
 8004196:	d002      	beq.n	800419e <RCCEx_PLLSAI2_Config+0x62>
 8004198:	2b02      	cmp	r3, #2
 800419a:	d009      	beq.n	80041b0 <RCCEx_PLLSAI2_Config+0x74>
 800419c:	e020      	b.n	80041e0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800419e:	4b54      	ldr	r3, [pc, #336]	; (80042f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0302 	and.w	r3, r3, #2
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d11d      	bne.n	80041e6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041ae:	e01a      	b.n	80041e6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80041b0:	4b4f      	ldr	r3, [pc, #316]	; (80042f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d116      	bne.n	80041ea <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041c0:	e013      	b.n	80041ea <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80041c2:	4b4b      	ldr	r3, [pc, #300]	; (80042f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d10f      	bne.n	80041ee <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80041ce:	4b48      	ldr	r3, [pc, #288]	; (80042f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d109      	bne.n	80041ee <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80041de:	e006      	b.n	80041ee <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	73fb      	strb	r3, [r7, #15]
      break;
 80041e4:	e004      	b.n	80041f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80041e6:	bf00      	nop
 80041e8:	e002      	b.n	80041f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80041ea:	bf00      	nop
 80041ec:	e000      	b.n	80041f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80041ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80041f0:	7bfb      	ldrb	r3, [r7, #15]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d10d      	bne.n	8004212 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80041f6:	4b3e      	ldr	r3, [pc, #248]	; (80042f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6819      	ldr	r1, [r3, #0]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	3b01      	subs	r3, #1
 8004208:	011b      	lsls	r3, r3, #4
 800420a:	430b      	orrs	r3, r1
 800420c:	4938      	ldr	r1, [pc, #224]	; (80042f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800420e:	4313      	orrs	r3, r2
 8004210:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004212:	7bfb      	ldrb	r3, [r7, #15]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d166      	bne.n	80042e6 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004218:	4b35      	ldr	r3, [pc, #212]	; (80042f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a34      	ldr	r2, [pc, #208]	; (80042f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800421e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004222:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004224:	f7fd ff74 	bl	8002110 <HAL_GetTick>
 8004228:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800422a:	e009      	b.n	8004240 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800422c:	f7fd ff70 	bl	8002110 <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	2b02      	cmp	r3, #2
 8004238:	d902      	bls.n	8004240 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	73fb      	strb	r3, [r7, #15]
        break;
 800423e:	e005      	b.n	800424c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004240:	4b2b      	ldr	r3, [pc, #172]	; (80042f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d1ef      	bne.n	800422c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800424c:	7bfb      	ldrb	r3, [r7, #15]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d149      	bne.n	80042e6 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d110      	bne.n	800427a <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004258:	4b25      	ldr	r3, [pc, #148]	; (80042f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800425a:	695b      	ldr	r3, [r3, #20]
 800425c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004260:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	6892      	ldr	r2, [r2, #8]
 8004268:	0211      	lsls	r1, r2, #8
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	68d2      	ldr	r2, [r2, #12]
 800426e:	06d2      	lsls	r2, r2, #27
 8004270:	430a      	orrs	r2, r1
 8004272:	491f      	ldr	r1, [pc, #124]	; (80042f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004274:	4313      	orrs	r3, r2
 8004276:	614b      	str	r3, [r1, #20]
 8004278:	e011      	b.n	800429e <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800427a:	4b1d      	ldr	r3, [pc, #116]	; (80042f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800427c:	695b      	ldr	r3, [r3, #20]
 800427e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004282:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	6892      	ldr	r2, [r2, #8]
 800428a:	0211      	lsls	r1, r2, #8
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	6912      	ldr	r2, [r2, #16]
 8004290:	0852      	lsrs	r2, r2, #1
 8004292:	3a01      	subs	r2, #1
 8004294:	0652      	lsls	r2, r2, #25
 8004296:	430a      	orrs	r2, r1
 8004298:	4915      	ldr	r1, [pc, #84]	; (80042f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800429a:	4313      	orrs	r3, r2
 800429c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800429e:	4b14      	ldr	r3, [pc, #80]	; (80042f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a13      	ldr	r2, [pc, #76]	; (80042f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80042a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042a8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042aa:	f7fd ff31 	bl	8002110 <HAL_GetTick>
 80042ae:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80042b0:	e009      	b.n	80042c6 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80042b2:	f7fd ff2d 	bl	8002110 <HAL_GetTick>
 80042b6:	4602      	mov	r2, r0
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d902      	bls.n	80042c6 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	73fb      	strb	r3, [r7, #15]
          break;
 80042c4:	e005      	b.n	80042d2 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80042c6:	4b0a      	ldr	r3, [pc, #40]	; (80042f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d0ef      	beq.n	80042b2 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 80042d2:	7bfb      	ldrb	r3, [r7, #15]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d106      	bne.n	80042e6 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80042d8:	4b05      	ldr	r3, [pc, #20]	; (80042f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80042da:	695a      	ldr	r2, [r3, #20]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	695b      	ldr	r3, [r3, #20]
 80042e0:	4903      	ldr	r1, [pc, #12]	; (80042f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80042e2:	4313      	orrs	r3, r2
 80042e4:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80042e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3710      	adds	r7, #16
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}
 80042f0:	40021000 	.word	0x40021000

080042f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d101      	bne.n	8004306 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e095      	b.n	8004432 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430a:	2b00      	cmp	r3, #0
 800430c:	d108      	bne.n	8004320 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004316:	d009      	beq.n	800432c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	61da      	str	r2, [r3, #28]
 800431e:	e005      	b.n	800432c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004338:	b2db      	uxtb	r3, r3
 800433a:	2b00      	cmp	r3, #0
 800433c:	d106      	bne.n	800434c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f7fd fab2 	bl	80018b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2202      	movs	r2, #2
 8004350:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004362:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800436c:	d902      	bls.n	8004374 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800436e:	2300      	movs	r3, #0
 8004370:	60fb      	str	r3, [r7, #12]
 8004372:	e002      	b.n	800437a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004374:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004378:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004382:	d007      	beq.n	8004394 <HAL_SPI_Init+0xa0>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800438c:	d002      	beq.n	8004394 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80043a4:	431a      	orrs	r2, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	f003 0302 	and.w	r3, r3, #2
 80043ae:	431a      	orrs	r2, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	695b      	ldr	r3, [r3, #20]
 80043b4:	f003 0301 	and.w	r3, r3, #1
 80043b8:	431a      	orrs	r2, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	699b      	ldr	r3, [r3, #24]
 80043be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043c2:	431a      	orrs	r2, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	69db      	ldr	r3, [r3, #28]
 80043c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80043cc:	431a      	orrs	r2, r3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a1b      	ldr	r3, [r3, #32]
 80043d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043d6:	ea42 0103 	orr.w	r1, r2, r3
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043de:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	430a      	orrs	r2, r1
 80043e8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	699b      	ldr	r3, [r3, #24]
 80043ee:	0c1b      	lsrs	r3, r3, #16
 80043f0:	f003 0204 	and.w	r2, r3, #4
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f8:	f003 0310 	and.w	r3, r3, #16
 80043fc:	431a      	orrs	r2, r3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004402:	f003 0308 	and.w	r3, r3, #8
 8004406:	431a      	orrs	r2, r3
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004410:	ea42 0103 	orr.w	r1, r2, r3
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	430a      	orrs	r2, r1
 8004420:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004430:	2300      	movs	r3, #0
}
 8004432:	4618      	mov	r0, r3
 8004434:	3710      	adds	r7, #16
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}

0800443a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800443a:	b580      	push	{r7, lr}
 800443c:	b088      	sub	sp, #32
 800443e:	af00      	add	r7, sp, #0
 8004440:	60f8      	str	r0, [r7, #12]
 8004442:	60b9      	str	r1, [r7, #8]
 8004444:	603b      	str	r3, [r7, #0]
 8004446:	4613      	mov	r3, r2
 8004448:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800444a:	2300      	movs	r3, #0
 800444c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004454:	2b01      	cmp	r3, #1
 8004456:	d101      	bne.n	800445c <HAL_SPI_Transmit+0x22>
 8004458:	2302      	movs	r3, #2
 800445a:	e158      	b.n	800470e <HAL_SPI_Transmit+0x2d4>
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004464:	f7fd fe54 	bl	8002110 <HAL_GetTick>
 8004468:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800446a:	88fb      	ldrh	r3, [r7, #6]
 800446c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004474:	b2db      	uxtb	r3, r3
 8004476:	2b01      	cmp	r3, #1
 8004478:	d002      	beq.n	8004480 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800447a:	2302      	movs	r3, #2
 800447c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800447e:	e13d      	b.n	80046fc <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d002      	beq.n	800448c <HAL_SPI_Transmit+0x52>
 8004486:	88fb      	ldrh	r3, [r7, #6]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d102      	bne.n	8004492 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004490:	e134      	b.n	80046fc <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2203      	movs	r2, #3
 8004496:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2200      	movs	r2, #0
 800449e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	68ba      	ldr	r2, [r7, #8]
 80044a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	88fa      	ldrh	r2, [r7, #6]
 80044aa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	88fa      	ldrh	r2, [r7, #6]
 80044b0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2200      	movs	r2, #0
 80044b6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2200      	movs	r2, #0
 80044cc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2200      	movs	r2, #0
 80044d2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044dc:	d10f      	bne.n	80044fe <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80044fc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004508:	2b40      	cmp	r3, #64	; 0x40
 800450a:	d007      	beq.n	800451c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800451a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004524:	d94b      	bls.n	80045be <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d002      	beq.n	8004534 <HAL_SPI_Transmit+0xfa>
 800452e:	8afb      	ldrh	r3, [r7, #22]
 8004530:	2b01      	cmp	r3, #1
 8004532:	d13e      	bne.n	80045b2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004538:	881a      	ldrh	r2, [r3, #0]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004544:	1c9a      	adds	r2, r3, #2
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800454e:	b29b      	uxth	r3, r3
 8004550:	3b01      	subs	r3, #1
 8004552:	b29a      	uxth	r2, r3
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004558:	e02b      	b.n	80045b2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	f003 0302 	and.w	r3, r3, #2
 8004564:	2b02      	cmp	r3, #2
 8004566:	d112      	bne.n	800458e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800456c:	881a      	ldrh	r2, [r3, #0]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004578:	1c9a      	adds	r2, r3, #2
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004582:	b29b      	uxth	r3, r3
 8004584:	3b01      	subs	r3, #1
 8004586:	b29a      	uxth	r2, r3
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800458c:	e011      	b.n	80045b2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800458e:	f7fd fdbf 	bl	8002110 <HAL_GetTick>
 8004592:	4602      	mov	r2, r0
 8004594:	69bb      	ldr	r3, [r7, #24]
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	683a      	ldr	r2, [r7, #0]
 800459a:	429a      	cmp	r2, r3
 800459c:	d803      	bhi.n	80045a6 <HAL_SPI_Transmit+0x16c>
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045a4:	d102      	bne.n	80045ac <HAL_SPI_Transmit+0x172>
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d102      	bne.n	80045b2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80045ac:	2303      	movs	r3, #3
 80045ae:	77fb      	strb	r3, [r7, #31]
          goto error;
 80045b0:	e0a4      	b.n	80046fc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d1ce      	bne.n	800455a <HAL_SPI_Transmit+0x120>
 80045bc:	e07c      	b.n	80046b8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d002      	beq.n	80045cc <HAL_SPI_Transmit+0x192>
 80045c6:	8afb      	ldrh	r3, [r7, #22]
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d170      	bne.n	80046ae <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d912      	bls.n	80045fc <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045da:	881a      	ldrh	r2, [r3, #0]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e6:	1c9a      	adds	r2, r3, #2
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	3b02      	subs	r3, #2
 80045f4:	b29a      	uxth	r2, r3
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80045fa:	e058      	b.n	80046ae <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	330c      	adds	r3, #12
 8004606:	7812      	ldrb	r2, [r2, #0]
 8004608:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800460e:	1c5a      	adds	r2, r3, #1
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004618:	b29b      	uxth	r3, r3
 800461a:	3b01      	subs	r3, #1
 800461c:	b29a      	uxth	r2, r3
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004622:	e044      	b.n	80046ae <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	f003 0302 	and.w	r3, r3, #2
 800462e:	2b02      	cmp	r3, #2
 8004630:	d12b      	bne.n	800468a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004636:	b29b      	uxth	r3, r3
 8004638:	2b01      	cmp	r3, #1
 800463a:	d912      	bls.n	8004662 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004640:	881a      	ldrh	r2, [r3, #0]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800464c:	1c9a      	adds	r2, r3, #2
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004656:	b29b      	uxth	r3, r3
 8004658:	3b02      	subs	r3, #2
 800465a:	b29a      	uxth	r2, r3
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004660:	e025      	b.n	80046ae <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	330c      	adds	r3, #12
 800466c:	7812      	ldrb	r2, [r2, #0]
 800466e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004674:	1c5a      	adds	r2, r3, #1
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800467e:	b29b      	uxth	r3, r3
 8004680:	3b01      	subs	r3, #1
 8004682:	b29a      	uxth	r2, r3
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004688:	e011      	b.n	80046ae <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800468a:	f7fd fd41 	bl	8002110 <HAL_GetTick>
 800468e:	4602      	mov	r2, r0
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	683a      	ldr	r2, [r7, #0]
 8004696:	429a      	cmp	r2, r3
 8004698:	d803      	bhi.n	80046a2 <HAL_SPI_Transmit+0x268>
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046a0:	d102      	bne.n	80046a8 <HAL_SPI_Transmit+0x26e>
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d102      	bne.n	80046ae <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80046ac:	e026      	b.n	80046fc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d1b5      	bne.n	8004624 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80046b8:	69ba      	ldr	r2, [r7, #24]
 80046ba:	6839      	ldr	r1, [r7, #0]
 80046bc:	68f8      	ldr	r0, [r7, #12]
 80046be:	f000 fcf1 	bl	80050a4 <SPI_EndRxTxTransaction>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d002      	beq.n	80046ce <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2220      	movs	r2, #32
 80046cc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d10a      	bne.n	80046ec <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80046d6:	2300      	movs	r3, #0
 80046d8:	613b      	str	r3, [r7, #16]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	613b      	str	r3, [r7, #16]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	613b      	str	r3, [r7, #16]
 80046ea:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d002      	beq.n	80046fa <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	77fb      	strb	r3, [r7, #31]
 80046f8:	e000      	b.n	80046fc <HAL_SPI_Transmit+0x2c2>
  }

error:
 80046fa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2200      	movs	r2, #0
 8004708:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800470c:	7ffb      	ldrb	r3, [r7, #31]
}
 800470e:	4618      	mov	r0, r3
 8004710:	3720      	adds	r7, #32
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}

08004716 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004716:	b580      	push	{r7, lr}
 8004718:	b088      	sub	sp, #32
 800471a:	af02      	add	r7, sp, #8
 800471c:	60f8      	str	r0, [r7, #12]
 800471e:	60b9      	str	r1, [r7, #8]
 8004720:	603b      	str	r3, [r7, #0]
 8004722:	4613      	mov	r3, r2
 8004724:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004726:	2300      	movs	r3, #0
 8004728:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004732:	d112      	bne.n	800475a <HAL_SPI_Receive+0x44>
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d10e      	bne.n	800475a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2204      	movs	r2, #4
 8004740:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004744:	88fa      	ldrh	r2, [r7, #6]
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	9300      	str	r3, [sp, #0]
 800474a:	4613      	mov	r3, r2
 800474c:	68ba      	ldr	r2, [r7, #8]
 800474e:	68b9      	ldr	r1, [r7, #8]
 8004750:	68f8      	ldr	r0, [r7, #12]
 8004752:	f000 f910 	bl	8004976 <HAL_SPI_TransmitReceive>
 8004756:	4603      	mov	r3, r0
 8004758:	e109      	b.n	800496e <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004760:	2b01      	cmp	r3, #1
 8004762:	d101      	bne.n	8004768 <HAL_SPI_Receive+0x52>
 8004764:	2302      	movs	r3, #2
 8004766:	e102      	b.n	800496e <HAL_SPI_Receive+0x258>
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004770:	f7fd fcce 	bl	8002110 <HAL_GetTick>
 8004774:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800477c:	b2db      	uxtb	r3, r3
 800477e:	2b01      	cmp	r3, #1
 8004780:	d002      	beq.n	8004788 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004782:	2302      	movs	r3, #2
 8004784:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004786:	e0e9      	b.n	800495c <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d002      	beq.n	8004794 <HAL_SPI_Receive+0x7e>
 800478e:	88fb      	ldrh	r3, [r7, #6]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d102      	bne.n	800479a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004798:	e0e0      	b.n	800495c <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2204      	movs	r2, #4
 800479e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2200      	movs	r2, #0
 80047a6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	68ba      	ldr	r2, [r7, #8]
 80047ac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	88fa      	ldrh	r2, [r7, #6]
 80047b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	88fa      	ldrh	r2, [r7, #6]
 80047ba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2200      	movs	r2, #0
 80047c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2200      	movs	r2, #0
 80047c8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2200      	movs	r2, #0
 80047ce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2200      	movs	r2, #0
 80047d4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2200      	movs	r2, #0
 80047da:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80047e4:	d908      	bls.n	80047f8 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	685a      	ldr	r2, [r3, #4]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80047f4:	605a      	str	r2, [r3, #4]
 80047f6:	e007      	b.n	8004808 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	685a      	ldr	r2, [r3, #4]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004806:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004810:	d10f      	bne.n	8004832 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004820:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004830:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800483c:	2b40      	cmp	r3, #64	; 0x40
 800483e:	d007      	beq.n	8004850 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800484e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004858:	d867      	bhi.n	800492a <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800485a:	e030      	b.n	80048be <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f003 0301 	and.w	r3, r3, #1
 8004866:	2b01      	cmp	r3, #1
 8004868:	d117      	bne.n	800489a <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f103 020c 	add.w	r2, r3, #12
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004876:	7812      	ldrb	r2, [r2, #0]
 8004878:	b2d2      	uxtb	r2, r2
 800487a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004880:	1c5a      	adds	r2, r3, #1
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800488c:	b29b      	uxth	r3, r3
 800488e:	3b01      	subs	r3, #1
 8004890:	b29a      	uxth	r2, r3
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004898:	e011      	b.n	80048be <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800489a:	f7fd fc39 	bl	8002110 <HAL_GetTick>
 800489e:	4602      	mov	r2, r0
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	683a      	ldr	r2, [r7, #0]
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d803      	bhi.n	80048b2 <HAL_SPI_Receive+0x19c>
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048b0:	d102      	bne.n	80048b8 <HAL_SPI_Receive+0x1a2>
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d102      	bne.n	80048be <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80048b8:	2303      	movs	r3, #3
 80048ba:	75fb      	strb	r3, [r7, #23]
          goto error;
 80048bc:	e04e      	b.n	800495c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1c8      	bne.n	800485c <HAL_SPI_Receive+0x146>
 80048ca:	e034      	b.n	8004936 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	f003 0301 	and.w	r3, r3, #1
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d115      	bne.n	8004906 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	68da      	ldr	r2, [r3, #12]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e4:	b292      	uxth	r2, r2
 80048e6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ec:	1c9a      	adds	r2, r3, #2
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	3b01      	subs	r3, #1
 80048fc:	b29a      	uxth	r2, r3
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004904:	e011      	b.n	800492a <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004906:	f7fd fc03 	bl	8002110 <HAL_GetTick>
 800490a:	4602      	mov	r2, r0
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	1ad3      	subs	r3, r2, r3
 8004910:	683a      	ldr	r2, [r7, #0]
 8004912:	429a      	cmp	r2, r3
 8004914:	d803      	bhi.n	800491e <HAL_SPI_Receive+0x208>
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800491c:	d102      	bne.n	8004924 <HAL_SPI_Receive+0x20e>
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d102      	bne.n	800492a <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8004924:	2303      	movs	r3, #3
 8004926:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004928:	e018      	b.n	800495c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004930:	b29b      	uxth	r3, r3
 8004932:	2b00      	cmp	r3, #0
 8004934:	d1ca      	bne.n	80048cc <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004936:	693a      	ldr	r2, [r7, #16]
 8004938:	6839      	ldr	r1, [r7, #0]
 800493a:	68f8      	ldr	r0, [r7, #12]
 800493c:	f000 fb5a 	bl	8004ff4 <SPI_EndRxTransaction>
 8004940:	4603      	mov	r3, r0
 8004942:	2b00      	cmp	r3, #0
 8004944:	d002      	beq.n	800494c <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2220      	movs	r2, #32
 800494a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004950:	2b00      	cmp	r3, #0
 8004952:	d002      	beq.n	800495a <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	75fb      	strb	r3, [r7, #23]
 8004958:	e000      	b.n	800495c <HAL_SPI_Receive+0x246>
  }

error :
 800495a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800496c:	7dfb      	ldrb	r3, [r7, #23]
}
 800496e:	4618      	mov	r0, r3
 8004970:	3718      	adds	r7, #24
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}

08004976 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004976:	b580      	push	{r7, lr}
 8004978:	b08a      	sub	sp, #40	; 0x28
 800497a:	af00      	add	r7, sp, #0
 800497c:	60f8      	str	r0, [r7, #12]
 800497e:	60b9      	str	r1, [r7, #8]
 8004980:	607a      	str	r2, [r7, #4]
 8004982:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004984:	2301      	movs	r3, #1
 8004986:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004988:	2300      	movs	r3, #0
 800498a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004994:	2b01      	cmp	r3, #1
 8004996:	d101      	bne.n	800499c <HAL_SPI_TransmitReceive+0x26>
 8004998:	2302      	movs	r3, #2
 800499a:	e1fb      	b.n	8004d94 <HAL_SPI_TransmitReceive+0x41e>
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049a4:	f7fd fbb4 	bl	8002110 <HAL_GetTick>
 80049a8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80049b0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80049b8:	887b      	ldrh	r3, [r7, #2]
 80049ba:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80049bc:	887b      	ldrh	r3, [r7, #2]
 80049be:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80049c0:	7efb      	ldrb	r3, [r7, #27]
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d00e      	beq.n	80049e4 <HAL_SPI_TransmitReceive+0x6e>
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049cc:	d106      	bne.n	80049dc <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d102      	bne.n	80049dc <HAL_SPI_TransmitReceive+0x66>
 80049d6:	7efb      	ldrb	r3, [r7, #27]
 80049d8:	2b04      	cmp	r3, #4
 80049da:	d003      	beq.n	80049e4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80049dc:	2302      	movs	r3, #2
 80049de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80049e2:	e1cd      	b.n	8004d80 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d005      	beq.n	80049f6 <HAL_SPI_TransmitReceive+0x80>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d002      	beq.n	80049f6 <HAL_SPI_TransmitReceive+0x80>
 80049f0:	887b      	ldrh	r3, [r7, #2]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d103      	bne.n	80049fe <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80049fc:	e1c0      	b.n	8004d80 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	2b04      	cmp	r3, #4
 8004a08:	d003      	beq.n	8004a12 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2205      	movs	r2, #5
 8004a0e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2200      	movs	r2, #0
 8004a16:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	887a      	ldrh	r2, [r7, #2]
 8004a22:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	887a      	ldrh	r2, [r7, #2]
 8004a2a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	68ba      	ldr	r2, [r7, #8]
 8004a32:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	887a      	ldrh	r2, [r7, #2]
 8004a38:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	887a      	ldrh	r2, [r7, #2]
 8004a3e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2200      	movs	r2, #0
 8004a44:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a54:	d802      	bhi.n	8004a5c <HAL_SPI_TransmitReceive+0xe6>
 8004a56:	8a3b      	ldrh	r3, [r7, #16]
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d908      	bls.n	8004a6e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	685a      	ldr	r2, [r3, #4]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004a6a:	605a      	str	r2, [r3, #4]
 8004a6c:	e007      	b.n	8004a7e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	685a      	ldr	r2, [r3, #4]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a7c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a88:	2b40      	cmp	r3, #64	; 0x40
 8004a8a:	d007      	beq.n	8004a9c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a9a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004aa4:	d97c      	bls.n	8004ba0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d002      	beq.n	8004ab4 <HAL_SPI_TransmitReceive+0x13e>
 8004aae:	8a7b      	ldrh	r3, [r7, #18]
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d169      	bne.n	8004b88 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab8:	881a      	ldrh	r2, [r3, #0]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac4:	1c9a      	adds	r2, r3, #2
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	3b01      	subs	r3, #1
 8004ad2:	b29a      	uxth	r2, r3
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ad8:	e056      	b.n	8004b88 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	f003 0302 	and.w	r3, r3, #2
 8004ae4:	2b02      	cmp	r3, #2
 8004ae6:	d11b      	bne.n	8004b20 <HAL_SPI_TransmitReceive+0x1aa>
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d016      	beq.n	8004b20 <HAL_SPI_TransmitReceive+0x1aa>
 8004af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d113      	bne.n	8004b20 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004afc:	881a      	ldrh	r2, [r3, #0]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b08:	1c9a      	adds	r2, r3, #2
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	3b01      	subs	r3, #1
 8004b16:	b29a      	uxth	r2, r3
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	f003 0301 	and.w	r3, r3, #1
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d11c      	bne.n	8004b68 <HAL_SPI_TransmitReceive+0x1f2>
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d016      	beq.n	8004b68 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	68da      	ldr	r2, [r3, #12]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b44:	b292      	uxth	r2, r2
 8004b46:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4c:	1c9a      	adds	r2, r3, #2
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	3b01      	subs	r3, #1
 8004b5c:	b29a      	uxth	r2, r3
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004b64:	2301      	movs	r3, #1
 8004b66:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004b68:	f7fd fad2 	bl	8002110 <HAL_GetTick>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	69fb      	ldr	r3, [r7, #28]
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d807      	bhi.n	8004b88 <HAL_SPI_TransmitReceive+0x212>
 8004b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b7e:	d003      	beq.n	8004b88 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004b80:	2303      	movs	r3, #3
 8004b82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004b86:	e0fb      	b.n	8004d80 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d1a3      	bne.n	8004ada <HAL_SPI_TransmitReceive+0x164>
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d19d      	bne.n	8004ada <HAL_SPI_TransmitReceive+0x164>
 8004b9e:	e0df      	b.n	8004d60 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d003      	beq.n	8004bb0 <HAL_SPI_TransmitReceive+0x23a>
 8004ba8:	8a7b      	ldrh	r3, [r7, #18]
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	f040 80cb 	bne.w	8004d46 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d912      	bls.n	8004be0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bbe:	881a      	ldrh	r2, [r3, #0]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bca:	1c9a      	adds	r2, r3, #2
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	3b02      	subs	r3, #2
 8004bd8:	b29a      	uxth	r2, r3
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004bde:	e0b2      	b.n	8004d46 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	330c      	adds	r3, #12
 8004bea:	7812      	ldrb	r2, [r2, #0]
 8004bec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf2:	1c5a      	adds	r2, r3, #1
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	3b01      	subs	r3, #1
 8004c00:	b29a      	uxth	r2, r3
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c06:	e09e      	b.n	8004d46 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	f003 0302 	and.w	r3, r3, #2
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d134      	bne.n	8004c80 <HAL_SPI_TransmitReceive+0x30a>
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d02f      	beq.n	8004c80 <HAL_SPI_TransmitReceive+0x30a>
 8004c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d12c      	bne.n	8004c80 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d912      	bls.n	8004c56 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c34:	881a      	ldrh	r2, [r3, #0]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c40:	1c9a      	adds	r2, r3, #2
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	3b02      	subs	r3, #2
 8004c4e:	b29a      	uxth	r2, r3
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c54:	e012      	b.n	8004c7c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	330c      	adds	r3, #12
 8004c60:	7812      	ldrb	r2, [r2, #0]
 8004c62:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c68:	1c5a      	adds	r2, r3, #1
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	3b01      	subs	r3, #1
 8004c76:	b29a      	uxth	r2, r3
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	f003 0301 	and.w	r3, r3, #1
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d148      	bne.n	8004d20 <HAL_SPI_TransmitReceive+0x3aa>
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d042      	beq.n	8004d20 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d923      	bls.n	8004cee <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68da      	ldr	r2, [r3, #12]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb0:	b292      	uxth	r2, r2
 8004cb2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb8:	1c9a      	adds	r2, r3, #2
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	3b02      	subs	r3, #2
 8004cc8:	b29a      	uxth	r2, r3
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d81f      	bhi.n	8004d1c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	685a      	ldr	r2, [r3, #4]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004cea:	605a      	str	r2, [r3, #4]
 8004cec:	e016      	b.n	8004d1c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f103 020c 	add.w	r2, r3, #12
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfa:	7812      	ldrb	r2, [r2, #0]
 8004cfc:	b2d2      	uxtb	r2, r2
 8004cfe:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d04:	1c5a      	adds	r2, r3, #1
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	3b01      	subs	r3, #1
 8004d14:	b29a      	uxth	r2, r3
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004d20:	f7fd f9f6 	bl	8002110 <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	69fb      	ldr	r3, [r7, #28]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d803      	bhi.n	8004d38 <HAL_SPI_TransmitReceive+0x3c2>
 8004d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d36:	d102      	bne.n	8004d3e <HAL_SPI_TransmitReceive+0x3c8>
 8004d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d103      	bne.n	8004d46 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004d3e:	2303      	movs	r3, #3
 8004d40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004d44:	e01c      	b.n	8004d80 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	f47f af5b 	bne.w	8004c08 <HAL_SPI_TransmitReceive+0x292>
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	f47f af54 	bne.w	8004c08 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d60:	69fa      	ldr	r2, [r7, #28]
 8004d62:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d64:	68f8      	ldr	r0, [r7, #12]
 8004d66:	f000 f99d 	bl	80050a4 <SPI_EndRxTxTransaction>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d006      	beq.n	8004d7e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2220      	movs	r2, #32
 8004d7a:	661a      	str	r2, [r3, #96]	; 0x60
 8004d7c:	e000      	b.n	8004d80 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004d7e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004d90:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3728      	adds	r7, #40	; 0x28
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004daa:	b2db      	uxtb	r3, r3
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr

08004db8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b088      	sub	sp, #32
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	60f8      	str	r0, [r7, #12]
 8004dc0:	60b9      	str	r1, [r7, #8]
 8004dc2:	603b      	str	r3, [r7, #0]
 8004dc4:	4613      	mov	r3, r2
 8004dc6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004dc8:	f7fd f9a2 	bl	8002110 <HAL_GetTick>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd0:	1a9b      	subs	r3, r3, r2
 8004dd2:	683a      	ldr	r2, [r7, #0]
 8004dd4:	4413      	add	r3, r2
 8004dd6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004dd8:	f7fd f99a 	bl	8002110 <HAL_GetTick>
 8004ddc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004dde:	4b39      	ldr	r3, [pc, #228]	; (8004ec4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	015b      	lsls	r3, r3, #5
 8004de4:	0d1b      	lsrs	r3, r3, #20
 8004de6:	69fa      	ldr	r2, [r7, #28]
 8004de8:	fb02 f303 	mul.w	r3, r2, r3
 8004dec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004dee:	e054      	b.n	8004e9a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004df6:	d050      	beq.n	8004e9a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004df8:	f7fd f98a 	bl	8002110 <HAL_GetTick>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	69fa      	ldr	r2, [r7, #28]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d902      	bls.n	8004e0e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d13d      	bne.n	8004e8a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	685a      	ldr	r2, [r3, #4]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004e1c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e26:	d111      	bne.n	8004e4c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e30:	d004      	beq.n	8004e3c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e3a:	d107      	bne.n	8004e4c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e4a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e54:	d10f      	bne.n	8004e76 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e64:	601a      	str	r2, [r3, #0]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e74:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2201      	movs	r2, #1
 8004e7a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2200      	movs	r2, #0
 8004e82:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004e86:	2303      	movs	r3, #3
 8004e88:	e017      	b.n	8004eba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d101      	bne.n	8004e94 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004e90:	2300      	movs	r3, #0
 8004e92:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	3b01      	subs	r3, #1
 8004e98:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	689a      	ldr	r2, [r3, #8]
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	68ba      	ldr	r2, [r7, #8]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	bf0c      	ite	eq
 8004eaa:	2301      	moveq	r3, #1
 8004eac:	2300      	movne	r3, #0
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	79fb      	ldrb	r3, [r7, #7]
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d19b      	bne.n	8004df0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3720      	adds	r7, #32
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	20000004 	.word	0x20000004

08004ec8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b08a      	sub	sp, #40	; 0x28
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	60b9      	str	r1, [r7, #8]
 8004ed2:	607a      	str	r2, [r7, #4]
 8004ed4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004eda:	f7fd f919 	bl	8002110 <HAL_GetTick>
 8004ede:	4602      	mov	r2, r0
 8004ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee2:	1a9b      	subs	r3, r3, r2
 8004ee4:	683a      	ldr	r2, [r7, #0]
 8004ee6:	4413      	add	r3, r2
 8004ee8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004eea:	f7fd f911 	bl	8002110 <HAL_GetTick>
 8004eee:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	330c      	adds	r3, #12
 8004ef6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004ef8:	4b3d      	ldr	r3, [pc, #244]	; (8004ff0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	4613      	mov	r3, r2
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	4413      	add	r3, r2
 8004f02:	00da      	lsls	r2, r3, #3
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	0d1b      	lsrs	r3, r3, #20
 8004f08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f0a:	fb02 f303 	mul.w	r3, r2, r3
 8004f0e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004f10:	e060      	b.n	8004fd4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004f18:	d107      	bne.n	8004f2a <SPI_WaitFifoStateUntilTimeout+0x62>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d104      	bne.n	8004f2a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004f20:	69fb      	ldr	r3, [r7, #28]
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004f28:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f30:	d050      	beq.n	8004fd4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f32:	f7fd f8ed 	bl	8002110 <HAL_GetTick>
 8004f36:	4602      	mov	r2, r0
 8004f38:	6a3b      	ldr	r3, [r7, #32]
 8004f3a:	1ad3      	subs	r3, r2, r3
 8004f3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d902      	bls.n	8004f48 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d13d      	bne.n	8004fc4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	685a      	ldr	r2, [r3, #4]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f56:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f60:	d111      	bne.n	8004f86 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f6a:	d004      	beq.n	8004f76 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f74:	d107      	bne.n	8004f86 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f84:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f8e:	d10f      	bne.n	8004fb0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f9e:	601a      	str	r2, [r3, #0]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004fae:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004fc0:	2303      	movs	r3, #3
 8004fc2:	e010      	b.n	8004fe6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004fc4:	69bb      	ldr	r3, [r7, #24]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d101      	bne.n	8004fce <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	3b01      	subs	r3, #1
 8004fd2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	689a      	ldr	r2, [r3, #8]
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	4013      	ands	r3, r2
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d196      	bne.n	8004f12 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3728      	adds	r7, #40	; 0x28
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	bf00      	nop
 8004ff0:	20000004 	.word	0x20000004

08004ff4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b086      	sub	sp, #24
 8004ff8:	af02      	add	r7, sp, #8
 8004ffa:	60f8      	str	r0, [r7, #12]
 8004ffc:	60b9      	str	r1, [r7, #8]
 8004ffe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005008:	d111      	bne.n	800502e <SPI_EndRxTransaction+0x3a>
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005012:	d004      	beq.n	800501e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800501c:	d107      	bne.n	800502e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800502c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	9300      	str	r3, [sp, #0]
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	2200      	movs	r2, #0
 8005036:	2180      	movs	r1, #128	; 0x80
 8005038:	68f8      	ldr	r0, [r7, #12]
 800503a:	f7ff febd 	bl	8004db8 <SPI_WaitFlagStateUntilTimeout>
 800503e:	4603      	mov	r3, r0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d007      	beq.n	8005054 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005048:	f043 0220 	orr.w	r2, r3, #32
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005050:	2303      	movs	r3, #3
 8005052:	e023      	b.n	800509c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800505c:	d11d      	bne.n	800509a <SPI_EndRxTransaction+0xa6>
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005066:	d004      	beq.n	8005072 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005070:	d113      	bne.n	800509a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	9300      	str	r3, [sp, #0]
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	2200      	movs	r2, #0
 800507a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800507e:	68f8      	ldr	r0, [r7, #12]
 8005080:	f7ff ff22 	bl	8004ec8 <SPI_WaitFifoStateUntilTimeout>
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d007      	beq.n	800509a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800508e:	f043 0220 	orr.w	r2, r3, #32
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	e000      	b.n	800509c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800509a:	2300      	movs	r3, #0
}
 800509c:	4618      	mov	r0, r3
 800509e:	3710      	adds	r7, #16
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}

080050a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b086      	sub	sp, #24
 80050a8:	af02      	add	r7, sp, #8
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	9300      	str	r3, [sp, #0]
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80050bc:	68f8      	ldr	r0, [r7, #12]
 80050be:	f7ff ff03 	bl	8004ec8 <SPI_WaitFifoStateUntilTimeout>
 80050c2:	4603      	mov	r3, r0
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d007      	beq.n	80050d8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050cc:	f043 0220 	orr.w	r2, r3, #32
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80050d4:	2303      	movs	r3, #3
 80050d6:	e027      	b.n	8005128 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	9300      	str	r3, [sp, #0]
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	2200      	movs	r2, #0
 80050e0:	2180      	movs	r1, #128	; 0x80
 80050e2:	68f8      	ldr	r0, [r7, #12]
 80050e4:	f7ff fe68 	bl	8004db8 <SPI_WaitFlagStateUntilTimeout>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d007      	beq.n	80050fe <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050f2:	f043 0220 	orr.w	r2, r3, #32
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e014      	b.n	8005128 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	9300      	str	r3, [sp, #0]
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	2200      	movs	r2, #0
 8005106:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800510a:	68f8      	ldr	r0, [r7, #12]
 800510c:	f7ff fedc 	bl	8004ec8 <SPI_WaitFifoStateUntilTimeout>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d007      	beq.n	8005126 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800511a:	f043 0220 	orr.w	r2, r3, #32
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	e000      	b.n	8005128 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005126:	2300      	movs	r3, #0
}
 8005128:	4618      	mov	r0, r3
 800512a:	3710      	adds	r7, #16
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}

08005130 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b082      	sub	sp, #8
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d101      	bne.n	8005142 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e049      	b.n	80051d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005148:	b2db      	uxtb	r3, r3
 800514a:	2b00      	cmp	r3, #0
 800514c:	d106      	bne.n	800515c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f7fc fdac 	bl	8001cb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2202      	movs	r2, #2
 8005160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	3304      	adds	r3, #4
 800516c:	4619      	mov	r1, r3
 800516e:	4610      	mov	r0, r2
 8005170:	f000 fa50 	bl	8005614 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2201      	movs	r2, #1
 80051b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2201      	movs	r2, #1
 80051b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2201      	movs	r2, #1
 80051c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051d4:	2300      	movs	r3, #0
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3708      	adds	r7, #8
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}

080051de <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051de:	b580      	push	{r7, lr}
 80051e0:	b082      	sub	sp, #8
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	691b      	ldr	r3, [r3, #16]
 80051ec:	f003 0302 	and.w	r3, r3, #2
 80051f0:	2b02      	cmp	r3, #2
 80051f2:	d122      	bne.n	800523a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	68db      	ldr	r3, [r3, #12]
 80051fa:	f003 0302 	and.w	r3, r3, #2
 80051fe:	2b02      	cmp	r3, #2
 8005200:	d11b      	bne.n	800523a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f06f 0202 	mvn.w	r2, #2
 800520a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	699b      	ldr	r3, [r3, #24]
 8005218:	f003 0303 	and.w	r3, r3, #3
 800521c:	2b00      	cmp	r3, #0
 800521e:	d003      	beq.n	8005228 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f000 f9d8 	bl	80055d6 <HAL_TIM_IC_CaptureCallback>
 8005226:	e005      	b.n	8005234 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f000 f9ca 	bl	80055c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 f9db 	bl	80055ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2200      	movs	r2, #0
 8005238:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	691b      	ldr	r3, [r3, #16]
 8005240:	f003 0304 	and.w	r3, r3, #4
 8005244:	2b04      	cmp	r3, #4
 8005246:	d122      	bne.n	800528e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	f003 0304 	and.w	r3, r3, #4
 8005252:	2b04      	cmp	r3, #4
 8005254:	d11b      	bne.n	800528e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f06f 0204 	mvn.w	r2, #4
 800525e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2202      	movs	r2, #2
 8005264:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	699b      	ldr	r3, [r3, #24]
 800526c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005270:	2b00      	cmp	r3, #0
 8005272:	d003      	beq.n	800527c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f000 f9ae 	bl	80055d6 <HAL_TIM_IC_CaptureCallback>
 800527a:	e005      	b.n	8005288 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f000 f9a0 	bl	80055c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 f9b1 	bl	80055ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	691b      	ldr	r3, [r3, #16]
 8005294:	f003 0308 	and.w	r3, r3, #8
 8005298:	2b08      	cmp	r3, #8
 800529a:	d122      	bne.n	80052e2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	f003 0308 	and.w	r3, r3, #8
 80052a6:	2b08      	cmp	r3, #8
 80052a8:	d11b      	bne.n	80052e2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f06f 0208 	mvn.w	r2, #8
 80052b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2204      	movs	r2, #4
 80052b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	69db      	ldr	r3, [r3, #28]
 80052c0:	f003 0303 	and.w	r3, r3, #3
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d003      	beq.n	80052d0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f000 f984 	bl	80055d6 <HAL_TIM_IC_CaptureCallback>
 80052ce:	e005      	b.n	80052dc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f000 f976 	bl	80055c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f000 f987 	bl	80055ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	691b      	ldr	r3, [r3, #16]
 80052e8:	f003 0310 	and.w	r3, r3, #16
 80052ec:	2b10      	cmp	r3, #16
 80052ee:	d122      	bne.n	8005336 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	f003 0310 	and.w	r3, r3, #16
 80052fa:	2b10      	cmp	r3, #16
 80052fc:	d11b      	bne.n	8005336 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f06f 0210 	mvn.w	r2, #16
 8005306:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2208      	movs	r2, #8
 800530c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	69db      	ldr	r3, [r3, #28]
 8005314:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005318:	2b00      	cmp	r3, #0
 800531a:	d003      	beq.n	8005324 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f000 f95a 	bl	80055d6 <HAL_TIM_IC_CaptureCallback>
 8005322:	e005      	b.n	8005330 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f000 f94c 	bl	80055c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 f95d 	bl	80055ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	691b      	ldr	r3, [r3, #16]
 800533c:	f003 0301 	and.w	r3, r3, #1
 8005340:	2b01      	cmp	r3, #1
 8005342:	d10e      	bne.n	8005362 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	f003 0301 	and.w	r3, r3, #1
 800534e:	2b01      	cmp	r3, #1
 8005350:	d107      	bne.n	8005362 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f06f 0201 	mvn.w	r2, #1
 800535a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f000 f926 	bl	80055ae <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	691b      	ldr	r3, [r3, #16]
 8005368:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800536c:	2b80      	cmp	r3, #128	; 0x80
 800536e:	d10e      	bne.n	800538e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800537a:	2b80      	cmp	r3, #128	; 0x80
 800537c:	d107      	bne.n	800538e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005386:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f000 fb09 	bl	80059a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	691b      	ldr	r3, [r3, #16]
 8005394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005398:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800539c:	d10e      	bne.n	80053bc <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053a8:	2b80      	cmp	r3, #128	; 0x80
 80053aa:	d107      	bne.n	80053bc <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80053b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f000 fafc 	bl	80059b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053c6:	2b40      	cmp	r3, #64	; 0x40
 80053c8:	d10e      	bne.n	80053e8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053d4:	2b40      	cmp	r3, #64	; 0x40
 80053d6:	d107      	bne.n	80053e8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80053e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 f90b 	bl	80055fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	691b      	ldr	r3, [r3, #16]
 80053ee:	f003 0320 	and.w	r3, r3, #32
 80053f2:	2b20      	cmp	r3, #32
 80053f4:	d10e      	bne.n	8005414 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	f003 0320 	and.w	r3, r3, #32
 8005400:	2b20      	cmp	r3, #32
 8005402:	d107      	bne.n	8005414 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f06f 0220 	mvn.w	r2, #32
 800540c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f000 fabc 	bl	800598c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005414:	bf00      	nop
 8005416:	3708      	adds	r7, #8
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}

0800541c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b084      	sub	sp, #16
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005426:	2300      	movs	r3, #0
 8005428:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005430:	2b01      	cmp	r3, #1
 8005432:	d101      	bne.n	8005438 <HAL_TIM_ConfigClockSource+0x1c>
 8005434:	2302      	movs	r3, #2
 8005436:	e0b6      	b.n	80055a6 <HAL_TIM_ConfigClockSource+0x18a>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2202      	movs	r2, #2
 8005444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005456:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800545a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005462:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	68ba      	ldr	r2, [r7, #8]
 800546a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005474:	d03e      	beq.n	80054f4 <HAL_TIM_ConfigClockSource+0xd8>
 8005476:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800547a:	f200 8087 	bhi.w	800558c <HAL_TIM_ConfigClockSource+0x170>
 800547e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005482:	f000 8086 	beq.w	8005592 <HAL_TIM_ConfigClockSource+0x176>
 8005486:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800548a:	d87f      	bhi.n	800558c <HAL_TIM_ConfigClockSource+0x170>
 800548c:	2b70      	cmp	r3, #112	; 0x70
 800548e:	d01a      	beq.n	80054c6 <HAL_TIM_ConfigClockSource+0xaa>
 8005490:	2b70      	cmp	r3, #112	; 0x70
 8005492:	d87b      	bhi.n	800558c <HAL_TIM_ConfigClockSource+0x170>
 8005494:	2b60      	cmp	r3, #96	; 0x60
 8005496:	d050      	beq.n	800553a <HAL_TIM_ConfigClockSource+0x11e>
 8005498:	2b60      	cmp	r3, #96	; 0x60
 800549a:	d877      	bhi.n	800558c <HAL_TIM_ConfigClockSource+0x170>
 800549c:	2b50      	cmp	r3, #80	; 0x50
 800549e:	d03c      	beq.n	800551a <HAL_TIM_ConfigClockSource+0xfe>
 80054a0:	2b50      	cmp	r3, #80	; 0x50
 80054a2:	d873      	bhi.n	800558c <HAL_TIM_ConfigClockSource+0x170>
 80054a4:	2b40      	cmp	r3, #64	; 0x40
 80054a6:	d058      	beq.n	800555a <HAL_TIM_ConfigClockSource+0x13e>
 80054a8:	2b40      	cmp	r3, #64	; 0x40
 80054aa:	d86f      	bhi.n	800558c <HAL_TIM_ConfigClockSource+0x170>
 80054ac:	2b30      	cmp	r3, #48	; 0x30
 80054ae:	d064      	beq.n	800557a <HAL_TIM_ConfigClockSource+0x15e>
 80054b0:	2b30      	cmp	r3, #48	; 0x30
 80054b2:	d86b      	bhi.n	800558c <HAL_TIM_ConfigClockSource+0x170>
 80054b4:	2b20      	cmp	r3, #32
 80054b6:	d060      	beq.n	800557a <HAL_TIM_ConfigClockSource+0x15e>
 80054b8:	2b20      	cmp	r3, #32
 80054ba:	d867      	bhi.n	800558c <HAL_TIM_ConfigClockSource+0x170>
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d05c      	beq.n	800557a <HAL_TIM_ConfigClockSource+0x15e>
 80054c0:	2b10      	cmp	r3, #16
 80054c2:	d05a      	beq.n	800557a <HAL_TIM_ConfigClockSource+0x15e>
 80054c4:	e062      	b.n	800558c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6818      	ldr	r0, [r3, #0]
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	6899      	ldr	r1, [r3, #8]
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	685a      	ldr	r2, [r3, #4]
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	f000 f9b1 	bl	800583c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80054e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	68ba      	ldr	r2, [r7, #8]
 80054f0:	609a      	str	r2, [r3, #8]
      break;
 80054f2:	e04f      	b.n	8005594 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6818      	ldr	r0, [r3, #0]
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	6899      	ldr	r1, [r3, #8]
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	685a      	ldr	r2, [r3, #4]
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	f000 f99a 	bl	800583c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	689a      	ldr	r2, [r3, #8]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005516:	609a      	str	r2, [r3, #8]
      break;
 8005518:	e03c      	b.n	8005594 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6818      	ldr	r0, [r3, #0]
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	6859      	ldr	r1, [r3, #4]
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	461a      	mov	r2, r3
 8005528:	f000 f90e 	bl	8005748 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	2150      	movs	r1, #80	; 0x50
 8005532:	4618      	mov	r0, r3
 8005534:	f000 f967 	bl	8005806 <TIM_ITRx_SetConfig>
      break;
 8005538:	e02c      	b.n	8005594 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6818      	ldr	r0, [r3, #0]
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	6859      	ldr	r1, [r3, #4]
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	461a      	mov	r2, r3
 8005548:	f000 f92d 	bl	80057a6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	2160      	movs	r1, #96	; 0x60
 8005552:	4618      	mov	r0, r3
 8005554:	f000 f957 	bl	8005806 <TIM_ITRx_SetConfig>
      break;
 8005558:	e01c      	b.n	8005594 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6818      	ldr	r0, [r3, #0]
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	6859      	ldr	r1, [r3, #4]
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	461a      	mov	r2, r3
 8005568:	f000 f8ee 	bl	8005748 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	2140      	movs	r1, #64	; 0x40
 8005572:	4618      	mov	r0, r3
 8005574:	f000 f947 	bl	8005806 <TIM_ITRx_SetConfig>
      break;
 8005578:	e00c      	b.n	8005594 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4619      	mov	r1, r3
 8005584:	4610      	mov	r0, r2
 8005586:	f000 f93e 	bl	8005806 <TIM_ITRx_SetConfig>
      break;
 800558a:	e003      	b.n	8005594 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	73fb      	strb	r3, [r7, #15]
      break;
 8005590:	e000      	b.n	8005594 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005592:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80055a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3710      	adds	r7, #16
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}

080055ae <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055ae:	b480      	push	{r7}
 80055b0:	b083      	sub	sp, #12
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80055b6:	bf00      	nop
 80055b8:	370c      	adds	r7, #12
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr

080055c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055c2:	b480      	push	{r7}
 80055c4:	b083      	sub	sp, #12
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80055ca:	bf00      	nop
 80055cc:	370c      	adds	r7, #12
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr

080055d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80055d6:	b480      	push	{r7}
 80055d8:	b083      	sub	sp, #12
 80055da:	af00      	add	r7, sp, #0
 80055dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80055de:	bf00      	nop
 80055e0:	370c      	adds	r7, #12
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr

080055ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80055ea:	b480      	push	{r7}
 80055ec:	b083      	sub	sp, #12
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80055f2:	bf00      	nop
 80055f4:	370c      	adds	r7, #12
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr

080055fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80055fe:	b480      	push	{r7}
 8005600:	b083      	sub	sp, #12
 8005602:	af00      	add	r7, sp, #0
 8005604:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005606:	bf00      	nop
 8005608:	370c      	adds	r7, #12
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr
	...

08005614 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005614:	b480      	push	{r7}
 8005616:	b085      	sub	sp, #20
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	4a40      	ldr	r2, [pc, #256]	; (8005728 <TIM_Base_SetConfig+0x114>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d013      	beq.n	8005654 <TIM_Base_SetConfig+0x40>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005632:	d00f      	beq.n	8005654 <TIM_Base_SetConfig+0x40>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	4a3d      	ldr	r2, [pc, #244]	; (800572c <TIM_Base_SetConfig+0x118>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d00b      	beq.n	8005654 <TIM_Base_SetConfig+0x40>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	4a3c      	ldr	r2, [pc, #240]	; (8005730 <TIM_Base_SetConfig+0x11c>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d007      	beq.n	8005654 <TIM_Base_SetConfig+0x40>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	4a3b      	ldr	r2, [pc, #236]	; (8005734 <TIM_Base_SetConfig+0x120>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d003      	beq.n	8005654 <TIM_Base_SetConfig+0x40>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	4a3a      	ldr	r2, [pc, #232]	; (8005738 <TIM_Base_SetConfig+0x124>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d108      	bne.n	8005666 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800565a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	68fa      	ldr	r2, [r7, #12]
 8005662:	4313      	orrs	r3, r2
 8005664:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4a2f      	ldr	r2, [pc, #188]	; (8005728 <TIM_Base_SetConfig+0x114>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d01f      	beq.n	80056ae <TIM_Base_SetConfig+0x9a>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005674:	d01b      	beq.n	80056ae <TIM_Base_SetConfig+0x9a>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	4a2c      	ldr	r2, [pc, #176]	; (800572c <TIM_Base_SetConfig+0x118>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d017      	beq.n	80056ae <TIM_Base_SetConfig+0x9a>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4a2b      	ldr	r2, [pc, #172]	; (8005730 <TIM_Base_SetConfig+0x11c>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d013      	beq.n	80056ae <TIM_Base_SetConfig+0x9a>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4a2a      	ldr	r2, [pc, #168]	; (8005734 <TIM_Base_SetConfig+0x120>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d00f      	beq.n	80056ae <TIM_Base_SetConfig+0x9a>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4a29      	ldr	r2, [pc, #164]	; (8005738 <TIM_Base_SetConfig+0x124>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d00b      	beq.n	80056ae <TIM_Base_SetConfig+0x9a>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4a28      	ldr	r2, [pc, #160]	; (800573c <TIM_Base_SetConfig+0x128>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d007      	beq.n	80056ae <TIM_Base_SetConfig+0x9a>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4a27      	ldr	r2, [pc, #156]	; (8005740 <TIM_Base_SetConfig+0x12c>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d003      	beq.n	80056ae <TIM_Base_SetConfig+0x9a>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4a26      	ldr	r2, [pc, #152]	; (8005744 <TIM_Base_SetConfig+0x130>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d108      	bne.n	80056c0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	68fa      	ldr	r2, [r7, #12]
 80056bc:	4313      	orrs	r3, r2
 80056be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	695b      	ldr	r3, [r3, #20]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	68fa      	ldr	r2, [r7, #12]
 80056d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	689a      	ldr	r2, [r3, #8]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	4a10      	ldr	r2, [pc, #64]	; (8005728 <TIM_Base_SetConfig+0x114>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d00f      	beq.n	800570c <TIM_Base_SetConfig+0xf8>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	4a12      	ldr	r2, [pc, #72]	; (8005738 <TIM_Base_SetConfig+0x124>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d00b      	beq.n	800570c <TIM_Base_SetConfig+0xf8>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4a11      	ldr	r2, [pc, #68]	; (800573c <TIM_Base_SetConfig+0x128>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d007      	beq.n	800570c <TIM_Base_SetConfig+0xf8>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4a10      	ldr	r2, [pc, #64]	; (8005740 <TIM_Base_SetConfig+0x12c>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d003      	beq.n	800570c <TIM_Base_SetConfig+0xf8>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a0f      	ldr	r2, [pc, #60]	; (8005744 <TIM_Base_SetConfig+0x130>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d103      	bne.n	8005714 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	691a      	ldr	r2, [r3, #16]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	615a      	str	r2, [r3, #20]
}
 800571a:	bf00      	nop
 800571c:	3714      	adds	r7, #20
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr
 8005726:	bf00      	nop
 8005728:	40012c00 	.word	0x40012c00
 800572c:	40000400 	.word	0x40000400
 8005730:	40000800 	.word	0x40000800
 8005734:	40000c00 	.word	0x40000c00
 8005738:	40013400 	.word	0x40013400
 800573c:	40014000 	.word	0x40014000
 8005740:	40014400 	.word	0x40014400
 8005744:	40014800 	.word	0x40014800

08005748 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005748:	b480      	push	{r7}
 800574a:	b087      	sub	sp, #28
 800574c:	af00      	add	r7, sp, #0
 800574e:	60f8      	str	r0, [r7, #12]
 8005750:	60b9      	str	r1, [r7, #8]
 8005752:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	6a1b      	ldr	r3, [r3, #32]
 8005758:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6a1b      	ldr	r3, [r3, #32]
 800575e:	f023 0201 	bic.w	r2, r3, #1
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	699b      	ldr	r3, [r3, #24]
 800576a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005772:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	011b      	lsls	r3, r3, #4
 8005778:	693a      	ldr	r2, [r7, #16]
 800577a:	4313      	orrs	r3, r2
 800577c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	f023 030a 	bic.w	r3, r3, #10
 8005784:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005786:	697a      	ldr	r2, [r7, #20]
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	4313      	orrs	r3, r2
 800578c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	693a      	ldr	r2, [r7, #16]
 8005792:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	697a      	ldr	r2, [r7, #20]
 8005798:	621a      	str	r2, [r3, #32]
}
 800579a:	bf00      	nop
 800579c:	371c      	adds	r7, #28
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr

080057a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057a6:	b480      	push	{r7}
 80057a8:	b087      	sub	sp, #28
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	60f8      	str	r0, [r7, #12]
 80057ae:	60b9      	str	r1, [r7, #8]
 80057b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6a1b      	ldr	r3, [r3, #32]
 80057b6:	f023 0210 	bic.w	r2, r3, #16
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	699b      	ldr	r3, [r3, #24]
 80057c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	6a1b      	ldr	r3, [r3, #32]
 80057c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80057d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	031b      	lsls	r3, r3, #12
 80057d6:	697a      	ldr	r2, [r7, #20]
 80057d8:	4313      	orrs	r3, r2
 80057da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80057e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	011b      	lsls	r3, r3, #4
 80057e8:	693a      	ldr	r2, [r7, #16]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	697a      	ldr	r2, [r7, #20]
 80057f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	693a      	ldr	r2, [r7, #16]
 80057f8:	621a      	str	r2, [r3, #32]
}
 80057fa:	bf00      	nop
 80057fc:	371c      	adds	r7, #28
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr

08005806 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005806:	b480      	push	{r7}
 8005808:	b085      	sub	sp, #20
 800580a:	af00      	add	r7, sp, #0
 800580c:	6078      	str	r0, [r7, #4]
 800580e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800581c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800581e:	683a      	ldr	r2, [r7, #0]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	4313      	orrs	r3, r2
 8005824:	f043 0307 	orr.w	r3, r3, #7
 8005828:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	68fa      	ldr	r2, [r7, #12]
 800582e:	609a      	str	r2, [r3, #8]
}
 8005830:	bf00      	nop
 8005832:	3714      	adds	r7, #20
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr

0800583c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800583c:	b480      	push	{r7}
 800583e:	b087      	sub	sp, #28
 8005840:	af00      	add	r7, sp, #0
 8005842:	60f8      	str	r0, [r7, #12]
 8005844:	60b9      	str	r1, [r7, #8]
 8005846:	607a      	str	r2, [r7, #4]
 8005848:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005856:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	021a      	lsls	r2, r3, #8
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	431a      	orrs	r2, r3
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	4313      	orrs	r3, r2
 8005864:	697a      	ldr	r2, [r7, #20]
 8005866:	4313      	orrs	r3, r2
 8005868:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	697a      	ldr	r2, [r7, #20]
 800586e:	609a      	str	r2, [r3, #8]
}
 8005870:	bf00      	nop
 8005872:	371c      	adds	r7, #28
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr

0800587c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800587c:	b480      	push	{r7}
 800587e:	b085      	sub	sp, #20
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800588c:	2b01      	cmp	r3, #1
 800588e:	d101      	bne.n	8005894 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005890:	2302      	movs	r3, #2
 8005892:	e068      	b.n	8005966 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2202      	movs	r2, #2
 80058a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a2e      	ldr	r2, [pc, #184]	; (8005974 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d004      	beq.n	80058c8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a2d      	ldr	r2, [pc, #180]	; (8005978 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d108      	bne.n	80058da <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80058ce:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	68fa      	ldr	r2, [r7, #12]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058e0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	68fa      	ldr	r2, [r7, #12]
 80058e8:	4313      	orrs	r3, r2
 80058ea:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a1e      	ldr	r2, [pc, #120]	; (8005974 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d01d      	beq.n	800593a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005906:	d018      	beq.n	800593a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a1b      	ldr	r2, [pc, #108]	; (800597c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d013      	beq.n	800593a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a1a      	ldr	r2, [pc, #104]	; (8005980 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d00e      	beq.n	800593a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a18      	ldr	r2, [pc, #96]	; (8005984 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d009      	beq.n	800593a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a13      	ldr	r2, [pc, #76]	; (8005978 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d004      	beq.n	800593a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a14      	ldr	r2, [pc, #80]	; (8005988 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d10c      	bne.n	8005954 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005940:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	68ba      	ldr	r2, [r7, #8]
 8005948:	4313      	orrs	r3, r2
 800594a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	68ba      	ldr	r2, [r7, #8]
 8005952:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005964:	2300      	movs	r3, #0
}
 8005966:	4618      	mov	r0, r3
 8005968:	3714      	adds	r7, #20
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop
 8005974:	40012c00 	.word	0x40012c00
 8005978:	40013400 	.word	0x40013400
 800597c:	40000400 	.word	0x40000400
 8005980:	40000800 	.word	0x40000800
 8005984:	40000c00 	.word	0x40000c00
 8005988:	40014000 	.word	0x40014000

0800598c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800598c:	b480      	push	{r7}
 800598e:	b083      	sub	sp, #12
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005994:	bf00      	nop
 8005996:	370c      	adds	r7, #12
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr

080059a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b083      	sub	sp, #12
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059a8:	bf00      	nop
 80059aa:	370c      	adds	r7, #12
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr

080059b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b083      	sub	sp, #12
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80059bc:	bf00      	nop
 80059be:	370c      	adds	r7, #12
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr

080059c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b082      	sub	sp, #8
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d101      	bne.n	80059da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e040      	b.n	8005a5c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d106      	bne.n	80059f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f7fc f9e6 	bl	8001dbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2224      	movs	r2, #36	; 0x24
 80059f4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f022 0201 	bic.w	r2, r2, #1
 8005a04:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f000 fcbe 	bl	8006388 <UART_SetConfig>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d101      	bne.n	8005a16 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	e022      	b.n	8005a5c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d002      	beq.n	8005a24 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 ff6a 	bl	80068f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	685a      	ldr	r2, [r3, #4]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	689a      	ldr	r2, [r3, #8]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f042 0201 	orr.w	r2, r2, #1
 8005a52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f000 fff1 	bl	8006a3c <UART_CheckIdleState>
 8005a5a:	4603      	mov	r3, r0
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3708      	adds	r7, #8
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}

08005a64 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b08a      	sub	sp, #40	; 0x28
 8005a68:	af02      	add	r7, sp, #8
 8005a6a:	60f8      	str	r0, [r7, #12]
 8005a6c:	60b9      	str	r1, [r7, #8]
 8005a6e:	603b      	str	r3, [r7, #0]
 8005a70:	4613      	mov	r3, r2
 8005a72:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a78:	2b20      	cmp	r3, #32
 8005a7a:	f040 8082 	bne.w	8005b82 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d002      	beq.n	8005a8a <HAL_UART_Transmit+0x26>
 8005a84:	88fb      	ldrh	r3, [r7, #6]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d101      	bne.n	8005a8e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e07a      	b.n	8005b84 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d101      	bne.n	8005a9c <HAL_UART_Transmit+0x38>
 8005a98:	2302      	movs	r3, #2
 8005a9a:	e073      	b.n	8005b84 <HAL_UART_Transmit+0x120>
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2221      	movs	r2, #33	; 0x21
 8005ab0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ab2:	f7fc fb2d 	bl	8002110 <HAL_GetTick>
 8005ab6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	88fa      	ldrh	r2, [r7, #6]
 8005abc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	88fa      	ldrh	r2, [r7, #6]
 8005ac4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ad0:	d108      	bne.n	8005ae4 <HAL_UART_Transmit+0x80>
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d104      	bne.n	8005ae4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005ada:	2300      	movs	r3, #0
 8005adc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	61bb      	str	r3, [r7, #24]
 8005ae2:	e003      	b.n	8005aec <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2200      	movs	r2, #0
 8005af0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005af4:	e02d      	b.n	8005b52 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	9300      	str	r3, [sp, #0]
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	2200      	movs	r2, #0
 8005afe:	2180      	movs	r1, #128	; 0x80
 8005b00:	68f8      	ldr	r0, [r7, #12]
 8005b02:	f000 ffe4 	bl	8006ace <UART_WaitOnFlagUntilTimeout>
 8005b06:	4603      	mov	r3, r0
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d001      	beq.n	8005b10 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005b0c:	2303      	movs	r3, #3
 8005b0e:	e039      	b.n	8005b84 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005b10:	69fb      	ldr	r3, [r7, #28]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d10b      	bne.n	8005b2e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b16:	69bb      	ldr	r3, [r7, #24]
 8005b18:	881a      	ldrh	r2, [r3, #0]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b22:	b292      	uxth	r2, r2
 8005b24:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005b26:	69bb      	ldr	r3, [r7, #24]
 8005b28:	3302      	adds	r3, #2
 8005b2a:	61bb      	str	r3, [r7, #24]
 8005b2c:	e008      	b.n	8005b40 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b2e:	69fb      	ldr	r3, [r7, #28]
 8005b30:	781a      	ldrb	r2, [r3, #0]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	b292      	uxth	r2, r2
 8005b38:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005b3a:	69fb      	ldr	r3, [r7, #28]
 8005b3c:	3301      	adds	r3, #1
 8005b3e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	3b01      	subs	r3, #1
 8005b4a:	b29a      	uxth	r2, r3
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d1cb      	bne.n	8005af6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	9300      	str	r3, [sp, #0]
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	2200      	movs	r2, #0
 8005b66:	2140      	movs	r1, #64	; 0x40
 8005b68:	68f8      	ldr	r0, [r7, #12]
 8005b6a:	f000 ffb0 	bl	8006ace <UART_WaitOnFlagUntilTimeout>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d001      	beq.n	8005b78 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005b74:	2303      	movs	r3, #3
 8005b76:	e005      	b.n	8005b84 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2220      	movs	r2, #32
 8005b7c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	e000      	b.n	8005b84 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005b82:	2302      	movs	r3, #2
  }
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3720      	adds	r7, #32
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}

08005b8c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b08a      	sub	sp, #40	; 0x28
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	60b9      	str	r1, [r7, #8]
 8005b96:	4613      	mov	r3, r2
 8005b98:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b9e:	2b20      	cmp	r3, #32
 8005ba0:	d142      	bne.n	8005c28 <HAL_UART_Receive_DMA+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d002      	beq.n	8005bae <HAL_UART_Receive_DMA+0x22>
 8005ba8:	88fb      	ldrh	r3, [r7, #6]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d101      	bne.n	8005bb2 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e03b      	b.n	8005c2a <HAL_UART_Receive_DMA+0x9e>
    }

    __HAL_LOCK(huart);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d101      	bne.n	8005bc0 <HAL_UART_Receive_DMA+0x34>
 8005bbc:	2302      	movs	r3, #2
 8005bbe:	e034      	b.n	8005c2a <HAL_UART_Receive_DMA+0x9e>
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a18      	ldr	r2, [pc, #96]	; (8005c34 <HAL_UART_Receive_DMA+0xa8>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d01f      	beq.n	8005c18 <HAL_UART_Receive_DMA+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d018      	beq.n	8005c18 <HAL_UART_Receive_DMA+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	e853 3f00 	ldrex	r3, [r3]
 8005bf2:	613b      	str	r3, [r7, #16]
   return(result);
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005bfa:	627b      	str	r3, [r7, #36]	; 0x24
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	461a      	mov	r2, r3
 8005c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c04:	623b      	str	r3, [r7, #32]
 8005c06:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c08:	69f9      	ldr	r1, [r7, #28]
 8005c0a:	6a3a      	ldr	r2, [r7, #32]
 8005c0c:	e841 2300 	strex	r3, r2, [r1]
 8005c10:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c12:	69bb      	ldr	r3, [r7, #24]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d1e6      	bne.n	8005be6 <HAL_UART_Receive_DMA+0x5a>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005c18:	88fb      	ldrh	r3, [r7, #6]
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	68b9      	ldr	r1, [r7, #8]
 8005c1e:	68f8      	ldr	r0, [r7, #12]
 8005c20:	f001 f81a 	bl	8006c58 <UART_Start_Receive_DMA>
 8005c24:	4603      	mov	r3, r0
 8005c26:	e000      	b.n	8005c2a <HAL_UART_Receive_DMA+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005c28:	2302      	movs	r3, #2
  }
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3728      	adds	r7, #40	; 0x28
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	bf00      	nop
 8005c34:	40008000 	.word	0x40008000

08005c38 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b090      	sub	sp, #64	; 0x40
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c44:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c4a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c56:	2b80      	cmp	r3, #128	; 0x80
 8005c58:	d139      	bne.n	8005cce <HAL_UART_DMAStop+0x96>
 8005c5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c5c:	2b21      	cmp	r3, #33	; 0x21
 8005c5e:	d136      	bne.n	8005cce <HAL_UART_DMAStop+0x96>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	3308      	adds	r3, #8
 8005c66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c68:	6a3b      	ldr	r3, [r7, #32]
 8005c6a:	e853 3f00 	ldrex	r3, [r3]
 8005c6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c70:	69fb      	ldr	r3, [r7, #28]
 8005c72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c76:	637b      	str	r3, [r7, #52]	; 0x34
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	3308      	adds	r3, #8
 8005c7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c80:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c88:	e841 2300 	strex	r3, r2, [r1]
 8005c8c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d1e5      	bne.n	8005c60 <HAL_UART_DMAStop+0x28>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d015      	beq.n	8005cc8 <HAL_UART_DMAStop+0x90>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f7fc fc8f 	bl	80025c4 <HAL_DMA_Abort>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d00d      	beq.n	8005cc8 <HAL_UART_DMAStop+0x90>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f7fc fdb5 	bl	8002820 <HAL_DMA_GetError>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	2b20      	cmp	r3, #32
 8005cba:	d105      	bne.n	8005cc8 <HAL_UART_DMAStop+0x90>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2210      	movs	r2, #16
 8005cc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005cc4:	2303      	movs	r3, #3
 8005cc6:	e044      	b.n	8005d52 <HAL_UART_DMAStop+0x11a>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f001 f86b 	bl	8006da4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cd8:	2b40      	cmp	r3, #64	; 0x40
 8005cda:	d139      	bne.n	8005d50 <HAL_UART_DMAStop+0x118>
 8005cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cde:	2b22      	cmp	r3, #34	; 0x22
 8005ce0:	d136      	bne.n	8005d50 <HAL_UART_DMAStop+0x118>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	3308      	adds	r3, #8
 8005ce8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	e853 3f00 	ldrex	r3, [r3]
 8005cf0:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cf8:	633b      	str	r3, [r7, #48]	; 0x30
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	3308      	adds	r3, #8
 8005d00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d02:	61ba      	str	r2, [r7, #24]
 8005d04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d06:	6979      	ldr	r1, [r7, #20]
 8005d08:	69ba      	ldr	r2, [r7, #24]
 8005d0a:	e841 2300 	strex	r3, r2, [r1]
 8005d0e:	613b      	str	r3, [r7, #16]
   return(result);
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d1e5      	bne.n	8005ce2 <HAL_UART_DMAStop+0xaa>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d015      	beq.n	8005d4a <HAL_UART_DMAStop+0x112>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d22:	4618      	mov	r0, r3
 8005d24:	f7fc fc4e 	bl	80025c4 <HAL_DMA_Abort>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d00d      	beq.n	8005d4a <HAL_UART_DMAStop+0x112>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d32:	4618      	mov	r0, r3
 8005d34:	f7fc fd74 	bl	8002820 <HAL_DMA_GetError>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b20      	cmp	r3, #32
 8005d3c:	d105      	bne.n	8005d4a <HAL_UART_DMAStop+0x112>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2210      	movs	r2, #16
 8005d42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005d46:	2303      	movs	r3, #3
 8005d48:	e003      	b.n	8005d52 <HAL_UART_DMAStop+0x11a>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f001 f850 	bl	8006df0 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8005d50:	2300      	movs	r3, #0
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3740      	adds	r7, #64	; 0x40
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}
	...

08005d5c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b0ba      	sub	sp, #232	; 0xe8
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	69db      	ldr	r3, [r3, #28]
 8005d6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005d82:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005d86:	f640 030f 	movw	r3, #2063	; 0x80f
 8005d8a:	4013      	ands	r3, r2
 8005d8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005d90:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d115      	bne.n	8005dc4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005d98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d9c:	f003 0320 	and.w	r3, r3, #32
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d00f      	beq.n	8005dc4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005da4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005da8:	f003 0320 	and.w	r3, r3, #32
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d009      	beq.n	8005dc4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	f000 82a6 	beq.w	8006306 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	4798      	blx	r3
      }
      return;
 8005dc2:	e2a0      	b.n	8006306 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005dc4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	f000 8117 	beq.w	8005ffc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005dce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005dd2:	f003 0301 	and.w	r3, r3, #1
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d106      	bne.n	8005de8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005dda:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005dde:	4b85      	ldr	r3, [pc, #532]	; (8005ff4 <HAL_UART_IRQHandler+0x298>)
 8005de0:	4013      	ands	r3, r2
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	f000 810a 	beq.w	8005ffc <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005de8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dec:	f003 0301 	and.w	r3, r3, #1
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d011      	beq.n	8005e18 <HAL_UART_IRQHandler+0xbc>
 8005df4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d00b      	beq.n	8005e18 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	2201      	movs	r2, #1
 8005e06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e0e:	f043 0201 	orr.w	r2, r3, #1
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e1c:	f003 0302 	and.w	r3, r3, #2
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d011      	beq.n	8005e48 <HAL_UART_IRQHandler+0xec>
 8005e24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e28:	f003 0301 	and.w	r3, r3, #1
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d00b      	beq.n	8005e48 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	2202      	movs	r2, #2
 8005e36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e3e:	f043 0204 	orr.w	r2, r3, #4
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e4c:	f003 0304 	and.w	r3, r3, #4
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d011      	beq.n	8005e78 <HAL_UART_IRQHandler+0x11c>
 8005e54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e58:	f003 0301 	and.w	r3, r3, #1
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d00b      	beq.n	8005e78 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	2204      	movs	r2, #4
 8005e66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e6e:	f043 0202 	orr.w	r2, r3, #2
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005e78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e7c:	f003 0308 	and.w	r3, r3, #8
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d017      	beq.n	8005eb4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005e84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e88:	f003 0320 	and.w	r3, r3, #32
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d105      	bne.n	8005e9c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005e90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e94:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d00b      	beq.n	8005eb4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	2208      	movs	r2, #8
 8005ea2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005eaa:	f043 0208 	orr.w	r2, r3, #8
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005eb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005eb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d012      	beq.n	8005ee6 <HAL_UART_IRQHandler+0x18a>
 8005ec0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ec4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d00c      	beq.n	8005ee6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ed4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005edc:	f043 0220 	orr.w	r2, r3, #32
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	f000 820c 	beq.w	800630a <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005ef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ef6:	f003 0320 	and.w	r3, r3, #32
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d00d      	beq.n	8005f1a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005efe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f02:	f003 0320 	and.w	r3, r3, #32
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d007      	beq.n	8005f1a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d003      	beq.n	8005f1a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f20:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f2e:	2b40      	cmp	r3, #64	; 0x40
 8005f30:	d005      	beq.n	8005f3e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005f32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f36:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d04f      	beq.n	8005fde <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 ff56 	bl	8006df0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f4e:	2b40      	cmp	r3, #64	; 0x40
 8005f50:	d141      	bne.n	8005fd6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	3308      	adds	r3, #8
 8005f58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005f60:	e853 3f00 	ldrex	r3, [r3]
 8005f64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005f68:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	3308      	adds	r3, #8
 8005f7a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005f7e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005f82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f86:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005f8a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005f8e:	e841 2300 	strex	r3, r2, [r1]
 8005f92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005f96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d1d9      	bne.n	8005f52 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d013      	beq.n	8005fce <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005faa:	4a13      	ldr	r2, [pc, #76]	; (8005ff8 <HAL_UART_IRQHandler+0x29c>)
 8005fac:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f7fc fb44 	bl	8002640 <HAL_DMA_Abort_IT>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d017      	beq.n	8005fee <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc4:	687a      	ldr	r2, [r7, #4]
 8005fc6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005fc8:	4610      	mov	r0, r2
 8005fca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fcc:	e00f      	b.n	8005fee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 f9c4 	bl	800635c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fd4:	e00b      	b.n	8005fee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 f9c0 	bl	800635c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fdc:	e007      	b.n	8005fee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 f9bc 	bl	800635c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005fec:	e18d      	b.n	800630a <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fee:	bf00      	nop
    return;
 8005ff0:	e18b      	b.n	800630a <HAL_UART_IRQHandler+0x5ae>
 8005ff2:	bf00      	nop
 8005ff4:	04000120 	.word	0x04000120
 8005ff8:	0800708f 	.word	0x0800708f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006000:	2b01      	cmp	r3, #1
 8006002:	f040 8146 	bne.w	8006292 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800600a:	f003 0310 	and.w	r3, r3, #16
 800600e:	2b00      	cmp	r3, #0
 8006010:	f000 813f 	beq.w	8006292 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006014:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006018:	f003 0310 	and.w	r3, r3, #16
 800601c:	2b00      	cmp	r3, #0
 800601e:	f000 8138 	beq.w	8006292 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	2210      	movs	r2, #16
 8006028:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006034:	2b40      	cmp	r3, #64	; 0x40
 8006036:	f040 80b4 	bne.w	80061a2 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006046:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800604a:	2b00      	cmp	r3, #0
 800604c:	f000 815f 	beq.w	800630e <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006056:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800605a:	429a      	cmp	r2, r3
 800605c:	f080 8157 	bcs.w	800630e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006066:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f003 0320 	and.w	r3, r3, #32
 8006076:	2b00      	cmp	r3, #0
 8006078:	f040 8085 	bne.w	8006186 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006084:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006088:	e853 3f00 	ldrex	r3, [r3]
 800608c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006090:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006094:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006098:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	461a      	mov	r2, r3
 80060a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80060a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80060aa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80060b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80060b6:	e841 2300 	strex	r3, r2, [r1]
 80060ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80060be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d1da      	bne.n	800607c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	3308      	adds	r3, #8
 80060cc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060d0:	e853 3f00 	ldrex	r3, [r3]
 80060d4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80060d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80060d8:	f023 0301 	bic.w	r3, r3, #1
 80060dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	3308      	adds	r3, #8
 80060e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80060ea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80060ee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80060f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80060f6:	e841 2300 	strex	r3, r2, [r1]
 80060fa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80060fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d1e1      	bne.n	80060c6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	3308      	adds	r3, #8
 8006108:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800610a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800610c:	e853 3f00 	ldrex	r3, [r3]
 8006110:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006112:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006114:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006118:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	3308      	adds	r3, #8
 8006122:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006126:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006128:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800612a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800612c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800612e:	e841 2300 	strex	r3, r2, [r1]
 8006132:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006134:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006136:	2b00      	cmp	r3, #0
 8006138:	d1e3      	bne.n	8006102 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2220      	movs	r2, #32
 800613e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2200      	movs	r2, #0
 8006144:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800614c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800614e:	e853 3f00 	ldrex	r3, [r3]
 8006152:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006154:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006156:	f023 0310 	bic.w	r3, r3, #16
 800615a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	461a      	mov	r2, r3
 8006164:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006168:	65bb      	str	r3, [r7, #88]	; 0x58
 800616a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800616c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800616e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006170:	e841 2300 	strex	r3, r2, [r1]
 8006174:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006176:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006178:	2b00      	cmp	r3, #0
 800617a:	d1e4      	bne.n	8006146 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006180:	4618      	mov	r0, r3
 8006182:	f7fc fa1f 	bl	80025c4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006192:	b29b      	uxth	r3, r3
 8006194:	1ad3      	subs	r3, r2, r3
 8006196:	b29b      	uxth	r3, r3
 8006198:	4619      	mov	r1, r3
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 f8e8 	bl	8006370 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80061a0:	e0b5      	b.n	800630e <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	1ad3      	subs	r3, r2, r3
 80061b2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80061bc:	b29b      	uxth	r3, r3
 80061be:	2b00      	cmp	r3, #0
 80061c0:	f000 80a7 	beq.w	8006312 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80061c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	f000 80a2 	beq.w	8006312 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061d6:	e853 3f00 	ldrex	r3, [r3]
 80061da:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80061dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80061e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	461a      	mov	r2, r3
 80061ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80061f0:	647b      	str	r3, [r7, #68]	; 0x44
 80061f2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80061f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061f8:	e841 2300 	strex	r3, r2, [r1]
 80061fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80061fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006200:	2b00      	cmp	r3, #0
 8006202:	d1e4      	bne.n	80061ce <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	3308      	adds	r3, #8
 800620a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800620c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620e:	e853 3f00 	ldrex	r3, [r3]
 8006212:	623b      	str	r3, [r7, #32]
   return(result);
 8006214:	6a3b      	ldr	r3, [r7, #32]
 8006216:	f023 0301 	bic.w	r3, r3, #1
 800621a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	3308      	adds	r3, #8
 8006224:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006228:	633a      	str	r2, [r7, #48]	; 0x30
 800622a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800622c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800622e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006230:	e841 2300 	strex	r3, r2, [r1]
 8006234:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006238:	2b00      	cmp	r3, #0
 800623a:	d1e3      	bne.n	8006204 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2220      	movs	r2, #32
 8006240:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2200      	movs	r2, #0
 8006246:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	e853 3f00 	ldrex	r3, [r3]
 800625a:	60fb      	str	r3, [r7, #12]
   return(result);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f023 0310 	bic.w	r3, r3, #16
 8006262:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	461a      	mov	r2, r3
 800626c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006270:	61fb      	str	r3, [r7, #28]
 8006272:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006274:	69b9      	ldr	r1, [r7, #24]
 8006276:	69fa      	ldr	r2, [r7, #28]
 8006278:	e841 2300 	strex	r3, r2, [r1]
 800627c:	617b      	str	r3, [r7, #20]
   return(result);
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d1e4      	bne.n	800624e <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006284:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006288:	4619      	mov	r1, r3
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 f870 	bl	8006370 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006290:	e03f      	b.n	8006312 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006296:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800629a:	2b00      	cmp	r3, #0
 800629c:	d00e      	beq.n	80062bc <HAL_UART_IRQHandler+0x560>
 800629e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d008      	beq.n	80062bc <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80062b2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f000 ff2a 	bl	800710e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80062ba:	e02d      	b.n	8006318 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80062bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d00e      	beq.n	80062e6 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80062c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d008      	beq.n	80062e6 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d01c      	beq.n	8006316 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	4798      	blx	r3
    }
    return;
 80062e4:	e017      	b.n	8006316 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80062e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d012      	beq.n	8006318 <HAL_UART_IRQHandler+0x5bc>
 80062f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d00c      	beq.n	8006318 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f000 fedb 	bl	80070ba <UART_EndTransmit_IT>
    return;
 8006304:	e008      	b.n	8006318 <HAL_UART_IRQHandler+0x5bc>
      return;
 8006306:	bf00      	nop
 8006308:	e006      	b.n	8006318 <HAL_UART_IRQHandler+0x5bc>
    return;
 800630a:	bf00      	nop
 800630c:	e004      	b.n	8006318 <HAL_UART_IRQHandler+0x5bc>
      return;
 800630e:	bf00      	nop
 8006310:	e002      	b.n	8006318 <HAL_UART_IRQHandler+0x5bc>
      return;
 8006312:	bf00      	nop
 8006314:	e000      	b.n	8006318 <HAL_UART_IRQHandler+0x5bc>
    return;
 8006316:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006318:	37e8      	adds	r7, #232	; 0xe8
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
 800631e:	bf00      	nop

08006320 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006320:	b480      	push	{r7}
 8006322:	b083      	sub	sp, #12
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006328:	bf00      	nop
 800632a:	370c      	adds	r7, #12
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr

08006334 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006334:	b480      	push	{r7}
 8006336:	b083      	sub	sp, #12
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800633c:	bf00      	nop
 800633e:	370c      	adds	r7, #12
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr

08006348 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006348:	b480      	push	{r7}
 800634a:	b083      	sub	sp, #12
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006350:	bf00      	nop
 8006352:	370c      	adds	r7, #12
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr

0800635c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800635c:	b480      	push	{r7}
 800635e:	b083      	sub	sp, #12
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006364:	bf00      	nop
 8006366:	370c      	adds	r7, #12
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr

08006370 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006370:	b480      	push	{r7}
 8006372:	b083      	sub	sp, #12
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	460b      	mov	r3, r1
 800637a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800637c:	bf00      	nop
 800637e:	370c      	adds	r7, #12
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr

08006388 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006388:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800638c:	b08a      	sub	sp, #40	; 0x28
 800638e:	af00      	add	r7, sp, #0
 8006390:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006392:	2300      	movs	r3, #0
 8006394:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	689a      	ldr	r2, [r3, #8]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	691b      	ldr	r3, [r3, #16]
 80063a0:	431a      	orrs	r2, r3
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	695b      	ldr	r3, [r3, #20]
 80063a6:	431a      	orrs	r2, r3
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	69db      	ldr	r3, [r3, #28]
 80063ac:	4313      	orrs	r3, r2
 80063ae:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	681a      	ldr	r2, [r3, #0]
 80063b6:	4ba4      	ldr	r3, [pc, #656]	; (8006648 <UART_SetConfig+0x2c0>)
 80063b8:	4013      	ands	r3, r2
 80063ba:	68fa      	ldr	r2, [r7, #12]
 80063bc:	6812      	ldr	r2, [r2, #0]
 80063be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80063c0:	430b      	orrs	r3, r1
 80063c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	68da      	ldr	r2, [r3, #12]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	430a      	orrs	r2, r1
 80063d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	699b      	ldr	r3, [r3, #24]
 80063de:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a99      	ldr	r2, [pc, #612]	; (800664c <UART_SetConfig+0x2c4>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d004      	beq.n	80063f4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	6a1b      	ldr	r3, [r3, #32]
 80063ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063f0:	4313      	orrs	r3, r2
 80063f2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006404:	430a      	orrs	r2, r1
 8006406:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a90      	ldr	r2, [pc, #576]	; (8006650 <UART_SetConfig+0x2c8>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d126      	bne.n	8006460 <UART_SetConfig+0xd8>
 8006412:	4b90      	ldr	r3, [pc, #576]	; (8006654 <UART_SetConfig+0x2cc>)
 8006414:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006418:	f003 0303 	and.w	r3, r3, #3
 800641c:	2b03      	cmp	r3, #3
 800641e:	d81b      	bhi.n	8006458 <UART_SetConfig+0xd0>
 8006420:	a201      	add	r2, pc, #4	; (adr r2, 8006428 <UART_SetConfig+0xa0>)
 8006422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006426:	bf00      	nop
 8006428:	08006439 	.word	0x08006439
 800642c:	08006449 	.word	0x08006449
 8006430:	08006441 	.word	0x08006441
 8006434:	08006451 	.word	0x08006451
 8006438:	2301      	movs	r3, #1
 800643a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800643e:	e116      	b.n	800666e <UART_SetConfig+0x2e6>
 8006440:	2302      	movs	r3, #2
 8006442:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006446:	e112      	b.n	800666e <UART_SetConfig+0x2e6>
 8006448:	2304      	movs	r3, #4
 800644a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800644e:	e10e      	b.n	800666e <UART_SetConfig+0x2e6>
 8006450:	2308      	movs	r3, #8
 8006452:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006456:	e10a      	b.n	800666e <UART_SetConfig+0x2e6>
 8006458:	2310      	movs	r3, #16
 800645a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800645e:	e106      	b.n	800666e <UART_SetConfig+0x2e6>
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a7c      	ldr	r2, [pc, #496]	; (8006658 <UART_SetConfig+0x2d0>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d138      	bne.n	80064dc <UART_SetConfig+0x154>
 800646a:	4b7a      	ldr	r3, [pc, #488]	; (8006654 <UART_SetConfig+0x2cc>)
 800646c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006470:	f003 030c 	and.w	r3, r3, #12
 8006474:	2b0c      	cmp	r3, #12
 8006476:	d82d      	bhi.n	80064d4 <UART_SetConfig+0x14c>
 8006478:	a201      	add	r2, pc, #4	; (adr r2, 8006480 <UART_SetConfig+0xf8>)
 800647a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800647e:	bf00      	nop
 8006480:	080064b5 	.word	0x080064b5
 8006484:	080064d5 	.word	0x080064d5
 8006488:	080064d5 	.word	0x080064d5
 800648c:	080064d5 	.word	0x080064d5
 8006490:	080064c5 	.word	0x080064c5
 8006494:	080064d5 	.word	0x080064d5
 8006498:	080064d5 	.word	0x080064d5
 800649c:	080064d5 	.word	0x080064d5
 80064a0:	080064bd 	.word	0x080064bd
 80064a4:	080064d5 	.word	0x080064d5
 80064a8:	080064d5 	.word	0x080064d5
 80064ac:	080064d5 	.word	0x080064d5
 80064b0:	080064cd 	.word	0x080064cd
 80064b4:	2300      	movs	r3, #0
 80064b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064ba:	e0d8      	b.n	800666e <UART_SetConfig+0x2e6>
 80064bc:	2302      	movs	r3, #2
 80064be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064c2:	e0d4      	b.n	800666e <UART_SetConfig+0x2e6>
 80064c4:	2304      	movs	r3, #4
 80064c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064ca:	e0d0      	b.n	800666e <UART_SetConfig+0x2e6>
 80064cc:	2308      	movs	r3, #8
 80064ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064d2:	e0cc      	b.n	800666e <UART_SetConfig+0x2e6>
 80064d4:	2310      	movs	r3, #16
 80064d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064da:	e0c8      	b.n	800666e <UART_SetConfig+0x2e6>
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a5e      	ldr	r2, [pc, #376]	; (800665c <UART_SetConfig+0x2d4>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d125      	bne.n	8006532 <UART_SetConfig+0x1aa>
 80064e6:	4b5b      	ldr	r3, [pc, #364]	; (8006654 <UART_SetConfig+0x2cc>)
 80064e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064ec:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80064f0:	2b30      	cmp	r3, #48	; 0x30
 80064f2:	d016      	beq.n	8006522 <UART_SetConfig+0x19a>
 80064f4:	2b30      	cmp	r3, #48	; 0x30
 80064f6:	d818      	bhi.n	800652a <UART_SetConfig+0x1a2>
 80064f8:	2b20      	cmp	r3, #32
 80064fa:	d00a      	beq.n	8006512 <UART_SetConfig+0x18a>
 80064fc:	2b20      	cmp	r3, #32
 80064fe:	d814      	bhi.n	800652a <UART_SetConfig+0x1a2>
 8006500:	2b00      	cmp	r3, #0
 8006502:	d002      	beq.n	800650a <UART_SetConfig+0x182>
 8006504:	2b10      	cmp	r3, #16
 8006506:	d008      	beq.n	800651a <UART_SetConfig+0x192>
 8006508:	e00f      	b.n	800652a <UART_SetConfig+0x1a2>
 800650a:	2300      	movs	r3, #0
 800650c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006510:	e0ad      	b.n	800666e <UART_SetConfig+0x2e6>
 8006512:	2302      	movs	r3, #2
 8006514:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006518:	e0a9      	b.n	800666e <UART_SetConfig+0x2e6>
 800651a:	2304      	movs	r3, #4
 800651c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006520:	e0a5      	b.n	800666e <UART_SetConfig+0x2e6>
 8006522:	2308      	movs	r3, #8
 8006524:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006528:	e0a1      	b.n	800666e <UART_SetConfig+0x2e6>
 800652a:	2310      	movs	r3, #16
 800652c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006530:	e09d      	b.n	800666e <UART_SetConfig+0x2e6>
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a4a      	ldr	r2, [pc, #296]	; (8006660 <UART_SetConfig+0x2d8>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d125      	bne.n	8006588 <UART_SetConfig+0x200>
 800653c:	4b45      	ldr	r3, [pc, #276]	; (8006654 <UART_SetConfig+0x2cc>)
 800653e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006542:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006546:	2bc0      	cmp	r3, #192	; 0xc0
 8006548:	d016      	beq.n	8006578 <UART_SetConfig+0x1f0>
 800654a:	2bc0      	cmp	r3, #192	; 0xc0
 800654c:	d818      	bhi.n	8006580 <UART_SetConfig+0x1f8>
 800654e:	2b80      	cmp	r3, #128	; 0x80
 8006550:	d00a      	beq.n	8006568 <UART_SetConfig+0x1e0>
 8006552:	2b80      	cmp	r3, #128	; 0x80
 8006554:	d814      	bhi.n	8006580 <UART_SetConfig+0x1f8>
 8006556:	2b00      	cmp	r3, #0
 8006558:	d002      	beq.n	8006560 <UART_SetConfig+0x1d8>
 800655a:	2b40      	cmp	r3, #64	; 0x40
 800655c:	d008      	beq.n	8006570 <UART_SetConfig+0x1e8>
 800655e:	e00f      	b.n	8006580 <UART_SetConfig+0x1f8>
 8006560:	2300      	movs	r3, #0
 8006562:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006566:	e082      	b.n	800666e <UART_SetConfig+0x2e6>
 8006568:	2302      	movs	r3, #2
 800656a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800656e:	e07e      	b.n	800666e <UART_SetConfig+0x2e6>
 8006570:	2304      	movs	r3, #4
 8006572:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006576:	e07a      	b.n	800666e <UART_SetConfig+0x2e6>
 8006578:	2308      	movs	r3, #8
 800657a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800657e:	e076      	b.n	800666e <UART_SetConfig+0x2e6>
 8006580:	2310      	movs	r3, #16
 8006582:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006586:	e072      	b.n	800666e <UART_SetConfig+0x2e6>
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a35      	ldr	r2, [pc, #212]	; (8006664 <UART_SetConfig+0x2dc>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d12a      	bne.n	80065e8 <UART_SetConfig+0x260>
 8006592:	4b30      	ldr	r3, [pc, #192]	; (8006654 <UART_SetConfig+0x2cc>)
 8006594:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006598:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800659c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065a0:	d01a      	beq.n	80065d8 <UART_SetConfig+0x250>
 80065a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065a6:	d81b      	bhi.n	80065e0 <UART_SetConfig+0x258>
 80065a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065ac:	d00c      	beq.n	80065c8 <UART_SetConfig+0x240>
 80065ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065b2:	d815      	bhi.n	80065e0 <UART_SetConfig+0x258>
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d003      	beq.n	80065c0 <UART_SetConfig+0x238>
 80065b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065bc:	d008      	beq.n	80065d0 <UART_SetConfig+0x248>
 80065be:	e00f      	b.n	80065e0 <UART_SetConfig+0x258>
 80065c0:	2300      	movs	r3, #0
 80065c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065c6:	e052      	b.n	800666e <UART_SetConfig+0x2e6>
 80065c8:	2302      	movs	r3, #2
 80065ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065ce:	e04e      	b.n	800666e <UART_SetConfig+0x2e6>
 80065d0:	2304      	movs	r3, #4
 80065d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065d6:	e04a      	b.n	800666e <UART_SetConfig+0x2e6>
 80065d8:	2308      	movs	r3, #8
 80065da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065de:	e046      	b.n	800666e <UART_SetConfig+0x2e6>
 80065e0:	2310      	movs	r3, #16
 80065e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065e6:	e042      	b.n	800666e <UART_SetConfig+0x2e6>
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a17      	ldr	r2, [pc, #92]	; (800664c <UART_SetConfig+0x2c4>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d13a      	bne.n	8006668 <UART_SetConfig+0x2e0>
 80065f2:	4b18      	ldr	r3, [pc, #96]	; (8006654 <UART_SetConfig+0x2cc>)
 80065f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80065fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006600:	d01a      	beq.n	8006638 <UART_SetConfig+0x2b0>
 8006602:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006606:	d81b      	bhi.n	8006640 <UART_SetConfig+0x2b8>
 8006608:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800660c:	d00c      	beq.n	8006628 <UART_SetConfig+0x2a0>
 800660e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006612:	d815      	bhi.n	8006640 <UART_SetConfig+0x2b8>
 8006614:	2b00      	cmp	r3, #0
 8006616:	d003      	beq.n	8006620 <UART_SetConfig+0x298>
 8006618:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800661c:	d008      	beq.n	8006630 <UART_SetConfig+0x2a8>
 800661e:	e00f      	b.n	8006640 <UART_SetConfig+0x2b8>
 8006620:	2300      	movs	r3, #0
 8006622:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006626:	e022      	b.n	800666e <UART_SetConfig+0x2e6>
 8006628:	2302      	movs	r3, #2
 800662a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800662e:	e01e      	b.n	800666e <UART_SetConfig+0x2e6>
 8006630:	2304      	movs	r3, #4
 8006632:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006636:	e01a      	b.n	800666e <UART_SetConfig+0x2e6>
 8006638:	2308      	movs	r3, #8
 800663a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800663e:	e016      	b.n	800666e <UART_SetConfig+0x2e6>
 8006640:	2310      	movs	r3, #16
 8006642:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006646:	e012      	b.n	800666e <UART_SetConfig+0x2e6>
 8006648:	efff69f3 	.word	0xefff69f3
 800664c:	40008000 	.word	0x40008000
 8006650:	40013800 	.word	0x40013800
 8006654:	40021000 	.word	0x40021000
 8006658:	40004400 	.word	0x40004400
 800665c:	40004800 	.word	0x40004800
 8006660:	40004c00 	.word	0x40004c00
 8006664:	40005000 	.word	0x40005000
 8006668:	2310      	movs	r3, #16
 800666a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a9f      	ldr	r2, [pc, #636]	; (80068f0 <UART_SetConfig+0x568>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d17a      	bne.n	800676e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006678:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800667c:	2b08      	cmp	r3, #8
 800667e:	d824      	bhi.n	80066ca <UART_SetConfig+0x342>
 8006680:	a201      	add	r2, pc, #4	; (adr r2, 8006688 <UART_SetConfig+0x300>)
 8006682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006686:	bf00      	nop
 8006688:	080066ad 	.word	0x080066ad
 800668c:	080066cb 	.word	0x080066cb
 8006690:	080066b5 	.word	0x080066b5
 8006694:	080066cb 	.word	0x080066cb
 8006698:	080066bb 	.word	0x080066bb
 800669c:	080066cb 	.word	0x080066cb
 80066a0:	080066cb 	.word	0x080066cb
 80066a4:	080066cb 	.word	0x080066cb
 80066a8:	080066c3 	.word	0x080066c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066ac:	f7fd f8cc 	bl	8003848 <HAL_RCC_GetPCLK1Freq>
 80066b0:	61f8      	str	r0, [r7, #28]
        break;
 80066b2:	e010      	b.n	80066d6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066b4:	4b8f      	ldr	r3, [pc, #572]	; (80068f4 <UART_SetConfig+0x56c>)
 80066b6:	61fb      	str	r3, [r7, #28]
        break;
 80066b8:	e00d      	b.n	80066d6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066ba:	f7fd f82d 	bl	8003718 <HAL_RCC_GetSysClockFreq>
 80066be:	61f8      	str	r0, [r7, #28]
        break;
 80066c0:	e009      	b.n	80066d6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066c6:	61fb      	str	r3, [r7, #28]
        break;
 80066c8:	e005      	b.n	80066d6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80066ca:	2300      	movs	r3, #0
 80066cc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
 80066d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80066d4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80066d6:	69fb      	ldr	r3, [r7, #28]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	f000 80fb 	beq.w	80068d4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	685a      	ldr	r2, [r3, #4]
 80066e2:	4613      	mov	r3, r2
 80066e4:	005b      	lsls	r3, r3, #1
 80066e6:	4413      	add	r3, r2
 80066e8:	69fa      	ldr	r2, [r7, #28]
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d305      	bcc.n	80066fa <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80066f4:	69fa      	ldr	r2, [r7, #28]
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d903      	bls.n	8006702 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80066fa:	2301      	movs	r3, #1
 80066fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006700:	e0e8      	b.n	80068d4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006702:	69fb      	ldr	r3, [r7, #28]
 8006704:	2200      	movs	r2, #0
 8006706:	461c      	mov	r4, r3
 8006708:	4615      	mov	r5, r2
 800670a:	f04f 0200 	mov.w	r2, #0
 800670e:	f04f 0300 	mov.w	r3, #0
 8006712:	022b      	lsls	r3, r5, #8
 8006714:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006718:	0222      	lsls	r2, r4, #8
 800671a:	68f9      	ldr	r1, [r7, #12]
 800671c:	6849      	ldr	r1, [r1, #4]
 800671e:	0849      	lsrs	r1, r1, #1
 8006720:	2000      	movs	r0, #0
 8006722:	4688      	mov	r8, r1
 8006724:	4681      	mov	r9, r0
 8006726:	eb12 0a08 	adds.w	sl, r2, r8
 800672a:	eb43 0b09 	adc.w	fp, r3, r9
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	2200      	movs	r2, #0
 8006734:	603b      	str	r3, [r7, #0]
 8006736:	607a      	str	r2, [r7, #4]
 8006738:	e9d7 2300 	ldrd	r2, r3, [r7]
 800673c:	4650      	mov	r0, sl
 800673e:	4659      	mov	r1, fp
 8006740:	f7f9 fda6 	bl	8000290 <__aeabi_uldivmod>
 8006744:	4602      	mov	r2, r0
 8006746:	460b      	mov	r3, r1
 8006748:	4613      	mov	r3, r2
 800674a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800674c:	69bb      	ldr	r3, [r7, #24]
 800674e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006752:	d308      	bcc.n	8006766 <UART_SetConfig+0x3de>
 8006754:	69bb      	ldr	r3, [r7, #24]
 8006756:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800675a:	d204      	bcs.n	8006766 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	69ba      	ldr	r2, [r7, #24]
 8006762:	60da      	str	r2, [r3, #12]
 8006764:	e0b6      	b.n	80068d4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800676c:	e0b2      	b.n	80068d4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	69db      	ldr	r3, [r3, #28]
 8006772:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006776:	d15e      	bne.n	8006836 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006778:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800677c:	2b08      	cmp	r3, #8
 800677e:	d828      	bhi.n	80067d2 <UART_SetConfig+0x44a>
 8006780:	a201      	add	r2, pc, #4	; (adr r2, 8006788 <UART_SetConfig+0x400>)
 8006782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006786:	bf00      	nop
 8006788:	080067ad 	.word	0x080067ad
 800678c:	080067b5 	.word	0x080067b5
 8006790:	080067bd 	.word	0x080067bd
 8006794:	080067d3 	.word	0x080067d3
 8006798:	080067c3 	.word	0x080067c3
 800679c:	080067d3 	.word	0x080067d3
 80067a0:	080067d3 	.word	0x080067d3
 80067a4:	080067d3 	.word	0x080067d3
 80067a8:	080067cb 	.word	0x080067cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067ac:	f7fd f84c 	bl	8003848 <HAL_RCC_GetPCLK1Freq>
 80067b0:	61f8      	str	r0, [r7, #28]
        break;
 80067b2:	e014      	b.n	80067de <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067b4:	f7fd f85e 	bl	8003874 <HAL_RCC_GetPCLK2Freq>
 80067b8:	61f8      	str	r0, [r7, #28]
        break;
 80067ba:	e010      	b.n	80067de <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067bc:	4b4d      	ldr	r3, [pc, #308]	; (80068f4 <UART_SetConfig+0x56c>)
 80067be:	61fb      	str	r3, [r7, #28]
        break;
 80067c0:	e00d      	b.n	80067de <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067c2:	f7fc ffa9 	bl	8003718 <HAL_RCC_GetSysClockFreq>
 80067c6:	61f8      	str	r0, [r7, #28]
        break;
 80067c8:	e009      	b.n	80067de <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067ce:	61fb      	str	r3, [r7, #28]
        break;
 80067d0:	e005      	b.n	80067de <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80067d2:	2300      	movs	r3, #0
 80067d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80067dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80067de:	69fb      	ldr	r3, [r7, #28]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d077      	beq.n	80068d4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80067e4:	69fb      	ldr	r3, [r7, #28]
 80067e6:	005a      	lsls	r2, r3, #1
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	085b      	lsrs	r3, r3, #1
 80067ee:	441a      	add	r2, r3
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80067f8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067fa:	69bb      	ldr	r3, [r7, #24]
 80067fc:	2b0f      	cmp	r3, #15
 80067fe:	d916      	bls.n	800682e <UART_SetConfig+0x4a6>
 8006800:	69bb      	ldr	r3, [r7, #24]
 8006802:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006806:	d212      	bcs.n	800682e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006808:	69bb      	ldr	r3, [r7, #24]
 800680a:	b29b      	uxth	r3, r3
 800680c:	f023 030f 	bic.w	r3, r3, #15
 8006810:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006812:	69bb      	ldr	r3, [r7, #24]
 8006814:	085b      	lsrs	r3, r3, #1
 8006816:	b29b      	uxth	r3, r3
 8006818:	f003 0307 	and.w	r3, r3, #7
 800681c:	b29a      	uxth	r2, r3
 800681e:	8afb      	ldrh	r3, [r7, #22]
 8006820:	4313      	orrs	r3, r2
 8006822:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	8afa      	ldrh	r2, [r7, #22]
 800682a:	60da      	str	r2, [r3, #12]
 800682c:	e052      	b.n	80068d4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800682e:	2301      	movs	r3, #1
 8006830:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006834:	e04e      	b.n	80068d4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006836:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800683a:	2b08      	cmp	r3, #8
 800683c:	d827      	bhi.n	800688e <UART_SetConfig+0x506>
 800683e:	a201      	add	r2, pc, #4	; (adr r2, 8006844 <UART_SetConfig+0x4bc>)
 8006840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006844:	08006869 	.word	0x08006869
 8006848:	08006871 	.word	0x08006871
 800684c:	08006879 	.word	0x08006879
 8006850:	0800688f 	.word	0x0800688f
 8006854:	0800687f 	.word	0x0800687f
 8006858:	0800688f 	.word	0x0800688f
 800685c:	0800688f 	.word	0x0800688f
 8006860:	0800688f 	.word	0x0800688f
 8006864:	08006887 	.word	0x08006887
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006868:	f7fc ffee 	bl	8003848 <HAL_RCC_GetPCLK1Freq>
 800686c:	61f8      	str	r0, [r7, #28]
        break;
 800686e:	e014      	b.n	800689a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006870:	f7fd f800 	bl	8003874 <HAL_RCC_GetPCLK2Freq>
 8006874:	61f8      	str	r0, [r7, #28]
        break;
 8006876:	e010      	b.n	800689a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006878:	4b1e      	ldr	r3, [pc, #120]	; (80068f4 <UART_SetConfig+0x56c>)
 800687a:	61fb      	str	r3, [r7, #28]
        break;
 800687c:	e00d      	b.n	800689a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800687e:	f7fc ff4b 	bl	8003718 <HAL_RCC_GetSysClockFreq>
 8006882:	61f8      	str	r0, [r7, #28]
        break;
 8006884:	e009      	b.n	800689a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006886:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800688a:	61fb      	str	r3, [r7, #28]
        break;
 800688c:	e005      	b.n	800689a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800688e:	2300      	movs	r3, #0
 8006890:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006892:	2301      	movs	r3, #1
 8006894:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006898:	bf00      	nop
    }

    if (pclk != 0U)
 800689a:	69fb      	ldr	r3, [r7, #28]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d019      	beq.n	80068d4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	085a      	lsrs	r2, r3, #1
 80068a6:	69fb      	ldr	r3, [r7, #28]
 80068a8:	441a      	add	r2, r3
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80068b2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068b4:	69bb      	ldr	r3, [r7, #24]
 80068b6:	2b0f      	cmp	r3, #15
 80068b8:	d909      	bls.n	80068ce <UART_SetConfig+0x546>
 80068ba:	69bb      	ldr	r3, [r7, #24]
 80068bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068c0:	d205      	bcs.n	80068ce <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80068c2:	69bb      	ldr	r3, [r7, #24]
 80068c4:	b29a      	uxth	r2, r3
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	60da      	str	r2, [r3, #12]
 80068cc:	e002      	b.n	80068d4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2200      	movs	r2, #0
 80068d8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2200      	movs	r2, #0
 80068de:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80068e0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3728      	adds	r7, #40	; 0x28
 80068e8:	46bd      	mov	sp, r7
 80068ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80068ee:	bf00      	nop
 80068f0:	40008000 	.word	0x40008000
 80068f4:	00f42400 	.word	0x00f42400

080068f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b083      	sub	sp, #12
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006904:	f003 0301 	and.w	r3, r3, #1
 8006908:	2b00      	cmp	r3, #0
 800690a:	d00a      	beq.n	8006922 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	430a      	orrs	r2, r1
 8006920:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006926:	f003 0302 	and.w	r3, r3, #2
 800692a:	2b00      	cmp	r3, #0
 800692c:	d00a      	beq.n	8006944 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	430a      	orrs	r2, r1
 8006942:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006948:	f003 0304 	and.w	r3, r3, #4
 800694c:	2b00      	cmp	r3, #0
 800694e:	d00a      	beq.n	8006966 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	430a      	orrs	r2, r1
 8006964:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800696a:	f003 0308 	and.w	r3, r3, #8
 800696e:	2b00      	cmp	r3, #0
 8006970:	d00a      	beq.n	8006988 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	430a      	orrs	r2, r1
 8006986:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800698c:	f003 0310 	and.w	r3, r3, #16
 8006990:	2b00      	cmp	r3, #0
 8006992:	d00a      	beq.n	80069aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	430a      	orrs	r2, r1
 80069a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ae:	f003 0320 	and.w	r3, r3, #32
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d00a      	beq.n	80069cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	430a      	orrs	r2, r1
 80069ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d01a      	beq.n	8006a0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	430a      	orrs	r2, r1
 80069ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069f6:	d10a      	bne.n	8006a0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	430a      	orrs	r2, r1
 8006a0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d00a      	beq.n	8006a30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	430a      	orrs	r2, r1
 8006a2e:	605a      	str	r2, [r3, #4]
  }
}
 8006a30:	bf00      	nop
 8006a32:	370c      	adds	r7, #12
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr

08006a3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b086      	sub	sp, #24
 8006a40:	af02      	add	r7, sp, #8
 8006a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2200      	movs	r2, #0
 8006a48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006a4c:	f7fb fb60 	bl	8002110 <HAL_GetTick>
 8006a50:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f003 0308 	and.w	r3, r3, #8
 8006a5c:	2b08      	cmp	r3, #8
 8006a5e:	d10e      	bne.n	8006a7e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a64:	9300      	str	r3, [sp, #0]
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f000 f82d 	bl	8006ace <UART_WaitOnFlagUntilTimeout>
 8006a74:	4603      	mov	r3, r0
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d001      	beq.n	8006a7e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a7a:	2303      	movs	r3, #3
 8006a7c:	e023      	b.n	8006ac6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f003 0304 	and.w	r3, r3, #4
 8006a88:	2b04      	cmp	r3, #4
 8006a8a:	d10e      	bne.n	8006aaa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a90:	9300      	str	r3, [sp, #0]
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2200      	movs	r2, #0
 8006a96:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f000 f817 	bl	8006ace <UART_WaitOnFlagUntilTimeout>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d001      	beq.n	8006aaa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006aa6:	2303      	movs	r3, #3
 8006aa8:	e00d      	b.n	8006ac6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2220      	movs	r2, #32
 8006aae:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2220      	movs	r2, #32
 8006ab4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006ac4:	2300      	movs	r3, #0
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3710      	adds	r7, #16
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}

08006ace <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006ace:	b580      	push	{r7, lr}
 8006ad0:	b09c      	sub	sp, #112	; 0x70
 8006ad2:	af00      	add	r7, sp, #0
 8006ad4:	60f8      	str	r0, [r7, #12]
 8006ad6:	60b9      	str	r1, [r7, #8]
 8006ad8:	603b      	str	r3, [r7, #0]
 8006ada:	4613      	mov	r3, r2
 8006adc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ade:	e0a5      	b.n	8006c2c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ae0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ae6:	f000 80a1 	beq.w	8006c2c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006aea:	f7fb fb11 	bl	8002110 <HAL_GetTick>
 8006aee:	4602      	mov	r2, r0
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	1ad3      	subs	r3, r2, r3
 8006af4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006af6:	429a      	cmp	r2, r3
 8006af8:	d302      	bcc.n	8006b00 <UART_WaitOnFlagUntilTimeout+0x32>
 8006afa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d13e      	bne.n	8006b7e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b08:	e853 3f00 	ldrex	r3, [r3]
 8006b0c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006b0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b10:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006b14:	667b      	str	r3, [r7, #100]	; 0x64
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	461a      	mov	r2, r3
 8006b1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b1e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b20:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b22:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006b24:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006b26:	e841 2300 	strex	r3, r2, [r1]
 8006b2a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006b2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d1e6      	bne.n	8006b00 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	3308      	adds	r3, #8
 8006b38:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b3c:	e853 3f00 	ldrex	r3, [r3]
 8006b40:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b44:	f023 0301 	bic.w	r3, r3, #1
 8006b48:	663b      	str	r3, [r7, #96]	; 0x60
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	3308      	adds	r3, #8
 8006b50:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006b52:	64ba      	str	r2, [r7, #72]	; 0x48
 8006b54:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b56:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006b58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b5a:	e841 2300 	strex	r3, r2, [r1]
 8006b5e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006b60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d1e5      	bne.n	8006b32 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2220      	movs	r2, #32
 8006b6a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2220      	movs	r2, #32
 8006b70:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2200      	movs	r2, #0
 8006b76:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006b7a:	2303      	movs	r3, #3
 8006b7c:	e067      	b.n	8006c4e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f003 0304 	and.w	r3, r3, #4
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d04f      	beq.n	8006c2c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	69db      	ldr	r3, [r3, #28]
 8006b92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b9a:	d147      	bne.n	8006c2c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ba4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bae:	e853 3f00 	ldrex	r3, [r3]
 8006bb2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006bba:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bc4:	637b      	str	r3, [r7, #52]	; 0x34
 8006bc6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006bca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006bcc:	e841 2300 	strex	r3, r2, [r1]
 8006bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d1e6      	bne.n	8006ba6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	3308      	adds	r3, #8
 8006bde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	e853 3f00 	ldrex	r3, [r3]
 8006be6:	613b      	str	r3, [r7, #16]
   return(result);
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	f023 0301 	bic.w	r3, r3, #1
 8006bee:	66bb      	str	r3, [r7, #104]	; 0x68
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	3308      	adds	r3, #8
 8006bf6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006bf8:	623a      	str	r2, [r7, #32]
 8006bfa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bfc:	69f9      	ldr	r1, [r7, #28]
 8006bfe:	6a3a      	ldr	r2, [r7, #32]
 8006c00:	e841 2300 	strex	r3, r2, [r1]
 8006c04:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c06:	69bb      	ldr	r3, [r7, #24]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d1e5      	bne.n	8006bd8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2220      	movs	r2, #32
 8006c10:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2220      	movs	r2, #32
 8006c16:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	2220      	movs	r2, #32
 8006c1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2200      	movs	r2, #0
 8006c24:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006c28:	2303      	movs	r3, #3
 8006c2a:	e010      	b.n	8006c4e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	69da      	ldr	r2, [r3, #28]
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	4013      	ands	r3, r2
 8006c36:	68ba      	ldr	r2, [r7, #8]
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	bf0c      	ite	eq
 8006c3c:	2301      	moveq	r3, #1
 8006c3e:	2300      	movne	r3, #0
 8006c40:	b2db      	uxtb	r3, r3
 8006c42:	461a      	mov	r2, r3
 8006c44:	79fb      	ldrb	r3, [r7, #7]
 8006c46:	429a      	cmp	r2, r3
 8006c48:	f43f af4a 	beq.w	8006ae0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c4c:	2300      	movs	r3, #0
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3770      	adds	r7, #112	; 0x70
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}
	...

08006c58 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b096      	sub	sp, #88	; 0x58
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	60f8      	str	r0, [r7, #12]
 8006c60:	60b9      	str	r1, [r7, #8]
 8006c62:	4613      	mov	r3, r2
 8006c64:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	68ba      	ldr	r2, [r7, #8]
 8006c6a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	88fa      	ldrh	r2, [r7, #6]
 8006c70:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2200      	movs	r2, #0
 8006c78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2222      	movs	r2, #34	; 0x22
 8006c80:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d02b      	beq.n	8006ce2 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c8e:	4a42      	ldr	r2, [pc, #264]	; (8006d98 <UART_Start_Receive_DMA+0x140>)
 8006c90:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c96:	4a41      	ldr	r2, [pc, #260]	; (8006d9c <UART_Start_Receive_DMA+0x144>)
 8006c98:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c9e:	4a40      	ldr	r2, [pc, #256]	; (8006da0 <UART_Start_Receive_DMA+0x148>)
 8006ca0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	3324      	adds	r3, #36	; 0x24
 8006cb4:	4619      	mov	r1, r3
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cba:	461a      	mov	r2, r3
 8006cbc:	88fb      	ldrh	r3, [r7, #6]
 8006cbe:	f7fb fc21 	bl	8002504 <HAL_DMA_Start_IT>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d00c      	beq.n	8006ce2 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2210      	movs	r2, #16
 8006ccc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2220      	movs	r2, #32
 8006cdc:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	e055      	b.n	8006d8e <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	691b      	ldr	r3, [r3, #16]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d018      	beq.n	8006d24 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cfa:	e853 3f00 	ldrex	r3, [r3]
 8006cfe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d06:	657b      	str	r3, [r7, #84]	; 0x54
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	461a      	mov	r2, r3
 8006d0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d10:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d12:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d14:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006d16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d18:	e841 2300 	strex	r3, r2, [r1]
 8006d1c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006d1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d1e6      	bne.n	8006cf2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	3308      	adds	r3, #8
 8006d2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d2e:	e853 3f00 	ldrex	r3, [r3]
 8006d32:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d36:	f043 0301 	orr.w	r3, r3, #1
 8006d3a:	653b      	str	r3, [r7, #80]	; 0x50
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	3308      	adds	r3, #8
 8006d42:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006d44:	637a      	str	r2, [r7, #52]	; 0x34
 8006d46:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d48:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006d4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d4c:	e841 2300 	strex	r3, r2, [r1]
 8006d50:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d1e5      	bne.n	8006d24 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	3308      	adds	r3, #8
 8006d5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	e853 3f00 	ldrex	r3, [r3]
 8006d66:	613b      	str	r3, [r7, #16]
   return(result);
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	3308      	adds	r3, #8
 8006d76:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006d78:	623a      	str	r2, [r7, #32]
 8006d7a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d7c:	69f9      	ldr	r1, [r7, #28]
 8006d7e:	6a3a      	ldr	r2, [r7, #32]
 8006d80:	e841 2300 	strex	r3, r2, [r1]
 8006d84:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d86:	69bb      	ldr	r3, [r7, #24]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d1e5      	bne.n	8006d58 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8006d8c:	2300      	movs	r3, #0
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3758      	adds	r7, #88	; 0x58
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}
 8006d96:	bf00      	nop
 8006d98:	08006eb7 	.word	0x08006eb7
 8006d9c:	08006fdb 	.word	0x08006fdb
 8006da0:	08007013 	.word	0x08007013

08006da4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b089      	sub	sp, #36	; 0x24
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	e853 3f00 	ldrex	r3, [r3]
 8006db8:	60bb      	str	r3, [r7, #8]
   return(result);
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006dc0:	61fb      	str	r3, [r7, #28]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	69fb      	ldr	r3, [r7, #28]
 8006dca:	61bb      	str	r3, [r7, #24]
 8006dcc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dce:	6979      	ldr	r1, [r7, #20]
 8006dd0:	69ba      	ldr	r2, [r7, #24]
 8006dd2:	e841 2300 	strex	r3, r2, [r1]
 8006dd6:	613b      	str	r3, [r7, #16]
   return(result);
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d1e6      	bne.n	8006dac <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2220      	movs	r2, #32
 8006de2:	679a      	str	r2, [r3, #120]	; 0x78
}
 8006de4:	bf00      	nop
 8006de6:	3724      	adds	r7, #36	; 0x24
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr

08006df0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b095      	sub	sp, #84	; 0x54
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e00:	e853 3f00 	ldrex	r3, [r3]
 8006e04:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e0c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	461a      	mov	r2, r3
 8006e14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e16:	643b      	str	r3, [r7, #64]	; 0x40
 8006e18:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e1a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006e1c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e1e:	e841 2300 	strex	r3, r2, [r1]
 8006e22:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d1e6      	bne.n	8006df8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	3308      	adds	r3, #8
 8006e30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e32:	6a3b      	ldr	r3, [r7, #32]
 8006e34:	e853 3f00 	ldrex	r3, [r3]
 8006e38:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e3a:	69fb      	ldr	r3, [r7, #28]
 8006e3c:	f023 0301 	bic.w	r3, r3, #1
 8006e40:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	3308      	adds	r3, #8
 8006e48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e4c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e52:	e841 2300 	strex	r3, r2, [r1]
 8006e56:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d1e5      	bne.n	8006e2a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e62:	2b01      	cmp	r3, #1
 8006e64:	d118      	bne.n	8006e98 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	e853 3f00 	ldrex	r3, [r3]
 8006e72:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	f023 0310 	bic.w	r3, r3, #16
 8006e7a:	647b      	str	r3, [r7, #68]	; 0x44
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	461a      	mov	r2, r3
 8006e82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e84:	61bb      	str	r3, [r7, #24]
 8006e86:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e88:	6979      	ldr	r1, [r7, #20]
 8006e8a:	69ba      	ldr	r2, [r7, #24]
 8006e8c:	e841 2300 	strex	r3, r2, [r1]
 8006e90:	613b      	str	r3, [r7, #16]
   return(result);
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d1e6      	bne.n	8006e66 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2220      	movs	r2, #32
 8006e9c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006eaa:	bf00      	nop
 8006eac:	3754      	adds	r7, #84	; 0x54
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb4:	4770      	bx	lr

08006eb6 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006eb6:	b580      	push	{r7, lr}
 8006eb8:	b09c      	sub	sp, #112	; 0x70
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ec2:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f003 0320 	and.w	r3, r3, #32
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d170      	bne.n	8006fb4 <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 8006ed2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006eda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ee2:	e853 3f00 	ldrex	r3, [r3]
 8006ee6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006ee8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006eea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006eee:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ef0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006ef8:	65bb      	str	r3, [r7, #88]	; 0x58
 8006efa:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006efc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006efe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006f00:	e841 2300 	strex	r3, r2, [r1]
 8006f04:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006f06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d1e6      	bne.n	8006eda <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	3308      	adds	r3, #8
 8006f12:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f16:	e853 3f00 	ldrex	r3, [r3]
 8006f1a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006f1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f1e:	f023 0301 	bic.w	r3, r3, #1
 8006f22:	667b      	str	r3, [r7, #100]	; 0x64
 8006f24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	3308      	adds	r3, #8
 8006f2a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006f2c:	647a      	str	r2, [r7, #68]	; 0x44
 8006f2e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f30:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006f32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f34:	e841 2300 	strex	r3, r2, [r1]
 8006f38:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006f3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d1e5      	bne.n	8006f0c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	3308      	adds	r3, #8
 8006f46:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f4a:	e853 3f00 	ldrex	r3, [r3]
 8006f4e:	623b      	str	r3, [r7, #32]
   return(result);
 8006f50:	6a3b      	ldr	r3, [r7, #32]
 8006f52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f56:	663b      	str	r3, [r7, #96]	; 0x60
 8006f58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	3308      	adds	r3, #8
 8006f5e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006f60:	633a      	str	r2, [r7, #48]	; 0x30
 8006f62:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f64:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f68:	e841 2300 	strex	r3, r2, [r1]
 8006f6c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d1e5      	bne.n	8006f40 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006f74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f76:	2220      	movs	r2, #32
 8006f78:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f7e:	2b01      	cmp	r3, #1
 8006f80:	d118      	bne.n	8006fb4 <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	e853 3f00 	ldrex	r3, [r3]
 8006f8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f023 0310 	bic.w	r3, r3, #16
 8006f96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006fa0:	61fb      	str	r3, [r7, #28]
 8006fa2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa4:	69b9      	ldr	r1, [r7, #24]
 8006fa6:	69fa      	ldr	r2, [r7, #28]
 8006fa8:	e841 2300 	strex	r3, r2, [r1]
 8006fac:	617b      	str	r3, [r7, #20]
   return(result);
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d1e6      	bne.n	8006f82 <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	d107      	bne.n	8006fcc <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006fbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fbe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006fc2:	4619      	mov	r1, r3
 8006fc4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006fc6:	f7ff f9d3 	bl	8006370 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006fca:	e002      	b.n	8006fd2 <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 8006fcc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006fce:	f7ff f9b1 	bl	8006334 <HAL_UART_RxCpltCallback>
}
 8006fd2:	bf00      	nop
 8006fd4:	3770      	adds	r7, #112	; 0x70
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}

08006fda <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006fda:	b580      	push	{r7, lr}
 8006fdc:	b084      	sub	sp, #16
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fe6:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fec:	2b01      	cmp	r3, #1
 8006fee:	d109      	bne.n	8007004 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006ff6:	085b      	lsrs	r3, r3, #1
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	4619      	mov	r1, r3
 8006ffc:	68f8      	ldr	r0, [r7, #12]
 8006ffe:	f7ff f9b7 	bl	8006370 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007002:	e002      	b.n	800700a <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8007004:	68f8      	ldr	r0, [r7, #12]
 8007006:	f7ff f99f 	bl	8006348 <HAL_UART_RxHalfCpltCallback>
}
 800700a:	bf00      	nop
 800700c:	3710      	adds	r7, #16
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}

08007012 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007012:	b580      	push	{r7, lr}
 8007014:	b086      	sub	sp, #24
 8007016:	af00      	add	r7, sp, #0
 8007018:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800701e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007024:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800702a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007036:	2b80      	cmp	r3, #128	; 0x80
 8007038:	d109      	bne.n	800704e <UART_DMAError+0x3c>
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	2b21      	cmp	r3, #33	; 0x21
 800703e:	d106      	bne.n	800704e <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	2200      	movs	r2, #0
 8007044:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8007048:	6978      	ldr	r0, [r7, #20]
 800704a:	f7ff feab 	bl	8006da4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	689b      	ldr	r3, [r3, #8]
 8007054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007058:	2b40      	cmp	r3, #64	; 0x40
 800705a:	d109      	bne.n	8007070 <UART_DMAError+0x5e>
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2b22      	cmp	r3, #34	; 0x22
 8007060:	d106      	bne.n	8007070 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	2200      	movs	r2, #0
 8007066:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800706a:	6978      	ldr	r0, [r7, #20]
 800706c:	f7ff fec0 	bl	8006df0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007076:	f043 0210 	orr.w	r2, r3, #16
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007080:	6978      	ldr	r0, [r7, #20]
 8007082:	f7ff f96b 	bl	800635c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007086:	bf00      	nop
 8007088:	3718      	adds	r7, #24
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}

0800708e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800708e:	b580      	push	{r7, lr}
 8007090:	b084      	sub	sp, #16
 8007092:	af00      	add	r7, sp, #0
 8007094:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800709a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2200      	movs	r2, #0
 80070a0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2200      	movs	r2, #0
 80070a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80070ac:	68f8      	ldr	r0, [r7, #12]
 80070ae:	f7ff f955 	bl	800635c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070b2:	bf00      	nop
 80070b4:	3710      	adds	r7, #16
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}

080070ba <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80070ba:	b580      	push	{r7, lr}
 80070bc:	b088      	sub	sp, #32
 80070be:	af00      	add	r7, sp, #0
 80070c0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	e853 3f00 	ldrex	r3, [r3]
 80070ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070d6:	61fb      	str	r3, [r7, #28]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	461a      	mov	r2, r3
 80070de:	69fb      	ldr	r3, [r7, #28]
 80070e0:	61bb      	str	r3, [r7, #24]
 80070e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070e4:	6979      	ldr	r1, [r7, #20]
 80070e6:	69ba      	ldr	r2, [r7, #24]
 80070e8:	e841 2300 	strex	r3, r2, [r1]
 80070ec:	613b      	str	r3, [r7, #16]
   return(result);
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d1e6      	bne.n	80070c2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2220      	movs	r2, #32
 80070f8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2200      	movs	r2, #0
 80070fe:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f7ff f90d 	bl	8006320 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007106:	bf00      	nop
 8007108:	3720      	adds	r7, #32
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}

0800710e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800710e:	b480      	push	{r7}
 8007110:	b083      	sub	sp, #12
 8007112:	af00      	add	r7, sp, #0
 8007114:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007116:	bf00      	nop
 8007118:	370c      	adds	r7, #12
 800711a:	46bd      	mov	sp, r7
 800711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007120:	4770      	bx	lr
	...

08007124 <__errno>:
 8007124:	4b01      	ldr	r3, [pc, #4]	; (800712c <__errno+0x8>)
 8007126:	6818      	ldr	r0, [r3, #0]
 8007128:	4770      	bx	lr
 800712a:	bf00      	nop
 800712c:	20000010 	.word	0x20000010

08007130 <__libc_init_array>:
 8007130:	b570      	push	{r4, r5, r6, lr}
 8007132:	4d0d      	ldr	r5, [pc, #52]	; (8007168 <__libc_init_array+0x38>)
 8007134:	4c0d      	ldr	r4, [pc, #52]	; (800716c <__libc_init_array+0x3c>)
 8007136:	1b64      	subs	r4, r4, r5
 8007138:	10a4      	asrs	r4, r4, #2
 800713a:	2600      	movs	r6, #0
 800713c:	42a6      	cmp	r6, r4
 800713e:	d109      	bne.n	8007154 <__libc_init_array+0x24>
 8007140:	4d0b      	ldr	r5, [pc, #44]	; (8007170 <__libc_init_array+0x40>)
 8007142:	4c0c      	ldr	r4, [pc, #48]	; (8007174 <__libc_init_array+0x44>)
 8007144:	f001 f832 	bl	80081ac <_init>
 8007148:	1b64      	subs	r4, r4, r5
 800714a:	10a4      	asrs	r4, r4, #2
 800714c:	2600      	movs	r6, #0
 800714e:	42a6      	cmp	r6, r4
 8007150:	d105      	bne.n	800715e <__libc_init_array+0x2e>
 8007152:	bd70      	pop	{r4, r5, r6, pc}
 8007154:	f855 3b04 	ldr.w	r3, [r5], #4
 8007158:	4798      	blx	r3
 800715a:	3601      	adds	r6, #1
 800715c:	e7ee      	b.n	800713c <__libc_init_array+0xc>
 800715e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007162:	4798      	blx	r3
 8007164:	3601      	adds	r6, #1
 8007166:	e7f2      	b.n	800714e <__libc_init_array+0x1e>
 8007168:	0800838c 	.word	0x0800838c
 800716c:	0800838c 	.word	0x0800838c
 8007170:	0800838c 	.word	0x0800838c
 8007174:	08008390 	.word	0x08008390

08007178 <memcpy>:
 8007178:	440a      	add	r2, r1
 800717a:	4291      	cmp	r1, r2
 800717c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007180:	d100      	bne.n	8007184 <memcpy+0xc>
 8007182:	4770      	bx	lr
 8007184:	b510      	push	{r4, lr}
 8007186:	f811 4b01 	ldrb.w	r4, [r1], #1
 800718a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800718e:	4291      	cmp	r1, r2
 8007190:	d1f9      	bne.n	8007186 <memcpy+0xe>
 8007192:	bd10      	pop	{r4, pc}

08007194 <memset>:
 8007194:	4402      	add	r2, r0
 8007196:	4603      	mov	r3, r0
 8007198:	4293      	cmp	r3, r2
 800719a:	d100      	bne.n	800719e <memset+0xa>
 800719c:	4770      	bx	lr
 800719e:	f803 1b01 	strb.w	r1, [r3], #1
 80071a2:	e7f9      	b.n	8007198 <memset+0x4>

080071a4 <iprintf>:
 80071a4:	b40f      	push	{r0, r1, r2, r3}
 80071a6:	4b0a      	ldr	r3, [pc, #40]	; (80071d0 <iprintf+0x2c>)
 80071a8:	b513      	push	{r0, r1, r4, lr}
 80071aa:	681c      	ldr	r4, [r3, #0]
 80071ac:	b124      	cbz	r4, 80071b8 <iprintf+0x14>
 80071ae:	69a3      	ldr	r3, [r4, #24]
 80071b0:	b913      	cbnz	r3, 80071b8 <iprintf+0x14>
 80071b2:	4620      	mov	r0, r4
 80071b4:	f000 fa5e 	bl	8007674 <__sinit>
 80071b8:	ab05      	add	r3, sp, #20
 80071ba:	9a04      	ldr	r2, [sp, #16]
 80071bc:	68a1      	ldr	r1, [r4, #8]
 80071be:	9301      	str	r3, [sp, #4]
 80071c0:	4620      	mov	r0, r4
 80071c2:	f000 fc67 	bl	8007a94 <_vfiprintf_r>
 80071c6:	b002      	add	sp, #8
 80071c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071cc:	b004      	add	sp, #16
 80071ce:	4770      	bx	lr
 80071d0:	20000010 	.word	0x20000010

080071d4 <_puts_r>:
 80071d4:	b570      	push	{r4, r5, r6, lr}
 80071d6:	460e      	mov	r6, r1
 80071d8:	4605      	mov	r5, r0
 80071da:	b118      	cbz	r0, 80071e4 <_puts_r+0x10>
 80071dc:	6983      	ldr	r3, [r0, #24]
 80071de:	b90b      	cbnz	r3, 80071e4 <_puts_r+0x10>
 80071e0:	f000 fa48 	bl	8007674 <__sinit>
 80071e4:	69ab      	ldr	r3, [r5, #24]
 80071e6:	68ac      	ldr	r4, [r5, #8]
 80071e8:	b913      	cbnz	r3, 80071f0 <_puts_r+0x1c>
 80071ea:	4628      	mov	r0, r5
 80071ec:	f000 fa42 	bl	8007674 <__sinit>
 80071f0:	4b2c      	ldr	r3, [pc, #176]	; (80072a4 <_puts_r+0xd0>)
 80071f2:	429c      	cmp	r4, r3
 80071f4:	d120      	bne.n	8007238 <_puts_r+0x64>
 80071f6:	686c      	ldr	r4, [r5, #4]
 80071f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80071fa:	07db      	lsls	r3, r3, #31
 80071fc:	d405      	bmi.n	800720a <_puts_r+0x36>
 80071fe:	89a3      	ldrh	r3, [r4, #12]
 8007200:	0598      	lsls	r0, r3, #22
 8007202:	d402      	bmi.n	800720a <_puts_r+0x36>
 8007204:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007206:	f000 fad3 	bl	80077b0 <__retarget_lock_acquire_recursive>
 800720a:	89a3      	ldrh	r3, [r4, #12]
 800720c:	0719      	lsls	r1, r3, #28
 800720e:	d51d      	bpl.n	800724c <_puts_r+0x78>
 8007210:	6923      	ldr	r3, [r4, #16]
 8007212:	b1db      	cbz	r3, 800724c <_puts_r+0x78>
 8007214:	3e01      	subs	r6, #1
 8007216:	68a3      	ldr	r3, [r4, #8]
 8007218:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800721c:	3b01      	subs	r3, #1
 800721e:	60a3      	str	r3, [r4, #8]
 8007220:	bb39      	cbnz	r1, 8007272 <_puts_r+0x9e>
 8007222:	2b00      	cmp	r3, #0
 8007224:	da38      	bge.n	8007298 <_puts_r+0xc4>
 8007226:	4622      	mov	r2, r4
 8007228:	210a      	movs	r1, #10
 800722a:	4628      	mov	r0, r5
 800722c:	f000 f848 	bl	80072c0 <__swbuf_r>
 8007230:	3001      	adds	r0, #1
 8007232:	d011      	beq.n	8007258 <_puts_r+0x84>
 8007234:	250a      	movs	r5, #10
 8007236:	e011      	b.n	800725c <_puts_r+0x88>
 8007238:	4b1b      	ldr	r3, [pc, #108]	; (80072a8 <_puts_r+0xd4>)
 800723a:	429c      	cmp	r4, r3
 800723c:	d101      	bne.n	8007242 <_puts_r+0x6e>
 800723e:	68ac      	ldr	r4, [r5, #8]
 8007240:	e7da      	b.n	80071f8 <_puts_r+0x24>
 8007242:	4b1a      	ldr	r3, [pc, #104]	; (80072ac <_puts_r+0xd8>)
 8007244:	429c      	cmp	r4, r3
 8007246:	bf08      	it	eq
 8007248:	68ec      	ldreq	r4, [r5, #12]
 800724a:	e7d5      	b.n	80071f8 <_puts_r+0x24>
 800724c:	4621      	mov	r1, r4
 800724e:	4628      	mov	r0, r5
 8007250:	f000 f888 	bl	8007364 <__swsetup_r>
 8007254:	2800      	cmp	r0, #0
 8007256:	d0dd      	beq.n	8007214 <_puts_r+0x40>
 8007258:	f04f 35ff 	mov.w	r5, #4294967295
 800725c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800725e:	07da      	lsls	r2, r3, #31
 8007260:	d405      	bmi.n	800726e <_puts_r+0x9a>
 8007262:	89a3      	ldrh	r3, [r4, #12]
 8007264:	059b      	lsls	r3, r3, #22
 8007266:	d402      	bmi.n	800726e <_puts_r+0x9a>
 8007268:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800726a:	f000 faa2 	bl	80077b2 <__retarget_lock_release_recursive>
 800726e:	4628      	mov	r0, r5
 8007270:	bd70      	pop	{r4, r5, r6, pc}
 8007272:	2b00      	cmp	r3, #0
 8007274:	da04      	bge.n	8007280 <_puts_r+0xac>
 8007276:	69a2      	ldr	r2, [r4, #24]
 8007278:	429a      	cmp	r2, r3
 800727a:	dc06      	bgt.n	800728a <_puts_r+0xb6>
 800727c:	290a      	cmp	r1, #10
 800727e:	d004      	beq.n	800728a <_puts_r+0xb6>
 8007280:	6823      	ldr	r3, [r4, #0]
 8007282:	1c5a      	adds	r2, r3, #1
 8007284:	6022      	str	r2, [r4, #0]
 8007286:	7019      	strb	r1, [r3, #0]
 8007288:	e7c5      	b.n	8007216 <_puts_r+0x42>
 800728a:	4622      	mov	r2, r4
 800728c:	4628      	mov	r0, r5
 800728e:	f000 f817 	bl	80072c0 <__swbuf_r>
 8007292:	3001      	adds	r0, #1
 8007294:	d1bf      	bne.n	8007216 <_puts_r+0x42>
 8007296:	e7df      	b.n	8007258 <_puts_r+0x84>
 8007298:	6823      	ldr	r3, [r4, #0]
 800729a:	250a      	movs	r5, #10
 800729c:	1c5a      	adds	r2, r3, #1
 800729e:	6022      	str	r2, [r4, #0]
 80072a0:	701d      	strb	r5, [r3, #0]
 80072a2:	e7db      	b.n	800725c <_puts_r+0x88>
 80072a4:	08008310 	.word	0x08008310
 80072a8:	08008330 	.word	0x08008330
 80072ac:	080082f0 	.word	0x080082f0

080072b0 <puts>:
 80072b0:	4b02      	ldr	r3, [pc, #8]	; (80072bc <puts+0xc>)
 80072b2:	4601      	mov	r1, r0
 80072b4:	6818      	ldr	r0, [r3, #0]
 80072b6:	f7ff bf8d 	b.w	80071d4 <_puts_r>
 80072ba:	bf00      	nop
 80072bc:	20000010 	.word	0x20000010

080072c0 <__swbuf_r>:
 80072c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072c2:	460e      	mov	r6, r1
 80072c4:	4614      	mov	r4, r2
 80072c6:	4605      	mov	r5, r0
 80072c8:	b118      	cbz	r0, 80072d2 <__swbuf_r+0x12>
 80072ca:	6983      	ldr	r3, [r0, #24]
 80072cc:	b90b      	cbnz	r3, 80072d2 <__swbuf_r+0x12>
 80072ce:	f000 f9d1 	bl	8007674 <__sinit>
 80072d2:	4b21      	ldr	r3, [pc, #132]	; (8007358 <__swbuf_r+0x98>)
 80072d4:	429c      	cmp	r4, r3
 80072d6:	d12b      	bne.n	8007330 <__swbuf_r+0x70>
 80072d8:	686c      	ldr	r4, [r5, #4]
 80072da:	69a3      	ldr	r3, [r4, #24]
 80072dc:	60a3      	str	r3, [r4, #8]
 80072de:	89a3      	ldrh	r3, [r4, #12]
 80072e0:	071a      	lsls	r2, r3, #28
 80072e2:	d52f      	bpl.n	8007344 <__swbuf_r+0x84>
 80072e4:	6923      	ldr	r3, [r4, #16]
 80072e6:	b36b      	cbz	r3, 8007344 <__swbuf_r+0x84>
 80072e8:	6923      	ldr	r3, [r4, #16]
 80072ea:	6820      	ldr	r0, [r4, #0]
 80072ec:	1ac0      	subs	r0, r0, r3
 80072ee:	6963      	ldr	r3, [r4, #20]
 80072f0:	b2f6      	uxtb	r6, r6
 80072f2:	4283      	cmp	r3, r0
 80072f4:	4637      	mov	r7, r6
 80072f6:	dc04      	bgt.n	8007302 <__swbuf_r+0x42>
 80072f8:	4621      	mov	r1, r4
 80072fa:	4628      	mov	r0, r5
 80072fc:	f000 f926 	bl	800754c <_fflush_r>
 8007300:	bb30      	cbnz	r0, 8007350 <__swbuf_r+0x90>
 8007302:	68a3      	ldr	r3, [r4, #8]
 8007304:	3b01      	subs	r3, #1
 8007306:	60a3      	str	r3, [r4, #8]
 8007308:	6823      	ldr	r3, [r4, #0]
 800730a:	1c5a      	adds	r2, r3, #1
 800730c:	6022      	str	r2, [r4, #0]
 800730e:	701e      	strb	r6, [r3, #0]
 8007310:	6963      	ldr	r3, [r4, #20]
 8007312:	3001      	adds	r0, #1
 8007314:	4283      	cmp	r3, r0
 8007316:	d004      	beq.n	8007322 <__swbuf_r+0x62>
 8007318:	89a3      	ldrh	r3, [r4, #12]
 800731a:	07db      	lsls	r3, r3, #31
 800731c:	d506      	bpl.n	800732c <__swbuf_r+0x6c>
 800731e:	2e0a      	cmp	r6, #10
 8007320:	d104      	bne.n	800732c <__swbuf_r+0x6c>
 8007322:	4621      	mov	r1, r4
 8007324:	4628      	mov	r0, r5
 8007326:	f000 f911 	bl	800754c <_fflush_r>
 800732a:	b988      	cbnz	r0, 8007350 <__swbuf_r+0x90>
 800732c:	4638      	mov	r0, r7
 800732e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007330:	4b0a      	ldr	r3, [pc, #40]	; (800735c <__swbuf_r+0x9c>)
 8007332:	429c      	cmp	r4, r3
 8007334:	d101      	bne.n	800733a <__swbuf_r+0x7a>
 8007336:	68ac      	ldr	r4, [r5, #8]
 8007338:	e7cf      	b.n	80072da <__swbuf_r+0x1a>
 800733a:	4b09      	ldr	r3, [pc, #36]	; (8007360 <__swbuf_r+0xa0>)
 800733c:	429c      	cmp	r4, r3
 800733e:	bf08      	it	eq
 8007340:	68ec      	ldreq	r4, [r5, #12]
 8007342:	e7ca      	b.n	80072da <__swbuf_r+0x1a>
 8007344:	4621      	mov	r1, r4
 8007346:	4628      	mov	r0, r5
 8007348:	f000 f80c 	bl	8007364 <__swsetup_r>
 800734c:	2800      	cmp	r0, #0
 800734e:	d0cb      	beq.n	80072e8 <__swbuf_r+0x28>
 8007350:	f04f 37ff 	mov.w	r7, #4294967295
 8007354:	e7ea      	b.n	800732c <__swbuf_r+0x6c>
 8007356:	bf00      	nop
 8007358:	08008310 	.word	0x08008310
 800735c:	08008330 	.word	0x08008330
 8007360:	080082f0 	.word	0x080082f0

08007364 <__swsetup_r>:
 8007364:	4b32      	ldr	r3, [pc, #200]	; (8007430 <__swsetup_r+0xcc>)
 8007366:	b570      	push	{r4, r5, r6, lr}
 8007368:	681d      	ldr	r5, [r3, #0]
 800736a:	4606      	mov	r6, r0
 800736c:	460c      	mov	r4, r1
 800736e:	b125      	cbz	r5, 800737a <__swsetup_r+0x16>
 8007370:	69ab      	ldr	r3, [r5, #24]
 8007372:	b913      	cbnz	r3, 800737a <__swsetup_r+0x16>
 8007374:	4628      	mov	r0, r5
 8007376:	f000 f97d 	bl	8007674 <__sinit>
 800737a:	4b2e      	ldr	r3, [pc, #184]	; (8007434 <__swsetup_r+0xd0>)
 800737c:	429c      	cmp	r4, r3
 800737e:	d10f      	bne.n	80073a0 <__swsetup_r+0x3c>
 8007380:	686c      	ldr	r4, [r5, #4]
 8007382:	89a3      	ldrh	r3, [r4, #12]
 8007384:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007388:	0719      	lsls	r1, r3, #28
 800738a:	d42c      	bmi.n	80073e6 <__swsetup_r+0x82>
 800738c:	06dd      	lsls	r5, r3, #27
 800738e:	d411      	bmi.n	80073b4 <__swsetup_r+0x50>
 8007390:	2309      	movs	r3, #9
 8007392:	6033      	str	r3, [r6, #0]
 8007394:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007398:	81a3      	strh	r3, [r4, #12]
 800739a:	f04f 30ff 	mov.w	r0, #4294967295
 800739e:	e03e      	b.n	800741e <__swsetup_r+0xba>
 80073a0:	4b25      	ldr	r3, [pc, #148]	; (8007438 <__swsetup_r+0xd4>)
 80073a2:	429c      	cmp	r4, r3
 80073a4:	d101      	bne.n	80073aa <__swsetup_r+0x46>
 80073a6:	68ac      	ldr	r4, [r5, #8]
 80073a8:	e7eb      	b.n	8007382 <__swsetup_r+0x1e>
 80073aa:	4b24      	ldr	r3, [pc, #144]	; (800743c <__swsetup_r+0xd8>)
 80073ac:	429c      	cmp	r4, r3
 80073ae:	bf08      	it	eq
 80073b0:	68ec      	ldreq	r4, [r5, #12]
 80073b2:	e7e6      	b.n	8007382 <__swsetup_r+0x1e>
 80073b4:	0758      	lsls	r0, r3, #29
 80073b6:	d512      	bpl.n	80073de <__swsetup_r+0x7a>
 80073b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80073ba:	b141      	cbz	r1, 80073ce <__swsetup_r+0x6a>
 80073bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80073c0:	4299      	cmp	r1, r3
 80073c2:	d002      	beq.n	80073ca <__swsetup_r+0x66>
 80073c4:	4630      	mov	r0, r6
 80073c6:	f000 fa5b 	bl	8007880 <_free_r>
 80073ca:	2300      	movs	r3, #0
 80073cc:	6363      	str	r3, [r4, #52]	; 0x34
 80073ce:	89a3      	ldrh	r3, [r4, #12]
 80073d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80073d4:	81a3      	strh	r3, [r4, #12]
 80073d6:	2300      	movs	r3, #0
 80073d8:	6063      	str	r3, [r4, #4]
 80073da:	6923      	ldr	r3, [r4, #16]
 80073dc:	6023      	str	r3, [r4, #0]
 80073de:	89a3      	ldrh	r3, [r4, #12]
 80073e0:	f043 0308 	orr.w	r3, r3, #8
 80073e4:	81a3      	strh	r3, [r4, #12]
 80073e6:	6923      	ldr	r3, [r4, #16]
 80073e8:	b94b      	cbnz	r3, 80073fe <__swsetup_r+0x9a>
 80073ea:	89a3      	ldrh	r3, [r4, #12]
 80073ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80073f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073f4:	d003      	beq.n	80073fe <__swsetup_r+0x9a>
 80073f6:	4621      	mov	r1, r4
 80073f8:	4630      	mov	r0, r6
 80073fa:	f000 fa01 	bl	8007800 <__smakebuf_r>
 80073fe:	89a0      	ldrh	r0, [r4, #12]
 8007400:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007404:	f010 0301 	ands.w	r3, r0, #1
 8007408:	d00a      	beq.n	8007420 <__swsetup_r+0xbc>
 800740a:	2300      	movs	r3, #0
 800740c:	60a3      	str	r3, [r4, #8]
 800740e:	6963      	ldr	r3, [r4, #20]
 8007410:	425b      	negs	r3, r3
 8007412:	61a3      	str	r3, [r4, #24]
 8007414:	6923      	ldr	r3, [r4, #16]
 8007416:	b943      	cbnz	r3, 800742a <__swsetup_r+0xc6>
 8007418:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800741c:	d1ba      	bne.n	8007394 <__swsetup_r+0x30>
 800741e:	bd70      	pop	{r4, r5, r6, pc}
 8007420:	0781      	lsls	r1, r0, #30
 8007422:	bf58      	it	pl
 8007424:	6963      	ldrpl	r3, [r4, #20]
 8007426:	60a3      	str	r3, [r4, #8]
 8007428:	e7f4      	b.n	8007414 <__swsetup_r+0xb0>
 800742a:	2000      	movs	r0, #0
 800742c:	e7f7      	b.n	800741e <__swsetup_r+0xba>
 800742e:	bf00      	nop
 8007430:	20000010 	.word	0x20000010
 8007434:	08008310 	.word	0x08008310
 8007438:	08008330 	.word	0x08008330
 800743c:	080082f0 	.word	0x080082f0

08007440 <__sflush_r>:
 8007440:	898a      	ldrh	r2, [r1, #12]
 8007442:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007446:	4605      	mov	r5, r0
 8007448:	0710      	lsls	r0, r2, #28
 800744a:	460c      	mov	r4, r1
 800744c:	d458      	bmi.n	8007500 <__sflush_r+0xc0>
 800744e:	684b      	ldr	r3, [r1, #4]
 8007450:	2b00      	cmp	r3, #0
 8007452:	dc05      	bgt.n	8007460 <__sflush_r+0x20>
 8007454:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007456:	2b00      	cmp	r3, #0
 8007458:	dc02      	bgt.n	8007460 <__sflush_r+0x20>
 800745a:	2000      	movs	r0, #0
 800745c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007460:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007462:	2e00      	cmp	r6, #0
 8007464:	d0f9      	beq.n	800745a <__sflush_r+0x1a>
 8007466:	2300      	movs	r3, #0
 8007468:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800746c:	682f      	ldr	r7, [r5, #0]
 800746e:	602b      	str	r3, [r5, #0]
 8007470:	d032      	beq.n	80074d8 <__sflush_r+0x98>
 8007472:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007474:	89a3      	ldrh	r3, [r4, #12]
 8007476:	075a      	lsls	r2, r3, #29
 8007478:	d505      	bpl.n	8007486 <__sflush_r+0x46>
 800747a:	6863      	ldr	r3, [r4, #4]
 800747c:	1ac0      	subs	r0, r0, r3
 800747e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007480:	b10b      	cbz	r3, 8007486 <__sflush_r+0x46>
 8007482:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007484:	1ac0      	subs	r0, r0, r3
 8007486:	2300      	movs	r3, #0
 8007488:	4602      	mov	r2, r0
 800748a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800748c:	6a21      	ldr	r1, [r4, #32]
 800748e:	4628      	mov	r0, r5
 8007490:	47b0      	blx	r6
 8007492:	1c43      	adds	r3, r0, #1
 8007494:	89a3      	ldrh	r3, [r4, #12]
 8007496:	d106      	bne.n	80074a6 <__sflush_r+0x66>
 8007498:	6829      	ldr	r1, [r5, #0]
 800749a:	291d      	cmp	r1, #29
 800749c:	d82c      	bhi.n	80074f8 <__sflush_r+0xb8>
 800749e:	4a2a      	ldr	r2, [pc, #168]	; (8007548 <__sflush_r+0x108>)
 80074a0:	40ca      	lsrs	r2, r1
 80074a2:	07d6      	lsls	r6, r2, #31
 80074a4:	d528      	bpl.n	80074f8 <__sflush_r+0xb8>
 80074a6:	2200      	movs	r2, #0
 80074a8:	6062      	str	r2, [r4, #4]
 80074aa:	04d9      	lsls	r1, r3, #19
 80074ac:	6922      	ldr	r2, [r4, #16]
 80074ae:	6022      	str	r2, [r4, #0]
 80074b0:	d504      	bpl.n	80074bc <__sflush_r+0x7c>
 80074b2:	1c42      	adds	r2, r0, #1
 80074b4:	d101      	bne.n	80074ba <__sflush_r+0x7a>
 80074b6:	682b      	ldr	r3, [r5, #0]
 80074b8:	b903      	cbnz	r3, 80074bc <__sflush_r+0x7c>
 80074ba:	6560      	str	r0, [r4, #84]	; 0x54
 80074bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80074be:	602f      	str	r7, [r5, #0]
 80074c0:	2900      	cmp	r1, #0
 80074c2:	d0ca      	beq.n	800745a <__sflush_r+0x1a>
 80074c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80074c8:	4299      	cmp	r1, r3
 80074ca:	d002      	beq.n	80074d2 <__sflush_r+0x92>
 80074cc:	4628      	mov	r0, r5
 80074ce:	f000 f9d7 	bl	8007880 <_free_r>
 80074d2:	2000      	movs	r0, #0
 80074d4:	6360      	str	r0, [r4, #52]	; 0x34
 80074d6:	e7c1      	b.n	800745c <__sflush_r+0x1c>
 80074d8:	6a21      	ldr	r1, [r4, #32]
 80074da:	2301      	movs	r3, #1
 80074dc:	4628      	mov	r0, r5
 80074de:	47b0      	blx	r6
 80074e0:	1c41      	adds	r1, r0, #1
 80074e2:	d1c7      	bne.n	8007474 <__sflush_r+0x34>
 80074e4:	682b      	ldr	r3, [r5, #0]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d0c4      	beq.n	8007474 <__sflush_r+0x34>
 80074ea:	2b1d      	cmp	r3, #29
 80074ec:	d001      	beq.n	80074f2 <__sflush_r+0xb2>
 80074ee:	2b16      	cmp	r3, #22
 80074f0:	d101      	bne.n	80074f6 <__sflush_r+0xb6>
 80074f2:	602f      	str	r7, [r5, #0]
 80074f4:	e7b1      	b.n	800745a <__sflush_r+0x1a>
 80074f6:	89a3      	ldrh	r3, [r4, #12]
 80074f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074fc:	81a3      	strh	r3, [r4, #12]
 80074fe:	e7ad      	b.n	800745c <__sflush_r+0x1c>
 8007500:	690f      	ldr	r7, [r1, #16]
 8007502:	2f00      	cmp	r7, #0
 8007504:	d0a9      	beq.n	800745a <__sflush_r+0x1a>
 8007506:	0793      	lsls	r3, r2, #30
 8007508:	680e      	ldr	r6, [r1, #0]
 800750a:	bf08      	it	eq
 800750c:	694b      	ldreq	r3, [r1, #20]
 800750e:	600f      	str	r7, [r1, #0]
 8007510:	bf18      	it	ne
 8007512:	2300      	movne	r3, #0
 8007514:	eba6 0807 	sub.w	r8, r6, r7
 8007518:	608b      	str	r3, [r1, #8]
 800751a:	f1b8 0f00 	cmp.w	r8, #0
 800751e:	dd9c      	ble.n	800745a <__sflush_r+0x1a>
 8007520:	6a21      	ldr	r1, [r4, #32]
 8007522:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007524:	4643      	mov	r3, r8
 8007526:	463a      	mov	r2, r7
 8007528:	4628      	mov	r0, r5
 800752a:	47b0      	blx	r6
 800752c:	2800      	cmp	r0, #0
 800752e:	dc06      	bgt.n	800753e <__sflush_r+0xfe>
 8007530:	89a3      	ldrh	r3, [r4, #12]
 8007532:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007536:	81a3      	strh	r3, [r4, #12]
 8007538:	f04f 30ff 	mov.w	r0, #4294967295
 800753c:	e78e      	b.n	800745c <__sflush_r+0x1c>
 800753e:	4407      	add	r7, r0
 8007540:	eba8 0800 	sub.w	r8, r8, r0
 8007544:	e7e9      	b.n	800751a <__sflush_r+0xda>
 8007546:	bf00      	nop
 8007548:	20400001 	.word	0x20400001

0800754c <_fflush_r>:
 800754c:	b538      	push	{r3, r4, r5, lr}
 800754e:	690b      	ldr	r3, [r1, #16]
 8007550:	4605      	mov	r5, r0
 8007552:	460c      	mov	r4, r1
 8007554:	b913      	cbnz	r3, 800755c <_fflush_r+0x10>
 8007556:	2500      	movs	r5, #0
 8007558:	4628      	mov	r0, r5
 800755a:	bd38      	pop	{r3, r4, r5, pc}
 800755c:	b118      	cbz	r0, 8007566 <_fflush_r+0x1a>
 800755e:	6983      	ldr	r3, [r0, #24]
 8007560:	b90b      	cbnz	r3, 8007566 <_fflush_r+0x1a>
 8007562:	f000 f887 	bl	8007674 <__sinit>
 8007566:	4b14      	ldr	r3, [pc, #80]	; (80075b8 <_fflush_r+0x6c>)
 8007568:	429c      	cmp	r4, r3
 800756a:	d11b      	bne.n	80075a4 <_fflush_r+0x58>
 800756c:	686c      	ldr	r4, [r5, #4]
 800756e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d0ef      	beq.n	8007556 <_fflush_r+0xa>
 8007576:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007578:	07d0      	lsls	r0, r2, #31
 800757a:	d404      	bmi.n	8007586 <_fflush_r+0x3a>
 800757c:	0599      	lsls	r1, r3, #22
 800757e:	d402      	bmi.n	8007586 <_fflush_r+0x3a>
 8007580:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007582:	f000 f915 	bl	80077b0 <__retarget_lock_acquire_recursive>
 8007586:	4628      	mov	r0, r5
 8007588:	4621      	mov	r1, r4
 800758a:	f7ff ff59 	bl	8007440 <__sflush_r>
 800758e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007590:	07da      	lsls	r2, r3, #31
 8007592:	4605      	mov	r5, r0
 8007594:	d4e0      	bmi.n	8007558 <_fflush_r+0xc>
 8007596:	89a3      	ldrh	r3, [r4, #12]
 8007598:	059b      	lsls	r3, r3, #22
 800759a:	d4dd      	bmi.n	8007558 <_fflush_r+0xc>
 800759c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800759e:	f000 f908 	bl	80077b2 <__retarget_lock_release_recursive>
 80075a2:	e7d9      	b.n	8007558 <_fflush_r+0xc>
 80075a4:	4b05      	ldr	r3, [pc, #20]	; (80075bc <_fflush_r+0x70>)
 80075a6:	429c      	cmp	r4, r3
 80075a8:	d101      	bne.n	80075ae <_fflush_r+0x62>
 80075aa:	68ac      	ldr	r4, [r5, #8]
 80075ac:	e7df      	b.n	800756e <_fflush_r+0x22>
 80075ae:	4b04      	ldr	r3, [pc, #16]	; (80075c0 <_fflush_r+0x74>)
 80075b0:	429c      	cmp	r4, r3
 80075b2:	bf08      	it	eq
 80075b4:	68ec      	ldreq	r4, [r5, #12]
 80075b6:	e7da      	b.n	800756e <_fflush_r+0x22>
 80075b8:	08008310 	.word	0x08008310
 80075bc:	08008330 	.word	0x08008330
 80075c0:	080082f0 	.word	0x080082f0

080075c4 <std>:
 80075c4:	2300      	movs	r3, #0
 80075c6:	b510      	push	{r4, lr}
 80075c8:	4604      	mov	r4, r0
 80075ca:	e9c0 3300 	strd	r3, r3, [r0]
 80075ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80075d2:	6083      	str	r3, [r0, #8]
 80075d4:	8181      	strh	r1, [r0, #12]
 80075d6:	6643      	str	r3, [r0, #100]	; 0x64
 80075d8:	81c2      	strh	r2, [r0, #14]
 80075da:	6183      	str	r3, [r0, #24]
 80075dc:	4619      	mov	r1, r3
 80075de:	2208      	movs	r2, #8
 80075e0:	305c      	adds	r0, #92	; 0x5c
 80075e2:	f7ff fdd7 	bl	8007194 <memset>
 80075e6:	4b05      	ldr	r3, [pc, #20]	; (80075fc <std+0x38>)
 80075e8:	6263      	str	r3, [r4, #36]	; 0x24
 80075ea:	4b05      	ldr	r3, [pc, #20]	; (8007600 <std+0x3c>)
 80075ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80075ee:	4b05      	ldr	r3, [pc, #20]	; (8007604 <std+0x40>)
 80075f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80075f2:	4b05      	ldr	r3, [pc, #20]	; (8007608 <std+0x44>)
 80075f4:	6224      	str	r4, [r4, #32]
 80075f6:	6323      	str	r3, [r4, #48]	; 0x30
 80075f8:	bd10      	pop	{r4, pc}
 80075fa:	bf00      	nop
 80075fc:	0800803d 	.word	0x0800803d
 8007600:	0800805f 	.word	0x0800805f
 8007604:	08008097 	.word	0x08008097
 8007608:	080080bb 	.word	0x080080bb

0800760c <_cleanup_r>:
 800760c:	4901      	ldr	r1, [pc, #4]	; (8007614 <_cleanup_r+0x8>)
 800760e:	f000 b8af 	b.w	8007770 <_fwalk_reent>
 8007612:	bf00      	nop
 8007614:	0800754d 	.word	0x0800754d

08007618 <__sfmoreglue>:
 8007618:	b570      	push	{r4, r5, r6, lr}
 800761a:	2268      	movs	r2, #104	; 0x68
 800761c:	1e4d      	subs	r5, r1, #1
 800761e:	4355      	muls	r5, r2
 8007620:	460e      	mov	r6, r1
 8007622:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007626:	f000 f997 	bl	8007958 <_malloc_r>
 800762a:	4604      	mov	r4, r0
 800762c:	b140      	cbz	r0, 8007640 <__sfmoreglue+0x28>
 800762e:	2100      	movs	r1, #0
 8007630:	e9c0 1600 	strd	r1, r6, [r0]
 8007634:	300c      	adds	r0, #12
 8007636:	60a0      	str	r0, [r4, #8]
 8007638:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800763c:	f7ff fdaa 	bl	8007194 <memset>
 8007640:	4620      	mov	r0, r4
 8007642:	bd70      	pop	{r4, r5, r6, pc}

08007644 <__sfp_lock_acquire>:
 8007644:	4801      	ldr	r0, [pc, #4]	; (800764c <__sfp_lock_acquire+0x8>)
 8007646:	f000 b8b3 	b.w	80077b0 <__retarget_lock_acquire_recursive>
 800764a:	bf00      	nop
 800764c:	20001409 	.word	0x20001409

08007650 <__sfp_lock_release>:
 8007650:	4801      	ldr	r0, [pc, #4]	; (8007658 <__sfp_lock_release+0x8>)
 8007652:	f000 b8ae 	b.w	80077b2 <__retarget_lock_release_recursive>
 8007656:	bf00      	nop
 8007658:	20001409 	.word	0x20001409

0800765c <__sinit_lock_acquire>:
 800765c:	4801      	ldr	r0, [pc, #4]	; (8007664 <__sinit_lock_acquire+0x8>)
 800765e:	f000 b8a7 	b.w	80077b0 <__retarget_lock_acquire_recursive>
 8007662:	bf00      	nop
 8007664:	2000140a 	.word	0x2000140a

08007668 <__sinit_lock_release>:
 8007668:	4801      	ldr	r0, [pc, #4]	; (8007670 <__sinit_lock_release+0x8>)
 800766a:	f000 b8a2 	b.w	80077b2 <__retarget_lock_release_recursive>
 800766e:	bf00      	nop
 8007670:	2000140a 	.word	0x2000140a

08007674 <__sinit>:
 8007674:	b510      	push	{r4, lr}
 8007676:	4604      	mov	r4, r0
 8007678:	f7ff fff0 	bl	800765c <__sinit_lock_acquire>
 800767c:	69a3      	ldr	r3, [r4, #24]
 800767e:	b11b      	cbz	r3, 8007688 <__sinit+0x14>
 8007680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007684:	f7ff bff0 	b.w	8007668 <__sinit_lock_release>
 8007688:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800768c:	6523      	str	r3, [r4, #80]	; 0x50
 800768e:	4b13      	ldr	r3, [pc, #76]	; (80076dc <__sinit+0x68>)
 8007690:	4a13      	ldr	r2, [pc, #76]	; (80076e0 <__sinit+0x6c>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	62a2      	str	r2, [r4, #40]	; 0x28
 8007696:	42a3      	cmp	r3, r4
 8007698:	bf04      	itt	eq
 800769a:	2301      	moveq	r3, #1
 800769c:	61a3      	streq	r3, [r4, #24]
 800769e:	4620      	mov	r0, r4
 80076a0:	f000 f820 	bl	80076e4 <__sfp>
 80076a4:	6060      	str	r0, [r4, #4]
 80076a6:	4620      	mov	r0, r4
 80076a8:	f000 f81c 	bl	80076e4 <__sfp>
 80076ac:	60a0      	str	r0, [r4, #8]
 80076ae:	4620      	mov	r0, r4
 80076b0:	f000 f818 	bl	80076e4 <__sfp>
 80076b4:	2200      	movs	r2, #0
 80076b6:	60e0      	str	r0, [r4, #12]
 80076b8:	2104      	movs	r1, #4
 80076ba:	6860      	ldr	r0, [r4, #4]
 80076bc:	f7ff ff82 	bl	80075c4 <std>
 80076c0:	68a0      	ldr	r0, [r4, #8]
 80076c2:	2201      	movs	r2, #1
 80076c4:	2109      	movs	r1, #9
 80076c6:	f7ff ff7d 	bl	80075c4 <std>
 80076ca:	68e0      	ldr	r0, [r4, #12]
 80076cc:	2202      	movs	r2, #2
 80076ce:	2112      	movs	r1, #18
 80076d0:	f7ff ff78 	bl	80075c4 <std>
 80076d4:	2301      	movs	r3, #1
 80076d6:	61a3      	str	r3, [r4, #24]
 80076d8:	e7d2      	b.n	8007680 <__sinit+0xc>
 80076da:	bf00      	nop
 80076dc:	080082ec 	.word	0x080082ec
 80076e0:	0800760d 	.word	0x0800760d

080076e4 <__sfp>:
 80076e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076e6:	4607      	mov	r7, r0
 80076e8:	f7ff ffac 	bl	8007644 <__sfp_lock_acquire>
 80076ec:	4b1e      	ldr	r3, [pc, #120]	; (8007768 <__sfp+0x84>)
 80076ee:	681e      	ldr	r6, [r3, #0]
 80076f0:	69b3      	ldr	r3, [r6, #24]
 80076f2:	b913      	cbnz	r3, 80076fa <__sfp+0x16>
 80076f4:	4630      	mov	r0, r6
 80076f6:	f7ff ffbd 	bl	8007674 <__sinit>
 80076fa:	3648      	adds	r6, #72	; 0x48
 80076fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007700:	3b01      	subs	r3, #1
 8007702:	d503      	bpl.n	800770c <__sfp+0x28>
 8007704:	6833      	ldr	r3, [r6, #0]
 8007706:	b30b      	cbz	r3, 800774c <__sfp+0x68>
 8007708:	6836      	ldr	r6, [r6, #0]
 800770a:	e7f7      	b.n	80076fc <__sfp+0x18>
 800770c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007710:	b9d5      	cbnz	r5, 8007748 <__sfp+0x64>
 8007712:	4b16      	ldr	r3, [pc, #88]	; (800776c <__sfp+0x88>)
 8007714:	60e3      	str	r3, [r4, #12]
 8007716:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800771a:	6665      	str	r5, [r4, #100]	; 0x64
 800771c:	f000 f847 	bl	80077ae <__retarget_lock_init_recursive>
 8007720:	f7ff ff96 	bl	8007650 <__sfp_lock_release>
 8007724:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007728:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800772c:	6025      	str	r5, [r4, #0]
 800772e:	61a5      	str	r5, [r4, #24]
 8007730:	2208      	movs	r2, #8
 8007732:	4629      	mov	r1, r5
 8007734:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007738:	f7ff fd2c 	bl	8007194 <memset>
 800773c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007740:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007744:	4620      	mov	r0, r4
 8007746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007748:	3468      	adds	r4, #104	; 0x68
 800774a:	e7d9      	b.n	8007700 <__sfp+0x1c>
 800774c:	2104      	movs	r1, #4
 800774e:	4638      	mov	r0, r7
 8007750:	f7ff ff62 	bl	8007618 <__sfmoreglue>
 8007754:	4604      	mov	r4, r0
 8007756:	6030      	str	r0, [r6, #0]
 8007758:	2800      	cmp	r0, #0
 800775a:	d1d5      	bne.n	8007708 <__sfp+0x24>
 800775c:	f7ff ff78 	bl	8007650 <__sfp_lock_release>
 8007760:	230c      	movs	r3, #12
 8007762:	603b      	str	r3, [r7, #0]
 8007764:	e7ee      	b.n	8007744 <__sfp+0x60>
 8007766:	bf00      	nop
 8007768:	080082ec 	.word	0x080082ec
 800776c:	ffff0001 	.word	0xffff0001

08007770 <_fwalk_reent>:
 8007770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007774:	4606      	mov	r6, r0
 8007776:	4688      	mov	r8, r1
 8007778:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800777c:	2700      	movs	r7, #0
 800777e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007782:	f1b9 0901 	subs.w	r9, r9, #1
 8007786:	d505      	bpl.n	8007794 <_fwalk_reent+0x24>
 8007788:	6824      	ldr	r4, [r4, #0]
 800778a:	2c00      	cmp	r4, #0
 800778c:	d1f7      	bne.n	800777e <_fwalk_reent+0xe>
 800778e:	4638      	mov	r0, r7
 8007790:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007794:	89ab      	ldrh	r3, [r5, #12]
 8007796:	2b01      	cmp	r3, #1
 8007798:	d907      	bls.n	80077aa <_fwalk_reent+0x3a>
 800779a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800779e:	3301      	adds	r3, #1
 80077a0:	d003      	beq.n	80077aa <_fwalk_reent+0x3a>
 80077a2:	4629      	mov	r1, r5
 80077a4:	4630      	mov	r0, r6
 80077a6:	47c0      	blx	r8
 80077a8:	4307      	orrs	r7, r0
 80077aa:	3568      	adds	r5, #104	; 0x68
 80077ac:	e7e9      	b.n	8007782 <_fwalk_reent+0x12>

080077ae <__retarget_lock_init_recursive>:
 80077ae:	4770      	bx	lr

080077b0 <__retarget_lock_acquire_recursive>:
 80077b0:	4770      	bx	lr

080077b2 <__retarget_lock_release_recursive>:
 80077b2:	4770      	bx	lr

080077b4 <__swhatbuf_r>:
 80077b4:	b570      	push	{r4, r5, r6, lr}
 80077b6:	460e      	mov	r6, r1
 80077b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077bc:	2900      	cmp	r1, #0
 80077be:	b096      	sub	sp, #88	; 0x58
 80077c0:	4614      	mov	r4, r2
 80077c2:	461d      	mov	r5, r3
 80077c4:	da08      	bge.n	80077d8 <__swhatbuf_r+0x24>
 80077c6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80077ca:	2200      	movs	r2, #0
 80077cc:	602a      	str	r2, [r5, #0]
 80077ce:	061a      	lsls	r2, r3, #24
 80077d0:	d410      	bmi.n	80077f4 <__swhatbuf_r+0x40>
 80077d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077d6:	e00e      	b.n	80077f6 <__swhatbuf_r+0x42>
 80077d8:	466a      	mov	r2, sp
 80077da:	f000 fc95 	bl	8008108 <_fstat_r>
 80077de:	2800      	cmp	r0, #0
 80077e0:	dbf1      	blt.n	80077c6 <__swhatbuf_r+0x12>
 80077e2:	9a01      	ldr	r2, [sp, #4]
 80077e4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80077e8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80077ec:	425a      	negs	r2, r3
 80077ee:	415a      	adcs	r2, r3
 80077f0:	602a      	str	r2, [r5, #0]
 80077f2:	e7ee      	b.n	80077d2 <__swhatbuf_r+0x1e>
 80077f4:	2340      	movs	r3, #64	; 0x40
 80077f6:	2000      	movs	r0, #0
 80077f8:	6023      	str	r3, [r4, #0]
 80077fa:	b016      	add	sp, #88	; 0x58
 80077fc:	bd70      	pop	{r4, r5, r6, pc}
	...

08007800 <__smakebuf_r>:
 8007800:	898b      	ldrh	r3, [r1, #12]
 8007802:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007804:	079d      	lsls	r5, r3, #30
 8007806:	4606      	mov	r6, r0
 8007808:	460c      	mov	r4, r1
 800780a:	d507      	bpl.n	800781c <__smakebuf_r+0x1c>
 800780c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007810:	6023      	str	r3, [r4, #0]
 8007812:	6123      	str	r3, [r4, #16]
 8007814:	2301      	movs	r3, #1
 8007816:	6163      	str	r3, [r4, #20]
 8007818:	b002      	add	sp, #8
 800781a:	bd70      	pop	{r4, r5, r6, pc}
 800781c:	ab01      	add	r3, sp, #4
 800781e:	466a      	mov	r2, sp
 8007820:	f7ff ffc8 	bl	80077b4 <__swhatbuf_r>
 8007824:	9900      	ldr	r1, [sp, #0]
 8007826:	4605      	mov	r5, r0
 8007828:	4630      	mov	r0, r6
 800782a:	f000 f895 	bl	8007958 <_malloc_r>
 800782e:	b948      	cbnz	r0, 8007844 <__smakebuf_r+0x44>
 8007830:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007834:	059a      	lsls	r2, r3, #22
 8007836:	d4ef      	bmi.n	8007818 <__smakebuf_r+0x18>
 8007838:	f023 0303 	bic.w	r3, r3, #3
 800783c:	f043 0302 	orr.w	r3, r3, #2
 8007840:	81a3      	strh	r3, [r4, #12]
 8007842:	e7e3      	b.n	800780c <__smakebuf_r+0xc>
 8007844:	4b0d      	ldr	r3, [pc, #52]	; (800787c <__smakebuf_r+0x7c>)
 8007846:	62b3      	str	r3, [r6, #40]	; 0x28
 8007848:	89a3      	ldrh	r3, [r4, #12]
 800784a:	6020      	str	r0, [r4, #0]
 800784c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007850:	81a3      	strh	r3, [r4, #12]
 8007852:	9b00      	ldr	r3, [sp, #0]
 8007854:	6163      	str	r3, [r4, #20]
 8007856:	9b01      	ldr	r3, [sp, #4]
 8007858:	6120      	str	r0, [r4, #16]
 800785a:	b15b      	cbz	r3, 8007874 <__smakebuf_r+0x74>
 800785c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007860:	4630      	mov	r0, r6
 8007862:	f000 fc63 	bl	800812c <_isatty_r>
 8007866:	b128      	cbz	r0, 8007874 <__smakebuf_r+0x74>
 8007868:	89a3      	ldrh	r3, [r4, #12]
 800786a:	f023 0303 	bic.w	r3, r3, #3
 800786e:	f043 0301 	orr.w	r3, r3, #1
 8007872:	81a3      	strh	r3, [r4, #12]
 8007874:	89a0      	ldrh	r0, [r4, #12]
 8007876:	4305      	orrs	r5, r0
 8007878:	81a5      	strh	r5, [r4, #12]
 800787a:	e7cd      	b.n	8007818 <__smakebuf_r+0x18>
 800787c:	0800760d 	.word	0x0800760d

08007880 <_free_r>:
 8007880:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007882:	2900      	cmp	r1, #0
 8007884:	d044      	beq.n	8007910 <_free_r+0x90>
 8007886:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800788a:	9001      	str	r0, [sp, #4]
 800788c:	2b00      	cmp	r3, #0
 800788e:	f1a1 0404 	sub.w	r4, r1, #4
 8007892:	bfb8      	it	lt
 8007894:	18e4      	addlt	r4, r4, r3
 8007896:	f000 fc6b 	bl	8008170 <__malloc_lock>
 800789a:	4a1e      	ldr	r2, [pc, #120]	; (8007914 <_free_r+0x94>)
 800789c:	9801      	ldr	r0, [sp, #4]
 800789e:	6813      	ldr	r3, [r2, #0]
 80078a0:	b933      	cbnz	r3, 80078b0 <_free_r+0x30>
 80078a2:	6063      	str	r3, [r4, #4]
 80078a4:	6014      	str	r4, [r2, #0]
 80078a6:	b003      	add	sp, #12
 80078a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80078ac:	f000 bc66 	b.w	800817c <__malloc_unlock>
 80078b0:	42a3      	cmp	r3, r4
 80078b2:	d908      	bls.n	80078c6 <_free_r+0x46>
 80078b4:	6825      	ldr	r5, [r4, #0]
 80078b6:	1961      	adds	r1, r4, r5
 80078b8:	428b      	cmp	r3, r1
 80078ba:	bf01      	itttt	eq
 80078bc:	6819      	ldreq	r1, [r3, #0]
 80078be:	685b      	ldreq	r3, [r3, #4]
 80078c0:	1949      	addeq	r1, r1, r5
 80078c2:	6021      	streq	r1, [r4, #0]
 80078c4:	e7ed      	b.n	80078a2 <_free_r+0x22>
 80078c6:	461a      	mov	r2, r3
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	b10b      	cbz	r3, 80078d0 <_free_r+0x50>
 80078cc:	42a3      	cmp	r3, r4
 80078ce:	d9fa      	bls.n	80078c6 <_free_r+0x46>
 80078d0:	6811      	ldr	r1, [r2, #0]
 80078d2:	1855      	adds	r5, r2, r1
 80078d4:	42a5      	cmp	r5, r4
 80078d6:	d10b      	bne.n	80078f0 <_free_r+0x70>
 80078d8:	6824      	ldr	r4, [r4, #0]
 80078da:	4421      	add	r1, r4
 80078dc:	1854      	adds	r4, r2, r1
 80078de:	42a3      	cmp	r3, r4
 80078e0:	6011      	str	r1, [r2, #0]
 80078e2:	d1e0      	bne.n	80078a6 <_free_r+0x26>
 80078e4:	681c      	ldr	r4, [r3, #0]
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	6053      	str	r3, [r2, #4]
 80078ea:	4421      	add	r1, r4
 80078ec:	6011      	str	r1, [r2, #0]
 80078ee:	e7da      	b.n	80078a6 <_free_r+0x26>
 80078f0:	d902      	bls.n	80078f8 <_free_r+0x78>
 80078f2:	230c      	movs	r3, #12
 80078f4:	6003      	str	r3, [r0, #0]
 80078f6:	e7d6      	b.n	80078a6 <_free_r+0x26>
 80078f8:	6825      	ldr	r5, [r4, #0]
 80078fa:	1961      	adds	r1, r4, r5
 80078fc:	428b      	cmp	r3, r1
 80078fe:	bf04      	itt	eq
 8007900:	6819      	ldreq	r1, [r3, #0]
 8007902:	685b      	ldreq	r3, [r3, #4]
 8007904:	6063      	str	r3, [r4, #4]
 8007906:	bf04      	itt	eq
 8007908:	1949      	addeq	r1, r1, r5
 800790a:	6021      	streq	r1, [r4, #0]
 800790c:	6054      	str	r4, [r2, #4]
 800790e:	e7ca      	b.n	80078a6 <_free_r+0x26>
 8007910:	b003      	add	sp, #12
 8007912:	bd30      	pop	{r4, r5, pc}
 8007914:	2000140c 	.word	0x2000140c

08007918 <sbrk_aligned>:
 8007918:	b570      	push	{r4, r5, r6, lr}
 800791a:	4e0e      	ldr	r6, [pc, #56]	; (8007954 <sbrk_aligned+0x3c>)
 800791c:	460c      	mov	r4, r1
 800791e:	6831      	ldr	r1, [r6, #0]
 8007920:	4605      	mov	r5, r0
 8007922:	b911      	cbnz	r1, 800792a <sbrk_aligned+0x12>
 8007924:	f000 fb7a 	bl	800801c <_sbrk_r>
 8007928:	6030      	str	r0, [r6, #0]
 800792a:	4621      	mov	r1, r4
 800792c:	4628      	mov	r0, r5
 800792e:	f000 fb75 	bl	800801c <_sbrk_r>
 8007932:	1c43      	adds	r3, r0, #1
 8007934:	d00a      	beq.n	800794c <sbrk_aligned+0x34>
 8007936:	1cc4      	adds	r4, r0, #3
 8007938:	f024 0403 	bic.w	r4, r4, #3
 800793c:	42a0      	cmp	r0, r4
 800793e:	d007      	beq.n	8007950 <sbrk_aligned+0x38>
 8007940:	1a21      	subs	r1, r4, r0
 8007942:	4628      	mov	r0, r5
 8007944:	f000 fb6a 	bl	800801c <_sbrk_r>
 8007948:	3001      	adds	r0, #1
 800794a:	d101      	bne.n	8007950 <sbrk_aligned+0x38>
 800794c:	f04f 34ff 	mov.w	r4, #4294967295
 8007950:	4620      	mov	r0, r4
 8007952:	bd70      	pop	{r4, r5, r6, pc}
 8007954:	20001410 	.word	0x20001410

08007958 <_malloc_r>:
 8007958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800795c:	1ccd      	adds	r5, r1, #3
 800795e:	f025 0503 	bic.w	r5, r5, #3
 8007962:	3508      	adds	r5, #8
 8007964:	2d0c      	cmp	r5, #12
 8007966:	bf38      	it	cc
 8007968:	250c      	movcc	r5, #12
 800796a:	2d00      	cmp	r5, #0
 800796c:	4607      	mov	r7, r0
 800796e:	db01      	blt.n	8007974 <_malloc_r+0x1c>
 8007970:	42a9      	cmp	r1, r5
 8007972:	d905      	bls.n	8007980 <_malloc_r+0x28>
 8007974:	230c      	movs	r3, #12
 8007976:	603b      	str	r3, [r7, #0]
 8007978:	2600      	movs	r6, #0
 800797a:	4630      	mov	r0, r6
 800797c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007980:	4e2e      	ldr	r6, [pc, #184]	; (8007a3c <_malloc_r+0xe4>)
 8007982:	f000 fbf5 	bl	8008170 <__malloc_lock>
 8007986:	6833      	ldr	r3, [r6, #0]
 8007988:	461c      	mov	r4, r3
 800798a:	bb34      	cbnz	r4, 80079da <_malloc_r+0x82>
 800798c:	4629      	mov	r1, r5
 800798e:	4638      	mov	r0, r7
 8007990:	f7ff ffc2 	bl	8007918 <sbrk_aligned>
 8007994:	1c43      	adds	r3, r0, #1
 8007996:	4604      	mov	r4, r0
 8007998:	d14d      	bne.n	8007a36 <_malloc_r+0xde>
 800799a:	6834      	ldr	r4, [r6, #0]
 800799c:	4626      	mov	r6, r4
 800799e:	2e00      	cmp	r6, #0
 80079a0:	d140      	bne.n	8007a24 <_malloc_r+0xcc>
 80079a2:	6823      	ldr	r3, [r4, #0]
 80079a4:	4631      	mov	r1, r6
 80079a6:	4638      	mov	r0, r7
 80079a8:	eb04 0803 	add.w	r8, r4, r3
 80079ac:	f000 fb36 	bl	800801c <_sbrk_r>
 80079b0:	4580      	cmp	r8, r0
 80079b2:	d13a      	bne.n	8007a2a <_malloc_r+0xd2>
 80079b4:	6821      	ldr	r1, [r4, #0]
 80079b6:	3503      	adds	r5, #3
 80079b8:	1a6d      	subs	r5, r5, r1
 80079ba:	f025 0503 	bic.w	r5, r5, #3
 80079be:	3508      	adds	r5, #8
 80079c0:	2d0c      	cmp	r5, #12
 80079c2:	bf38      	it	cc
 80079c4:	250c      	movcc	r5, #12
 80079c6:	4629      	mov	r1, r5
 80079c8:	4638      	mov	r0, r7
 80079ca:	f7ff ffa5 	bl	8007918 <sbrk_aligned>
 80079ce:	3001      	adds	r0, #1
 80079d0:	d02b      	beq.n	8007a2a <_malloc_r+0xd2>
 80079d2:	6823      	ldr	r3, [r4, #0]
 80079d4:	442b      	add	r3, r5
 80079d6:	6023      	str	r3, [r4, #0]
 80079d8:	e00e      	b.n	80079f8 <_malloc_r+0xa0>
 80079da:	6822      	ldr	r2, [r4, #0]
 80079dc:	1b52      	subs	r2, r2, r5
 80079de:	d41e      	bmi.n	8007a1e <_malloc_r+0xc6>
 80079e0:	2a0b      	cmp	r2, #11
 80079e2:	d916      	bls.n	8007a12 <_malloc_r+0xba>
 80079e4:	1961      	adds	r1, r4, r5
 80079e6:	42a3      	cmp	r3, r4
 80079e8:	6025      	str	r5, [r4, #0]
 80079ea:	bf18      	it	ne
 80079ec:	6059      	strne	r1, [r3, #4]
 80079ee:	6863      	ldr	r3, [r4, #4]
 80079f0:	bf08      	it	eq
 80079f2:	6031      	streq	r1, [r6, #0]
 80079f4:	5162      	str	r2, [r4, r5]
 80079f6:	604b      	str	r3, [r1, #4]
 80079f8:	4638      	mov	r0, r7
 80079fa:	f104 060b 	add.w	r6, r4, #11
 80079fe:	f000 fbbd 	bl	800817c <__malloc_unlock>
 8007a02:	f026 0607 	bic.w	r6, r6, #7
 8007a06:	1d23      	adds	r3, r4, #4
 8007a08:	1af2      	subs	r2, r6, r3
 8007a0a:	d0b6      	beq.n	800797a <_malloc_r+0x22>
 8007a0c:	1b9b      	subs	r3, r3, r6
 8007a0e:	50a3      	str	r3, [r4, r2]
 8007a10:	e7b3      	b.n	800797a <_malloc_r+0x22>
 8007a12:	6862      	ldr	r2, [r4, #4]
 8007a14:	42a3      	cmp	r3, r4
 8007a16:	bf0c      	ite	eq
 8007a18:	6032      	streq	r2, [r6, #0]
 8007a1a:	605a      	strne	r2, [r3, #4]
 8007a1c:	e7ec      	b.n	80079f8 <_malloc_r+0xa0>
 8007a1e:	4623      	mov	r3, r4
 8007a20:	6864      	ldr	r4, [r4, #4]
 8007a22:	e7b2      	b.n	800798a <_malloc_r+0x32>
 8007a24:	4634      	mov	r4, r6
 8007a26:	6876      	ldr	r6, [r6, #4]
 8007a28:	e7b9      	b.n	800799e <_malloc_r+0x46>
 8007a2a:	230c      	movs	r3, #12
 8007a2c:	603b      	str	r3, [r7, #0]
 8007a2e:	4638      	mov	r0, r7
 8007a30:	f000 fba4 	bl	800817c <__malloc_unlock>
 8007a34:	e7a1      	b.n	800797a <_malloc_r+0x22>
 8007a36:	6025      	str	r5, [r4, #0]
 8007a38:	e7de      	b.n	80079f8 <_malloc_r+0xa0>
 8007a3a:	bf00      	nop
 8007a3c:	2000140c 	.word	0x2000140c

08007a40 <__sfputc_r>:
 8007a40:	6893      	ldr	r3, [r2, #8]
 8007a42:	3b01      	subs	r3, #1
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	b410      	push	{r4}
 8007a48:	6093      	str	r3, [r2, #8]
 8007a4a:	da08      	bge.n	8007a5e <__sfputc_r+0x1e>
 8007a4c:	6994      	ldr	r4, [r2, #24]
 8007a4e:	42a3      	cmp	r3, r4
 8007a50:	db01      	blt.n	8007a56 <__sfputc_r+0x16>
 8007a52:	290a      	cmp	r1, #10
 8007a54:	d103      	bne.n	8007a5e <__sfputc_r+0x1e>
 8007a56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a5a:	f7ff bc31 	b.w	80072c0 <__swbuf_r>
 8007a5e:	6813      	ldr	r3, [r2, #0]
 8007a60:	1c58      	adds	r0, r3, #1
 8007a62:	6010      	str	r0, [r2, #0]
 8007a64:	7019      	strb	r1, [r3, #0]
 8007a66:	4608      	mov	r0, r1
 8007a68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a6c:	4770      	bx	lr

08007a6e <__sfputs_r>:
 8007a6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a70:	4606      	mov	r6, r0
 8007a72:	460f      	mov	r7, r1
 8007a74:	4614      	mov	r4, r2
 8007a76:	18d5      	adds	r5, r2, r3
 8007a78:	42ac      	cmp	r4, r5
 8007a7a:	d101      	bne.n	8007a80 <__sfputs_r+0x12>
 8007a7c:	2000      	movs	r0, #0
 8007a7e:	e007      	b.n	8007a90 <__sfputs_r+0x22>
 8007a80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a84:	463a      	mov	r2, r7
 8007a86:	4630      	mov	r0, r6
 8007a88:	f7ff ffda 	bl	8007a40 <__sfputc_r>
 8007a8c:	1c43      	adds	r3, r0, #1
 8007a8e:	d1f3      	bne.n	8007a78 <__sfputs_r+0xa>
 8007a90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007a94 <_vfiprintf_r>:
 8007a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a98:	460d      	mov	r5, r1
 8007a9a:	b09d      	sub	sp, #116	; 0x74
 8007a9c:	4614      	mov	r4, r2
 8007a9e:	4698      	mov	r8, r3
 8007aa0:	4606      	mov	r6, r0
 8007aa2:	b118      	cbz	r0, 8007aac <_vfiprintf_r+0x18>
 8007aa4:	6983      	ldr	r3, [r0, #24]
 8007aa6:	b90b      	cbnz	r3, 8007aac <_vfiprintf_r+0x18>
 8007aa8:	f7ff fde4 	bl	8007674 <__sinit>
 8007aac:	4b89      	ldr	r3, [pc, #548]	; (8007cd4 <_vfiprintf_r+0x240>)
 8007aae:	429d      	cmp	r5, r3
 8007ab0:	d11b      	bne.n	8007aea <_vfiprintf_r+0x56>
 8007ab2:	6875      	ldr	r5, [r6, #4]
 8007ab4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ab6:	07d9      	lsls	r1, r3, #31
 8007ab8:	d405      	bmi.n	8007ac6 <_vfiprintf_r+0x32>
 8007aba:	89ab      	ldrh	r3, [r5, #12]
 8007abc:	059a      	lsls	r2, r3, #22
 8007abe:	d402      	bmi.n	8007ac6 <_vfiprintf_r+0x32>
 8007ac0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ac2:	f7ff fe75 	bl	80077b0 <__retarget_lock_acquire_recursive>
 8007ac6:	89ab      	ldrh	r3, [r5, #12]
 8007ac8:	071b      	lsls	r3, r3, #28
 8007aca:	d501      	bpl.n	8007ad0 <_vfiprintf_r+0x3c>
 8007acc:	692b      	ldr	r3, [r5, #16]
 8007ace:	b9eb      	cbnz	r3, 8007b0c <_vfiprintf_r+0x78>
 8007ad0:	4629      	mov	r1, r5
 8007ad2:	4630      	mov	r0, r6
 8007ad4:	f7ff fc46 	bl	8007364 <__swsetup_r>
 8007ad8:	b1c0      	cbz	r0, 8007b0c <_vfiprintf_r+0x78>
 8007ada:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007adc:	07dc      	lsls	r4, r3, #31
 8007ade:	d50e      	bpl.n	8007afe <_vfiprintf_r+0x6a>
 8007ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ae4:	b01d      	add	sp, #116	; 0x74
 8007ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007aea:	4b7b      	ldr	r3, [pc, #492]	; (8007cd8 <_vfiprintf_r+0x244>)
 8007aec:	429d      	cmp	r5, r3
 8007aee:	d101      	bne.n	8007af4 <_vfiprintf_r+0x60>
 8007af0:	68b5      	ldr	r5, [r6, #8]
 8007af2:	e7df      	b.n	8007ab4 <_vfiprintf_r+0x20>
 8007af4:	4b79      	ldr	r3, [pc, #484]	; (8007cdc <_vfiprintf_r+0x248>)
 8007af6:	429d      	cmp	r5, r3
 8007af8:	bf08      	it	eq
 8007afa:	68f5      	ldreq	r5, [r6, #12]
 8007afc:	e7da      	b.n	8007ab4 <_vfiprintf_r+0x20>
 8007afe:	89ab      	ldrh	r3, [r5, #12]
 8007b00:	0598      	lsls	r0, r3, #22
 8007b02:	d4ed      	bmi.n	8007ae0 <_vfiprintf_r+0x4c>
 8007b04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b06:	f7ff fe54 	bl	80077b2 <__retarget_lock_release_recursive>
 8007b0a:	e7e9      	b.n	8007ae0 <_vfiprintf_r+0x4c>
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	9309      	str	r3, [sp, #36]	; 0x24
 8007b10:	2320      	movs	r3, #32
 8007b12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b16:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b1a:	2330      	movs	r3, #48	; 0x30
 8007b1c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007ce0 <_vfiprintf_r+0x24c>
 8007b20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b24:	f04f 0901 	mov.w	r9, #1
 8007b28:	4623      	mov	r3, r4
 8007b2a:	469a      	mov	sl, r3
 8007b2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b30:	b10a      	cbz	r2, 8007b36 <_vfiprintf_r+0xa2>
 8007b32:	2a25      	cmp	r2, #37	; 0x25
 8007b34:	d1f9      	bne.n	8007b2a <_vfiprintf_r+0x96>
 8007b36:	ebba 0b04 	subs.w	fp, sl, r4
 8007b3a:	d00b      	beq.n	8007b54 <_vfiprintf_r+0xc0>
 8007b3c:	465b      	mov	r3, fp
 8007b3e:	4622      	mov	r2, r4
 8007b40:	4629      	mov	r1, r5
 8007b42:	4630      	mov	r0, r6
 8007b44:	f7ff ff93 	bl	8007a6e <__sfputs_r>
 8007b48:	3001      	adds	r0, #1
 8007b4a:	f000 80aa 	beq.w	8007ca2 <_vfiprintf_r+0x20e>
 8007b4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b50:	445a      	add	r2, fp
 8007b52:	9209      	str	r2, [sp, #36]	; 0x24
 8007b54:	f89a 3000 	ldrb.w	r3, [sl]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	f000 80a2 	beq.w	8007ca2 <_vfiprintf_r+0x20e>
 8007b5e:	2300      	movs	r3, #0
 8007b60:	f04f 32ff 	mov.w	r2, #4294967295
 8007b64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b68:	f10a 0a01 	add.w	sl, sl, #1
 8007b6c:	9304      	str	r3, [sp, #16]
 8007b6e:	9307      	str	r3, [sp, #28]
 8007b70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b74:	931a      	str	r3, [sp, #104]	; 0x68
 8007b76:	4654      	mov	r4, sl
 8007b78:	2205      	movs	r2, #5
 8007b7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b7e:	4858      	ldr	r0, [pc, #352]	; (8007ce0 <_vfiprintf_r+0x24c>)
 8007b80:	f7f8 fb36 	bl	80001f0 <memchr>
 8007b84:	9a04      	ldr	r2, [sp, #16]
 8007b86:	b9d8      	cbnz	r0, 8007bc0 <_vfiprintf_r+0x12c>
 8007b88:	06d1      	lsls	r1, r2, #27
 8007b8a:	bf44      	itt	mi
 8007b8c:	2320      	movmi	r3, #32
 8007b8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b92:	0713      	lsls	r3, r2, #28
 8007b94:	bf44      	itt	mi
 8007b96:	232b      	movmi	r3, #43	; 0x2b
 8007b98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b9c:	f89a 3000 	ldrb.w	r3, [sl]
 8007ba0:	2b2a      	cmp	r3, #42	; 0x2a
 8007ba2:	d015      	beq.n	8007bd0 <_vfiprintf_r+0x13c>
 8007ba4:	9a07      	ldr	r2, [sp, #28]
 8007ba6:	4654      	mov	r4, sl
 8007ba8:	2000      	movs	r0, #0
 8007baa:	f04f 0c0a 	mov.w	ip, #10
 8007bae:	4621      	mov	r1, r4
 8007bb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007bb4:	3b30      	subs	r3, #48	; 0x30
 8007bb6:	2b09      	cmp	r3, #9
 8007bb8:	d94e      	bls.n	8007c58 <_vfiprintf_r+0x1c4>
 8007bba:	b1b0      	cbz	r0, 8007bea <_vfiprintf_r+0x156>
 8007bbc:	9207      	str	r2, [sp, #28]
 8007bbe:	e014      	b.n	8007bea <_vfiprintf_r+0x156>
 8007bc0:	eba0 0308 	sub.w	r3, r0, r8
 8007bc4:	fa09 f303 	lsl.w	r3, r9, r3
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	9304      	str	r3, [sp, #16]
 8007bcc:	46a2      	mov	sl, r4
 8007bce:	e7d2      	b.n	8007b76 <_vfiprintf_r+0xe2>
 8007bd0:	9b03      	ldr	r3, [sp, #12]
 8007bd2:	1d19      	adds	r1, r3, #4
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	9103      	str	r1, [sp, #12]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	bfbb      	ittet	lt
 8007bdc:	425b      	neglt	r3, r3
 8007bde:	f042 0202 	orrlt.w	r2, r2, #2
 8007be2:	9307      	strge	r3, [sp, #28]
 8007be4:	9307      	strlt	r3, [sp, #28]
 8007be6:	bfb8      	it	lt
 8007be8:	9204      	strlt	r2, [sp, #16]
 8007bea:	7823      	ldrb	r3, [r4, #0]
 8007bec:	2b2e      	cmp	r3, #46	; 0x2e
 8007bee:	d10c      	bne.n	8007c0a <_vfiprintf_r+0x176>
 8007bf0:	7863      	ldrb	r3, [r4, #1]
 8007bf2:	2b2a      	cmp	r3, #42	; 0x2a
 8007bf4:	d135      	bne.n	8007c62 <_vfiprintf_r+0x1ce>
 8007bf6:	9b03      	ldr	r3, [sp, #12]
 8007bf8:	1d1a      	adds	r2, r3, #4
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	9203      	str	r2, [sp, #12]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	bfb8      	it	lt
 8007c02:	f04f 33ff 	movlt.w	r3, #4294967295
 8007c06:	3402      	adds	r4, #2
 8007c08:	9305      	str	r3, [sp, #20]
 8007c0a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007cf0 <_vfiprintf_r+0x25c>
 8007c0e:	7821      	ldrb	r1, [r4, #0]
 8007c10:	2203      	movs	r2, #3
 8007c12:	4650      	mov	r0, sl
 8007c14:	f7f8 faec 	bl	80001f0 <memchr>
 8007c18:	b140      	cbz	r0, 8007c2c <_vfiprintf_r+0x198>
 8007c1a:	2340      	movs	r3, #64	; 0x40
 8007c1c:	eba0 000a 	sub.w	r0, r0, sl
 8007c20:	fa03 f000 	lsl.w	r0, r3, r0
 8007c24:	9b04      	ldr	r3, [sp, #16]
 8007c26:	4303      	orrs	r3, r0
 8007c28:	3401      	adds	r4, #1
 8007c2a:	9304      	str	r3, [sp, #16]
 8007c2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c30:	482c      	ldr	r0, [pc, #176]	; (8007ce4 <_vfiprintf_r+0x250>)
 8007c32:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c36:	2206      	movs	r2, #6
 8007c38:	f7f8 fada 	bl	80001f0 <memchr>
 8007c3c:	2800      	cmp	r0, #0
 8007c3e:	d03f      	beq.n	8007cc0 <_vfiprintf_r+0x22c>
 8007c40:	4b29      	ldr	r3, [pc, #164]	; (8007ce8 <_vfiprintf_r+0x254>)
 8007c42:	bb1b      	cbnz	r3, 8007c8c <_vfiprintf_r+0x1f8>
 8007c44:	9b03      	ldr	r3, [sp, #12]
 8007c46:	3307      	adds	r3, #7
 8007c48:	f023 0307 	bic.w	r3, r3, #7
 8007c4c:	3308      	adds	r3, #8
 8007c4e:	9303      	str	r3, [sp, #12]
 8007c50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c52:	443b      	add	r3, r7
 8007c54:	9309      	str	r3, [sp, #36]	; 0x24
 8007c56:	e767      	b.n	8007b28 <_vfiprintf_r+0x94>
 8007c58:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c5c:	460c      	mov	r4, r1
 8007c5e:	2001      	movs	r0, #1
 8007c60:	e7a5      	b.n	8007bae <_vfiprintf_r+0x11a>
 8007c62:	2300      	movs	r3, #0
 8007c64:	3401      	adds	r4, #1
 8007c66:	9305      	str	r3, [sp, #20]
 8007c68:	4619      	mov	r1, r3
 8007c6a:	f04f 0c0a 	mov.w	ip, #10
 8007c6e:	4620      	mov	r0, r4
 8007c70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c74:	3a30      	subs	r2, #48	; 0x30
 8007c76:	2a09      	cmp	r2, #9
 8007c78:	d903      	bls.n	8007c82 <_vfiprintf_r+0x1ee>
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d0c5      	beq.n	8007c0a <_vfiprintf_r+0x176>
 8007c7e:	9105      	str	r1, [sp, #20]
 8007c80:	e7c3      	b.n	8007c0a <_vfiprintf_r+0x176>
 8007c82:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c86:	4604      	mov	r4, r0
 8007c88:	2301      	movs	r3, #1
 8007c8a:	e7f0      	b.n	8007c6e <_vfiprintf_r+0x1da>
 8007c8c:	ab03      	add	r3, sp, #12
 8007c8e:	9300      	str	r3, [sp, #0]
 8007c90:	462a      	mov	r2, r5
 8007c92:	4b16      	ldr	r3, [pc, #88]	; (8007cec <_vfiprintf_r+0x258>)
 8007c94:	a904      	add	r1, sp, #16
 8007c96:	4630      	mov	r0, r6
 8007c98:	f3af 8000 	nop.w
 8007c9c:	4607      	mov	r7, r0
 8007c9e:	1c78      	adds	r0, r7, #1
 8007ca0:	d1d6      	bne.n	8007c50 <_vfiprintf_r+0x1bc>
 8007ca2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ca4:	07d9      	lsls	r1, r3, #31
 8007ca6:	d405      	bmi.n	8007cb4 <_vfiprintf_r+0x220>
 8007ca8:	89ab      	ldrh	r3, [r5, #12]
 8007caa:	059a      	lsls	r2, r3, #22
 8007cac:	d402      	bmi.n	8007cb4 <_vfiprintf_r+0x220>
 8007cae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007cb0:	f7ff fd7f 	bl	80077b2 <__retarget_lock_release_recursive>
 8007cb4:	89ab      	ldrh	r3, [r5, #12]
 8007cb6:	065b      	lsls	r3, r3, #25
 8007cb8:	f53f af12 	bmi.w	8007ae0 <_vfiprintf_r+0x4c>
 8007cbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007cbe:	e711      	b.n	8007ae4 <_vfiprintf_r+0x50>
 8007cc0:	ab03      	add	r3, sp, #12
 8007cc2:	9300      	str	r3, [sp, #0]
 8007cc4:	462a      	mov	r2, r5
 8007cc6:	4b09      	ldr	r3, [pc, #36]	; (8007cec <_vfiprintf_r+0x258>)
 8007cc8:	a904      	add	r1, sp, #16
 8007cca:	4630      	mov	r0, r6
 8007ccc:	f000 f880 	bl	8007dd0 <_printf_i>
 8007cd0:	e7e4      	b.n	8007c9c <_vfiprintf_r+0x208>
 8007cd2:	bf00      	nop
 8007cd4:	08008310 	.word	0x08008310
 8007cd8:	08008330 	.word	0x08008330
 8007cdc:	080082f0 	.word	0x080082f0
 8007ce0:	08008350 	.word	0x08008350
 8007ce4:	0800835a 	.word	0x0800835a
 8007ce8:	00000000 	.word	0x00000000
 8007cec:	08007a6f 	.word	0x08007a6f
 8007cf0:	08008356 	.word	0x08008356

08007cf4 <_printf_common>:
 8007cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cf8:	4616      	mov	r6, r2
 8007cfa:	4699      	mov	r9, r3
 8007cfc:	688a      	ldr	r2, [r1, #8]
 8007cfe:	690b      	ldr	r3, [r1, #16]
 8007d00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007d04:	4293      	cmp	r3, r2
 8007d06:	bfb8      	it	lt
 8007d08:	4613      	movlt	r3, r2
 8007d0a:	6033      	str	r3, [r6, #0]
 8007d0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007d10:	4607      	mov	r7, r0
 8007d12:	460c      	mov	r4, r1
 8007d14:	b10a      	cbz	r2, 8007d1a <_printf_common+0x26>
 8007d16:	3301      	adds	r3, #1
 8007d18:	6033      	str	r3, [r6, #0]
 8007d1a:	6823      	ldr	r3, [r4, #0]
 8007d1c:	0699      	lsls	r1, r3, #26
 8007d1e:	bf42      	ittt	mi
 8007d20:	6833      	ldrmi	r3, [r6, #0]
 8007d22:	3302      	addmi	r3, #2
 8007d24:	6033      	strmi	r3, [r6, #0]
 8007d26:	6825      	ldr	r5, [r4, #0]
 8007d28:	f015 0506 	ands.w	r5, r5, #6
 8007d2c:	d106      	bne.n	8007d3c <_printf_common+0x48>
 8007d2e:	f104 0a19 	add.w	sl, r4, #25
 8007d32:	68e3      	ldr	r3, [r4, #12]
 8007d34:	6832      	ldr	r2, [r6, #0]
 8007d36:	1a9b      	subs	r3, r3, r2
 8007d38:	42ab      	cmp	r3, r5
 8007d3a:	dc26      	bgt.n	8007d8a <_printf_common+0x96>
 8007d3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007d40:	1e13      	subs	r3, r2, #0
 8007d42:	6822      	ldr	r2, [r4, #0]
 8007d44:	bf18      	it	ne
 8007d46:	2301      	movne	r3, #1
 8007d48:	0692      	lsls	r2, r2, #26
 8007d4a:	d42b      	bmi.n	8007da4 <_printf_common+0xb0>
 8007d4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d50:	4649      	mov	r1, r9
 8007d52:	4638      	mov	r0, r7
 8007d54:	47c0      	blx	r8
 8007d56:	3001      	adds	r0, #1
 8007d58:	d01e      	beq.n	8007d98 <_printf_common+0xa4>
 8007d5a:	6823      	ldr	r3, [r4, #0]
 8007d5c:	68e5      	ldr	r5, [r4, #12]
 8007d5e:	6832      	ldr	r2, [r6, #0]
 8007d60:	f003 0306 	and.w	r3, r3, #6
 8007d64:	2b04      	cmp	r3, #4
 8007d66:	bf08      	it	eq
 8007d68:	1aad      	subeq	r5, r5, r2
 8007d6a:	68a3      	ldr	r3, [r4, #8]
 8007d6c:	6922      	ldr	r2, [r4, #16]
 8007d6e:	bf0c      	ite	eq
 8007d70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d74:	2500      	movne	r5, #0
 8007d76:	4293      	cmp	r3, r2
 8007d78:	bfc4      	itt	gt
 8007d7a:	1a9b      	subgt	r3, r3, r2
 8007d7c:	18ed      	addgt	r5, r5, r3
 8007d7e:	2600      	movs	r6, #0
 8007d80:	341a      	adds	r4, #26
 8007d82:	42b5      	cmp	r5, r6
 8007d84:	d11a      	bne.n	8007dbc <_printf_common+0xc8>
 8007d86:	2000      	movs	r0, #0
 8007d88:	e008      	b.n	8007d9c <_printf_common+0xa8>
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	4652      	mov	r2, sl
 8007d8e:	4649      	mov	r1, r9
 8007d90:	4638      	mov	r0, r7
 8007d92:	47c0      	blx	r8
 8007d94:	3001      	adds	r0, #1
 8007d96:	d103      	bne.n	8007da0 <_printf_common+0xac>
 8007d98:	f04f 30ff 	mov.w	r0, #4294967295
 8007d9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007da0:	3501      	adds	r5, #1
 8007da2:	e7c6      	b.n	8007d32 <_printf_common+0x3e>
 8007da4:	18e1      	adds	r1, r4, r3
 8007da6:	1c5a      	adds	r2, r3, #1
 8007da8:	2030      	movs	r0, #48	; 0x30
 8007daa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007dae:	4422      	add	r2, r4
 8007db0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007db4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007db8:	3302      	adds	r3, #2
 8007dba:	e7c7      	b.n	8007d4c <_printf_common+0x58>
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	4622      	mov	r2, r4
 8007dc0:	4649      	mov	r1, r9
 8007dc2:	4638      	mov	r0, r7
 8007dc4:	47c0      	blx	r8
 8007dc6:	3001      	adds	r0, #1
 8007dc8:	d0e6      	beq.n	8007d98 <_printf_common+0xa4>
 8007dca:	3601      	adds	r6, #1
 8007dcc:	e7d9      	b.n	8007d82 <_printf_common+0x8e>
	...

08007dd0 <_printf_i>:
 8007dd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007dd4:	7e0f      	ldrb	r7, [r1, #24]
 8007dd6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007dd8:	2f78      	cmp	r7, #120	; 0x78
 8007dda:	4691      	mov	r9, r2
 8007ddc:	4680      	mov	r8, r0
 8007dde:	460c      	mov	r4, r1
 8007de0:	469a      	mov	sl, r3
 8007de2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007de6:	d807      	bhi.n	8007df8 <_printf_i+0x28>
 8007de8:	2f62      	cmp	r7, #98	; 0x62
 8007dea:	d80a      	bhi.n	8007e02 <_printf_i+0x32>
 8007dec:	2f00      	cmp	r7, #0
 8007dee:	f000 80d8 	beq.w	8007fa2 <_printf_i+0x1d2>
 8007df2:	2f58      	cmp	r7, #88	; 0x58
 8007df4:	f000 80a3 	beq.w	8007f3e <_printf_i+0x16e>
 8007df8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007dfc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007e00:	e03a      	b.n	8007e78 <_printf_i+0xa8>
 8007e02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007e06:	2b15      	cmp	r3, #21
 8007e08:	d8f6      	bhi.n	8007df8 <_printf_i+0x28>
 8007e0a:	a101      	add	r1, pc, #4	; (adr r1, 8007e10 <_printf_i+0x40>)
 8007e0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007e10:	08007e69 	.word	0x08007e69
 8007e14:	08007e7d 	.word	0x08007e7d
 8007e18:	08007df9 	.word	0x08007df9
 8007e1c:	08007df9 	.word	0x08007df9
 8007e20:	08007df9 	.word	0x08007df9
 8007e24:	08007df9 	.word	0x08007df9
 8007e28:	08007e7d 	.word	0x08007e7d
 8007e2c:	08007df9 	.word	0x08007df9
 8007e30:	08007df9 	.word	0x08007df9
 8007e34:	08007df9 	.word	0x08007df9
 8007e38:	08007df9 	.word	0x08007df9
 8007e3c:	08007f89 	.word	0x08007f89
 8007e40:	08007ead 	.word	0x08007ead
 8007e44:	08007f6b 	.word	0x08007f6b
 8007e48:	08007df9 	.word	0x08007df9
 8007e4c:	08007df9 	.word	0x08007df9
 8007e50:	08007fab 	.word	0x08007fab
 8007e54:	08007df9 	.word	0x08007df9
 8007e58:	08007ead 	.word	0x08007ead
 8007e5c:	08007df9 	.word	0x08007df9
 8007e60:	08007df9 	.word	0x08007df9
 8007e64:	08007f73 	.word	0x08007f73
 8007e68:	682b      	ldr	r3, [r5, #0]
 8007e6a:	1d1a      	adds	r2, r3, #4
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	602a      	str	r2, [r5, #0]
 8007e70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007e78:	2301      	movs	r3, #1
 8007e7a:	e0a3      	b.n	8007fc4 <_printf_i+0x1f4>
 8007e7c:	6820      	ldr	r0, [r4, #0]
 8007e7e:	6829      	ldr	r1, [r5, #0]
 8007e80:	0606      	lsls	r6, r0, #24
 8007e82:	f101 0304 	add.w	r3, r1, #4
 8007e86:	d50a      	bpl.n	8007e9e <_printf_i+0xce>
 8007e88:	680e      	ldr	r6, [r1, #0]
 8007e8a:	602b      	str	r3, [r5, #0]
 8007e8c:	2e00      	cmp	r6, #0
 8007e8e:	da03      	bge.n	8007e98 <_printf_i+0xc8>
 8007e90:	232d      	movs	r3, #45	; 0x2d
 8007e92:	4276      	negs	r6, r6
 8007e94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e98:	485e      	ldr	r0, [pc, #376]	; (8008014 <_printf_i+0x244>)
 8007e9a:	230a      	movs	r3, #10
 8007e9c:	e019      	b.n	8007ed2 <_printf_i+0x102>
 8007e9e:	680e      	ldr	r6, [r1, #0]
 8007ea0:	602b      	str	r3, [r5, #0]
 8007ea2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007ea6:	bf18      	it	ne
 8007ea8:	b236      	sxthne	r6, r6
 8007eaa:	e7ef      	b.n	8007e8c <_printf_i+0xbc>
 8007eac:	682b      	ldr	r3, [r5, #0]
 8007eae:	6820      	ldr	r0, [r4, #0]
 8007eb0:	1d19      	adds	r1, r3, #4
 8007eb2:	6029      	str	r1, [r5, #0]
 8007eb4:	0601      	lsls	r1, r0, #24
 8007eb6:	d501      	bpl.n	8007ebc <_printf_i+0xec>
 8007eb8:	681e      	ldr	r6, [r3, #0]
 8007eba:	e002      	b.n	8007ec2 <_printf_i+0xf2>
 8007ebc:	0646      	lsls	r6, r0, #25
 8007ebe:	d5fb      	bpl.n	8007eb8 <_printf_i+0xe8>
 8007ec0:	881e      	ldrh	r6, [r3, #0]
 8007ec2:	4854      	ldr	r0, [pc, #336]	; (8008014 <_printf_i+0x244>)
 8007ec4:	2f6f      	cmp	r7, #111	; 0x6f
 8007ec6:	bf0c      	ite	eq
 8007ec8:	2308      	moveq	r3, #8
 8007eca:	230a      	movne	r3, #10
 8007ecc:	2100      	movs	r1, #0
 8007ece:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007ed2:	6865      	ldr	r5, [r4, #4]
 8007ed4:	60a5      	str	r5, [r4, #8]
 8007ed6:	2d00      	cmp	r5, #0
 8007ed8:	bfa2      	ittt	ge
 8007eda:	6821      	ldrge	r1, [r4, #0]
 8007edc:	f021 0104 	bicge.w	r1, r1, #4
 8007ee0:	6021      	strge	r1, [r4, #0]
 8007ee2:	b90e      	cbnz	r6, 8007ee8 <_printf_i+0x118>
 8007ee4:	2d00      	cmp	r5, #0
 8007ee6:	d04d      	beq.n	8007f84 <_printf_i+0x1b4>
 8007ee8:	4615      	mov	r5, r2
 8007eea:	fbb6 f1f3 	udiv	r1, r6, r3
 8007eee:	fb03 6711 	mls	r7, r3, r1, r6
 8007ef2:	5dc7      	ldrb	r7, [r0, r7]
 8007ef4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007ef8:	4637      	mov	r7, r6
 8007efa:	42bb      	cmp	r3, r7
 8007efc:	460e      	mov	r6, r1
 8007efe:	d9f4      	bls.n	8007eea <_printf_i+0x11a>
 8007f00:	2b08      	cmp	r3, #8
 8007f02:	d10b      	bne.n	8007f1c <_printf_i+0x14c>
 8007f04:	6823      	ldr	r3, [r4, #0]
 8007f06:	07de      	lsls	r6, r3, #31
 8007f08:	d508      	bpl.n	8007f1c <_printf_i+0x14c>
 8007f0a:	6923      	ldr	r3, [r4, #16]
 8007f0c:	6861      	ldr	r1, [r4, #4]
 8007f0e:	4299      	cmp	r1, r3
 8007f10:	bfde      	ittt	le
 8007f12:	2330      	movle	r3, #48	; 0x30
 8007f14:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007f18:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007f1c:	1b52      	subs	r2, r2, r5
 8007f1e:	6122      	str	r2, [r4, #16]
 8007f20:	f8cd a000 	str.w	sl, [sp]
 8007f24:	464b      	mov	r3, r9
 8007f26:	aa03      	add	r2, sp, #12
 8007f28:	4621      	mov	r1, r4
 8007f2a:	4640      	mov	r0, r8
 8007f2c:	f7ff fee2 	bl	8007cf4 <_printf_common>
 8007f30:	3001      	adds	r0, #1
 8007f32:	d14c      	bne.n	8007fce <_printf_i+0x1fe>
 8007f34:	f04f 30ff 	mov.w	r0, #4294967295
 8007f38:	b004      	add	sp, #16
 8007f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f3e:	4835      	ldr	r0, [pc, #212]	; (8008014 <_printf_i+0x244>)
 8007f40:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007f44:	6829      	ldr	r1, [r5, #0]
 8007f46:	6823      	ldr	r3, [r4, #0]
 8007f48:	f851 6b04 	ldr.w	r6, [r1], #4
 8007f4c:	6029      	str	r1, [r5, #0]
 8007f4e:	061d      	lsls	r5, r3, #24
 8007f50:	d514      	bpl.n	8007f7c <_printf_i+0x1ac>
 8007f52:	07df      	lsls	r7, r3, #31
 8007f54:	bf44      	itt	mi
 8007f56:	f043 0320 	orrmi.w	r3, r3, #32
 8007f5a:	6023      	strmi	r3, [r4, #0]
 8007f5c:	b91e      	cbnz	r6, 8007f66 <_printf_i+0x196>
 8007f5e:	6823      	ldr	r3, [r4, #0]
 8007f60:	f023 0320 	bic.w	r3, r3, #32
 8007f64:	6023      	str	r3, [r4, #0]
 8007f66:	2310      	movs	r3, #16
 8007f68:	e7b0      	b.n	8007ecc <_printf_i+0xfc>
 8007f6a:	6823      	ldr	r3, [r4, #0]
 8007f6c:	f043 0320 	orr.w	r3, r3, #32
 8007f70:	6023      	str	r3, [r4, #0]
 8007f72:	2378      	movs	r3, #120	; 0x78
 8007f74:	4828      	ldr	r0, [pc, #160]	; (8008018 <_printf_i+0x248>)
 8007f76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007f7a:	e7e3      	b.n	8007f44 <_printf_i+0x174>
 8007f7c:	0659      	lsls	r1, r3, #25
 8007f7e:	bf48      	it	mi
 8007f80:	b2b6      	uxthmi	r6, r6
 8007f82:	e7e6      	b.n	8007f52 <_printf_i+0x182>
 8007f84:	4615      	mov	r5, r2
 8007f86:	e7bb      	b.n	8007f00 <_printf_i+0x130>
 8007f88:	682b      	ldr	r3, [r5, #0]
 8007f8a:	6826      	ldr	r6, [r4, #0]
 8007f8c:	6961      	ldr	r1, [r4, #20]
 8007f8e:	1d18      	adds	r0, r3, #4
 8007f90:	6028      	str	r0, [r5, #0]
 8007f92:	0635      	lsls	r5, r6, #24
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	d501      	bpl.n	8007f9c <_printf_i+0x1cc>
 8007f98:	6019      	str	r1, [r3, #0]
 8007f9a:	e002      	b.n	8007fa2 <_printf_i+0x1d2>
 8007f9c:	0670      	lsls	r0, r6, #25
 8007f9e:	d5fb      	bpl.n	8007f98 <_printf_i+0x1c8>
 8007fa0:	8019      	strh	r1, [r3, #0]
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	6123      	str	r3, [r4, #16]
 8007fa6:	4615      	mov	r5, r2
 8007fa8:	e7ba      	b.n	8007f20 <_printf_i+0x150>
 8007faa:	682b      	ldr	r3, [r5, #0]
 8007fac:	1d1a      	adds	r2, r3, #4
 8007fae:	602a      	str	r2, [r5, #0]
 8007fb0:	681d      	ldr	r5, [r3, #0]
 8007fb2:	6862      	ldr	r2, [r4, #4]
 8007fb4:	2100      	movs	r1, #0
 8007fb6:	4628      	mov	r0, r5
 8007fb8:	f7f8 f91a 	bl	80001f0 <memchr>
 8007fbc:	b108      	cbz	r0, 8007fc2 <_printf_i+0x1f2>
 8007fbe:	1b40      	subs	r0, r0, r5
 8007fc0:	6060      	str	r0, [r4, #4]
 8007fc2:	6863      	ldr	r3, [r4, #4]
 8007fc4:	6123      	str	r3, [r4, #16]
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fcc:	e7a8      	b.n	8007f20 <_printf_i+0x150>
 8007fce:	6923      	ldr	r3, [r4, #16]
 8007fd0:	462a      	mov	r2, r5
 8007fd2:	4649      	mov	r1, r9
 8007fd4:	4640      	mov	r0, r8
 8007fd6:	47d0      	blx	sl
 8007fd8:	3001      	adds	r0, #1
 8007fda:	d0ab      	beq.n	8007f34 <_printf_i+0x164>
 8007fdc:	6823      	ldr	r3, [r4, #0]
 8007fde:	079b      	lsls	r3, r3, #30
 8007fe0:	d413      	bmi.n	800800a <_printf_i+0x23a>
 8007fe2:	68e0      	ldr	r0, [r4, #12]
 8007fe4:	9b03      	ldr	r3, [sp, #12]
 8007fe6:	4298      	cmp	r0, r3
 8007fe8:	bfb8      	it	lt
 8007fea:	4618      	movlt	r0, r3
 8007fec:	e7a4      	b.n	8007f38 <_printf_i+0x168>
 8007fee:	2301      	movs	r3, #1
 8007ff0:	4632      	mov	r2, r6
 8007ff2:	4649      	mov	r1, r9
 8007ff4:	4640      	mov	r0, r8
 8007ff6:	47d0      	blx	sl
 8007ff8:	3001      	adds	r0, #1
 8007ffa:	d09b      	beq.n	8007f34 <_printf_i+0x164>
 8007ffc:	3501      	adds	r5, #1
 8007ffe:	68e3      	ldr	r3, [r4, #12]
 8008000:	9903      	ldr	r1, [sp, #12]
 8008002:	1a5b      	subs	r3, r3, r1
 8008004:	42ab      	cmp	r3, r5
 8008006:	dcf2      	bgt.n	8007fee <_printf_i+0x21e>
 8008008:	e7eb      	b.n	8007fe2 <_printf_i+0x212>
 800800a:	2500      	movs	r5, #0
 800800c:	f104 0619 	add.w	r6, r4, #25
 8008010:	e7f5      	b.n	8007ffe <_printf_i+0x22e>
 8008012:	bf00      	nop
 8008014:	08008361 	.word	0x08008361
 8008018:	08008372 	.word	0x08008372

0800801c <_sbrk_r>:
 800801c:	b538      	push	{r3, r4, r5, lr}
 800801e:	4d06      	ldr	r5, [pc, #24]	; (8008038 <_sbrk_r+0x1c>)
 8008020:	2300      	movs	r3, #0
 8008022:	4604      	mov	r4, r0
 8008024:	4608      	mov	r0, r1
 8008026:	602b      	str	r3, [r5, #0]
 8008028:	f7f9 fdae 	bl	8001b88 <_sbrk>
 800802c:	1c43      	adds	r3, r0, #1
 800802e:	d102      	bne.n	8008036 <_sbrk_r+0x1a>
 8008030:	682b      	ldr	r3, [r5, #0]
 8008032:	b103      	cbz	r3, 8008036 <_sbrk_r+0x1a>
 8008034:	6023      	str	r3, [r4, #0]
 8008036:	bd38      	pop	{r3, r4, r5, pc}
 8008038:	20001414 	.word	0x20001414

0800803c <__sread>:
 800803c:	b510      	push	{r4, lr}
 800803e:	460c      	mov	r4, r1
 8008040:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008044:	f000 f8a0 	bl	8008188 <_read_r>
 8008048:	2800      	cmp	r0, #0
 800804a:	bfab      	itete	ge
 800804c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800804e:	89a3      	ldrhlt	r3, [r4, #12]
 8008050:	181b      	addge	r3, r3, r0
 8008052:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008056:	bfac      	ite	ge
 8008058:	6563      	strge	r3, [r4, #84]	; 0x54
 800805a:	81a3      	strhlt	r3, [r4, #12]
 800805c:	bd10      	pop	{r4, pc}

0800805e <__swrite>:
 800805e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008062:	461f      	mov	r7, r3
 8008064:	898b      	ldrh	r3, [r1, #12]
 8008066:	05db      	lsls	r3, r3, #23
 8008068:	4605      	mov	r5, r0
 800806a:	460c      	mov	r4, r1
 800806c:	4616      	mov	r6, r2
 800806e:	d505      	bpl.n	800807c <__swrite+0x1e>
 8008070:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008074:	2302      	movs	r3, #2
 8008076:	2200      	movs	r2, #0
 8008078:	f000 f868 	bl	800814c <_lseek_r>
 800807c:	89a3      	ldrh	r3, [r4, #12]
 800807e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008082:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008086:	81a3      	strh	r3, [r4, #12]
 8008088:	4632      	mov	r2, r6
 800808a:	463b      	mov	r3, r7
 800808c:	4628      	mov	r0, r5
 800808e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008092:	f000 b817 	b.w	80080c4 <_write_r>

08008096 <__sseek>:
 8008096:	b510      	push	{r4, lr}
 8008098:	460c      	mov	r4, r1
 800809a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800809e:	f000 f855 	bl	800814c <_lseek_r>
 80080a2:	1c43      	adds	r3, r0, #1
 80080a4:	89a3      	ldrh	r3, [r4, #12]
 80080a6:	bf15      	itete	ne
 80080a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80080aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80080ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80080b2:	81a3      	strheq	r3, [r4, #12]
 80080b4:	bf18      	it	ne
 80080b6:	81a3      	strhne	r3, [r4, #12]
 80080b8:	bd10      	pop	{r4, pc}

080080ba <__sclose>:
 80080ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080be:	f000 b813 	b.w	80080e8 <_close_r>
	...

080080c4 <_write_r>:
 80080c4:	b538      	push	{r3, r4, r5, lr}
 80080c6:	4d07      	ldr	r5, [pc, #28]	; (80080e4 <_write_r+0x20>)
 80080c8:	4604      	mov	r4, r0
 80080ca:	4608      	mov	r0, r1
 80080cc:	4611      	mov	r1, r2
 80080ce:	2200      	movs	r2, #0
 80080d0:	602a      	str	r2, [r5, #0]
 80080d2:	461a      	mov	r2, r3
 80080d4:	f7f9 fd07 	bl	8001ae6 <_write>
 80080d8:	1c43      	adds	r3, r0, #1
 80080da:	d102      	bne.n	80080e2 <_write_r+0x1e>
 80080dc:	682b      	ldr	r3, [r5, #0]
 80080de:	b103      	cbz	r3, 80080e2 <_write_r+0x1e>
 80080e0:	6023      	str	r3, [r4, #0]
 80080e2:	bd38      	pop	{r3, r4, r5, pc}
 80080e4:	20001414 	.word	0x20001414

080080e8 <_close_r>:
 80080e8:	b538      	push	{r3, r4, r5, lr}
 80080ea:	4d06      	ldr	r5, [pc, #24]	; (8008104 <_close_r+0x1c>)
 80080ec:	2300      	movs	r3, #0
 80080ee:	4604      	mov	r4, r0
 80080f0:	4608      	mov	r0, r1
 80080f2:	602b      	str	r3, [r5, #0]
 80080f4:	f7f9 fd13 	bl	8001b1e <_close>
 80080f8:	1c43      	adds	r3, r0, #1
 80080fa:	d102      	bne.n	8008102 <_close_r+0x1a>
 80080fc:	682b      	ldr	r3, [r5, #0]
 80080fe:	b103      	cbz	r3, 8008102 <_close_r+0x1a>
 8008100:	6023      	str	r3, [r4, #0]
 8008102:	bd38      	pop	{r3, r4, r5, pc}
 8008104:	20001414 	.word	0x20001414

08008108 <_fstat_r>:
 8008108:	b538      	push	{r3, r4, r5, lr}
 800810a:	4d07      	ldr	r5, [pc, #28]	; (8008128 <_fstat_r+0x20>)
 800810c:	2300      	movs	r3, #0
 800810e:	4604      	mov	r4, r0
 8008110:	4608      	mov	r0, r1
 8008112:	4611      	mov	r1, r2
 8008114:	602b      	str	r3, [r5, #0]
 8008116:	f7f9 fd0e 	bl	8001b36 <_fstat>
 800811a:	1c43      	adds	r3, r0, #1
 800811c:	d102      	bne.n	8008124 <_fstat_r+0x1c>
 800811e:	682b      	ldr	r3, [r5, #0]
 8008120:	b103      	cbz	r3, 8008124 <_fstat_r+0x1c>
 8008122:	6023      	str	r3, [r4, #0]
 8008124:	bd38      	pop	{r3, r4, r5, pc}
 8008126:	bf00      	nop
 8008128:	20001414 	.word	0x20001414

0800812c <_isatty_r>:
 800812c:	b538      	push	{r3, r4, r5, lr}
 800812e:	4d06      	ldr	r5, [pc, #24]	; (8008148 <_isatty_r+0x1c>)
 8008130:	2300      	movs	r3, #0
 8008132:	4604      	mov	r4, r0
 8008134:	4608      	mov	r0, r1
 8008136:	602b      	str	r3, [r5, #0]
 8008138:	f7f9 fd0d 	bl	8001b56 <_isatty>
 800813c:	1c43      	adds	r3, r0, #1
 800813e:	d102      	bne.n	8008146 <_isatty_r+0x1a>
 8008140:	682b      	ldr	r3, [r5, #0]
 8008142:	b103      	cbz	r3, 8008146 <_isatty_r+0x1a>
 8008144:	6023      	str	r3, [r4, #0]
 8008146:	bd38      	pop	{r3, r4, r5, pc}
 8008148:	20001414 	.word	0x20001414

0800814c <_lseek_r>:
 800814c:	b538      	push	{r3, r4, r5, lr}
 800814e:	4d07      	ldr	r5, [pc, #28]	; (800816c <_lseek_r+0x20>)
 8008150:	4604      	mov	r4, r0
 8008152:	4608      	mov	r0, r1
 8008154:	4611      	mov	r1, r2
 8008156:	2200      	movs	r2, #0
 8008158:	602a      	str	r2, [r5, #0]
 800815a:	461a      	mov	r2, r3
 800815c:	f7f9 fd06 	bl	8001b6c <_lseek>
 8008160:	1c43      	adds	r3, r0, #1
 8008162:	d102      	bne.n	800816a <_lseek_r+0x1e>
 8008164:	682b      	ldr	r3, [r5, #0]
 8008166:	b103      	cbz	r3, 800816a <_lseek_r+0x1e>
 8008168:	6023      	str	r3, [r4, #0]
 800816a:	bd38      	pop	{r3, r4, r5, pc}
 800816c:	20001414 	.word	0x20001414

08008170 <__malloc_lock>:
 8008170:	4801      	ldr	r0, [pc, #4]	; (8008178 <__malloc_lock+0x8>)
 8008172:	f7ff bb1d 	b.w	80077b0 <__retarget_lock_acquire_recursive>
 8008176:	bf00      	nop
 8008178:	20001408 	.word	0x20001408

0800817c <__malloc_unlock>:
 800817c:	4801      	ldr	r0, [pc, #4]	; (8008184 <__malloc_unlock+0x8>)
 800817e:	f7ff bb18 	b.w	80077b2 <__retarget_lock_release_recursive>
 8008182:	bf00      	nop
 8008184:	20001408 	.word	0x20001408

08008188 <_read_r>:
 8008188:	b538      	push	{r3, r4, r5, lr}
 800818a:	4d07      	ldr	r5, [pc, #28]	; (80081a8 <_read_r+0x20>)
 800818c:	4604      	mov	r4, r0
 800818e:	4608      	mov	r0, r1
 8008190:	4611      	mov	r1, r2
 8008192:	2200      	movs	r2, #0
 8008194:	602a      	str	r2, [r5, #0]
 8008196:	461a      	mov	r2, r3
 8008198:	f7f9 fc88 	bl	8001aac <_read>
 800819c:	1c43      	adds	r3, r0, #1
 800819e:	d102      	bne.n	80081a6 <_read_r+0x1e>
 80081a0:	682b      	ldr	r3, [r5, #0]
 80081a2:	b103      	cbz	r3, 80081a6 <_read_r+0x1e>
 80081a4:	6023      	str	r3, [r4, #0]
 80081a6:	bd38      	pop	{r3, r4, r5, pc}
 80081a8:	20001414 	.word	0x20001414

080081ac <_init>:
 80081ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ae:	bf00      	nop
 80081b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081b2:	bc08      	pop	{r3}
 80081b4:	469e      	mov	lr, r3
 80081b6:	4770      	bx	lr

080081b8 <_fini>:
 80081b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ba:	bf00      	nop
 80081bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081be:	bc08      	pop	{r3}
 80081c0:	469e      	mov	lr, r3
 80081c2:	4770      	bx	lr
