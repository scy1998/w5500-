
W5500.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b64  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  08007d14  08007d14  00017d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ec8  08007ec8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007ec8  08007ec8  00017ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ed0  08007ed0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ed0  08007ed0  00017ed0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ed4  08007ed4  00017ed4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007ed8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000039c  20000074  08007f4c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000410  08007f4c  00020410  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016e68  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003150  00000000  00000000  00036f0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001448  00000000  00000000  0003a060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012f0  00000000  00000000  0003b4a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c9b0  00000000  00000000  0003c798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019189  00000000  00000000  00069148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010735a  00000000  00000000  000822d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018962b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c18  00000000  00000000  0018967c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007cfc 	.word	0x08007cfc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	08007cfc 	.word	0x08007cfc

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <GPIO_ResetBits>:
unsigned short global_size;



void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	460b      	mov	r3, r1
 800059e:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 80005a0:	887b      	ldrh	r3, [r7, #2]
 80005a2:	2200      	movs	r2, #0
 80005a4:	4619      	mov	r1, r3
 80005a6:	6878      	ldr	r0, [r7, #4]
 80005a8:	f002 f8be 	bl	8002728 <HAL_GPIO_WritePin>
}
 80005ac:	bf00      	nop
 80005ae:	3708      	adds	r7, #8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}

080005b4 <GPIO_SetBits>:
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
 80005bc:	460b      	mov	r3, r1
 80005be:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 80005c0:	887b      	ldrh	r3, [r7, #2]
 80005c2:	2201      	movs	r2, #1
 80005c4:	4619      	mov	r1, r3
 80005c6:	6878      	ldr	r0, [r7, #4]
 80005c8:	f002 f8ae 	bl	8002728 <HAL_GPIO_WritePin>
}
 80005cc:	bf00      	nop
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <SPI_WriteByte>:

void SPI_WriteByte(uint8_t Send)
{ 
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	4603      	mov	r3, r0
 80005dc:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(&hspi3,&Send,1,0xffff);
 80005de:	1df9      	adds	r1, r7, #7
 80005e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005e4:	2201      	movs	r2, #1
 80005e6:	4808      	ldr	r0, [pc, #32]	; (8000608 <SPI_WriteByte+0x34>)
 80005e8:	f003 fcdd 	bl	8003fa6 <HAL_SPI_Transmit>
while(HAL_SPI_GetState(&hspi3) == HAL_SPI_STATE_BUSY_RX);
 80005ec:	bf00      	nop
 80005ee:	4806      	ldr	r0, [pc, #24]	; (8000608 <SPI_WriteByte+0x34>)
 80005f0:	f004 f98a 	bl	8004908 <HAL_SPI_GetState>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b04      	cmp	r3, #4
 80005f8:	d0f9      	beq.n	80005ee <SPI_WriteByte+0x1a>
SPI3->DR;
 80005fa:	4b04      	ldr	r3, [pc, #16]	; (800060c <SPI_WriteByte+0x38>)
 80005fc:	68db      	ldr	r3, [r3, #12]
}
 80005fe:	bf00      	nop
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	200000b0 	.word	0x200000b0
 800060c:	40003c00 	.word	0x40003c00

08000610 <SPI_WriteNBytes>:

void SPI_WriteNBytes(uint8_t *Send,uint16_t len)
{ 
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
 8000618:	460b      	mov	r3, r1
 800061a:	807b      	strh	r3, [r7, #2]
HAL_SPI_Transmit(&hspi3,Send,len,0xffff);
 800061c:	887a      	ldrh	r2, [r7, #2]
 800061e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000622:	6879      	ldr	r1, [r7, #4]
 8000624:	4807      	ldr	r0, [pc, #28]	; (8000644 <SPI_WriteNBytes+0x34>)
 8000626:	f003 fcbe 	bl	8003fa6 <HAL_SPI_Transmit>
while(HAL_SPI_GetState(&hspi3) == HAL_SPI_STATE_BUSY_RX);
 800062a:	bf00      	nop
 800062c:	4805      	ldr	r0, [pc, #20]	; (8000644 <SPI_WriteNBytes+0x34>)
 800062e:	f004 f96b 	bl	8004908 <HAL_SPI_GetState>
 8000632:	4603      	mov	r3, r0
 8000634:	2b04      	cmp	r3, #4
 8000636:	d0f9      	beq.n	800062c <SPI_WriteNBytes+0x1c>
SPI3->DR;
 8000638:	4b03      	ldr	r3, [pc, #12]	; (8000648 <SPI_WriteNBytes+0x38>)
 800063a:	68db      	ldr	r3, [r3, #12]
}
 800063c:	bf00      	nop
 800063e:	3708      	adds	r7, #8
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	200000b0 	.word	0x200000b0
 8000648:	40003c00 	.word	0x40003c00

0800064c <SPI_ReadByte>:

uint8_t SPI_ReadByte(void)
{ 
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
uint8_t Rcv=0;
 8000652:	2300      	movs	r3, #0
 8000654:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Receive(&hspi3,&Rcv,1,0XFFFF);
 8000656:	1df9      	adds	r1, r7, #7
 8000658:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800065c:	2201      	movs	r2, #1
 800065e:	4804      	ldr	r0, [pc, #16]	; (8000670 <SPI_ReadByte+0x24>)
 8000660:	f003 fe0f 	bl	8004282 <HAL_SPI_Receive>
return Rcv;
 8000664:	79fb      	ldrb	r3, [r7, #7]
}
 8000666:	4618      	mov	r0, r3
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	200000b0 	.word	0x200000b0

08000674 <SPI1_Send_Byte>:
* 输出    : 无
* 返回值  : 无
* 说明    : 无
*******************************************************************************/
void SPI1_Send_Byte(unsigned char dat)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	4603      	mov	r3, r0
 800067c:	71fb      	strb	r3, [r7, #7]
	//SPI_I2S_SendData(SPI1,dat);//写1个字节数据
	//while(SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET);//等待数据寄存器空
	SPI_WriteByte(dat);
 800067e:	79fb      	ldrb	r3, [r7, #7]
 8000680:	4618      	mov	r0, r3
 8000682:	f7ff ffa7 	bl	80005d4 <SPI_WriteByte>
}
 8000686:	bf00      	nop
 8000688:	3708      	adds	r7, #8
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}

0800068e <SPI1_Send_Short>:
* 输出    : 无
* 返回值  : 无
* 说明    : 无
*******************************************************************************/
void SPI1_Send_Short(unsigned short dat)
{
 800068e:	b580      	push	{r7, lr}
 8000690:	b082      	sub	sp, #8
 8000692:	af00      	add	r7, sp, #0
 8000694:	4603      	mov	r3, r0
 8000696:	80fb      	strh	r3, [r7, #6]
//	SPI1_Send_Byte(dat/256);//写数据高位
//	SPI1_Send_Byte(dat);	//写数据低位
	SPI_WriteByte(dat/256);
 8000698:	88fb      	ldrh	r3, [r7, #6]
 800069a:	0a1b      	lsrs	r3, r3, #8
 800069c:	b29b      	uxth	r3, r3
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	4618      	mov	r0, r3
 80006a2:	f7ff ff97 	bl	80005d4 <SPI_WriteByte>
	SPI_WriteByte(dat);
 80006a6:	88fb      	ldrh	r3, [r7, #6]
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	4618      	mov	r0, r3
 80006ac:	f7ff ff92 	bl	80005d4 <SPI_WriteByte>
}
 80006b0:	bf00      	nop
 80006b2:	3708      	adds	r7, #8
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <Write_W5500_1Byte>:
* 输出    : 无
* 返回值  : 无
* 说明    : 无
*******************************************************************************/
void Write_W5500_1Byte(unsigned short reg, unsigned char dat)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	4603      	mov	r3, r0
 80006c0:	460a      	mov	r2, r1
 80006c2:	80fb      	strh	r3, [r7, #6]
 80006c4:	4613      	mov	r3, r2
 80006c6:	717b      	strb	r3, [r7, #5]
	GPIO_ResetBits(W5500_SCS_PORT, W5500_SCS);//置W5500的SCS为低电平
 80006c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006d0:	f7ff ff60 	bl	8000594 <GPIO_ResetBits>

	SPI1_Send_Short(reg);//通过SPI1写16位寄存器地址
 80006d4:	88fb      	ldrh	r3, [r7, #6]
 80006d6:	4618      	mov	r0, r3
 80006d8:	f7ff ffd9 	bl	800068e <SPI1_Send_Short>
	SPI1_Send_Byte(FDM1|RWB_WRITE|COMMON_R);//通过SPI1写控制字节,1个字节数据长度,写数据,选择通用寄存器
 80006dc:	2005      	movs	r0, #5
 80006de:	f7ff ffc9 	bl	8000674 <SPI1_Send_Byte>
	SPI1_Send_Byte(dat);//写1个字节数据
 80006e2:	797b      	ldrb	r3, [r7, #5]
 80006e4:	4618      	mov	r0, r3
 80006e6:	f7ff ffc5 	bl	8000674 <SPI1_Send_Byte>

	GPIO_SetBits(W5500_SCS_PORT, W5500_SCS); //置W5500的SCS为高电平
 80006ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006f2:	f7ff ff5f 	bl	80005b4 <GPIO_SetBits>
}
 80006f6:	bf00      	nop
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}

080006fe <Write_W5500_2Byte>:
* 输出    : 无
* 返回值  : 无
* 说明    : 无
*******************************************************************************/
void Write_W5500_2Byte(unsigned short reg, unsigned short dat)
{
 80006fe:	b580      	push	{r7, lr}
 8000700:	b082      	sub	sp, #8
 8000702:	af00      	add	r7, sp, #0
 8000704:	4603      	mov	r3, r0
 8000706:	460a      	mov	r2, r1
 8000708:	80fb      	strh	r3, [r7, #6]
 800070a:	4613      	mov	r3, r2
 800070c:	80bb      	strh	r3, [r7, #4]
	GPIO_ResetBits(W5500_SCS_PORT, W5500_SCS);//置W5500的SCS为低电平
 800070e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000712:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000716:	f7ff ff3d 	bl	8000594 <GPIO_ResetBits>
		
	SPI1_Send_Short(reg);//通过SPI1写16位寄存器地址
 800071a:	88fb      	ldrh	r3, [r7, #6]
 800071c:	4618      	mov	r0, r3
 800071e:	f7ff ffb6 	bl	800068e <SPI1_Send_Short>
	SPI1_Send_Byte(FDM2|RWB_WRITE|COMMON_R);//通过SPI1写控制字节,2个字节数据长度,写数据,选择通用寄存器
 8000722:	2006      	movs	r0, #6
 8000724:	f7ff ffa6 	bl	8000674 <SPI1_Send_Byte>
	SPI1_Send_Short(dat);//写16位数据
 8000728:	88bb      	ldrh	r3, [r7, #4]
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff ffaf 	bl	800068e <SPI1_Send_Short>

	GPIO_SetBits(W5500_SCS_PORT, W5500_SCS); //置W5500的SCS为高电平
 8000730:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000734:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000738:	f7ff ff3c 	bl	80005b4 <GPIO_SetBits>
}
 800073c:	bf00      	nop
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}

08000744 <Write_W5500_nByte>:
* 输出    : 无
* 返回值  : 无
* 说明    : 无
*******************************************************************************/
void Write_W5500_nByte(unsigned short reg, unsigned char *dat_ptr, unsigned short size)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af00      	add	r7, sp, #0
 800074a:	4603      	mov	r3, r0
 800074c:	6039      	str	r1, [r7, #0]
 800074e:	80fb      	strh	r3, [r7, #6]
 8000750:	4613      	mov	r3, r2
 8000752:	80bb      	strh	r3, [r7, #4]
	unsigned short i;

	GPIO_ResetBits(W5500_SCS_PORT, W5500_SCS);//置W5500的SCS为低电平	
 8000754:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000758:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800075c:	f7ff ff1a 	bl	8000594 <GPIO_ResetBits>
		
	SPI1_Send_Short(reg);//通过SPI1写16位寄存器地址
 8000760:	88fb      	ldrh	r3, [r7, #6]
 8000762:	4618      	mov	r0, r3
 8000764:	f7ff ff93 	bl	800068e <SPI1_Send_Short>
	SPI1_Send_Byte(VDM|RWB_WRITE|COMMON_R);//通过SPI1写控制字节,N个字节数据长度,写数据,选择通用寄存器
 8000768:	2004      	movs	r0, #4
 800076a:	f7ff ff83 	bl	8000674 <SPI1_Send_Byte>

	for(i=0;i<size;i++)//循环将缓冲区的size个字节数据写入W5500
 800076e:	2300      	movs	r3, #0
 8000770:	81fb      	strh	r3, [r7, #14]
 8000772:	e009      	b.n	8000788 <Write_W5500_nByte+0x44>
	{
		SPI1_Send_Byte(*dat_ptr++);//写一个字节数据
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	1c5a      	adds	r2, r3, #1
 8000778:	603a      	str	r2, [r7, #0]
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	4618      	mov	r0, r3
 800077e:	f7ff ff79 	bl	8000674 <SPI1_Send_Byte>
	for(i=0;i<size;i++)//循环将缓冲区的size个字节数据写入W5500
 8000782:	89fb      	ldrh	r3, [r7, #14]
 8000784:	3301      	adds	r3, #1
 8000786:	81fb      	strh	r3, [r7, #14]
 8000788:	89fa      	ldrh	r2, [r7, #14]
 800078a:	88bb      	ldrh	r3, [r7, #4]
 800078c:	429a      	cmp	r2, r3
 800078e:	d3f1      	bcc.n	8000774 <Write_W5500_nByte+0x30>
	}

	GPIO_SetBits(W5500_SCS_PORT, W5500_SCS); //置W5500的SCS为高电平
 8000790:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000794:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000798:	f7ff ff0c 	bl	80005b4 <GPIO_SetBits>
}
 800079c:	bf00      	nop
 800079e:	3710      	adds	r7, #16
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <Write_W5500_SOCK_1Byte>:
* 输出    : 无
* 返回值  : 无
* 说明    : 无
*******************************************************************************/
void Write_W5500_SOCK_1Byte(SOCKET s, unsigned short reg, unsigned char dat)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4603      	mov	r3, r0
 80007ac:	71fb      	strb	r3, [r7, #7]
 80007ae:	460b      	mov	r3, r1
 80007b0:	80bb      	strh	r3, [r7, #4]
 80007b2:	4613      	mov	r3, r2
 80007b4:	71bb      	strb	r3, [r7, #6]
	GPIO_ResetBits(W5500_SCS_PORT, W5500_SCS);//置W5500的SCS为低电平	
 80007b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007be:	f7ff fee9 	bl	8000594 <GPIO_ResetBits>
		
	SPI1_Send_Short(reg);//通过SPI1写16位寄存器地址
 80007c2:	88bb      	ldrh	r3, [r7, #4]
 80007c4:	4618      	mov	r0, r3
 80007c6:	f7ff ff62 	bl	800068e <SPI1_Send_Short>
	SPI1_Send_Byte(FDM1|RWB_WRITE|(s*0x20+0x08));//通过SPI1写控制字节,1个字节数据长度,写数据,选择端口s的寄存器
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	015b      	lsls	r3, r3, #5
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	3308      	adds	r3, #8
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	b25b      	sxtb	r3, r3
 80007d6:	f043 0305 	orr.w	r3, r3, #5
 80007da:	b25b      	sxtb	r3, r3
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	4618      	mov	r0, r3
 80007e0:	f7ff ff48 	bl	8000674 <SPI1_Send_Byte>
	SPI1_Send_Byte(dat);//写1个字节数据
 80007e4:	79bb      	ldrb	r3, [r7, #6]
 80007e6:	4618      	mov	r0, r3
 80007e8:	f7ff ff44 	bl	8000674 <SPI1_Send_Byte>

	GPIO_SetBits(W5500_SCS_PORT, W5500_SCS); //置W5500的SCS为高电平
 80007ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007f4:	f7ff fede 	bl	80005b4 <GPIO_SetBits>
}
 80007f8:	bf00      	nop
 80007fa:	3708      	adds	r7, #8
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}

08000800 <Write_W5500_SOCK_2Byte>:
* 输出    : 无
* 返回值  : 无
* 说明    : 无
*******************************************************************************/
void Write_W5500_SOCK_2Byte(SOCKET s, unsigned short reg, unsigned short dat)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	71fb      	strb	r3, [r7, #7]
 800080a:	460b      	mov	r3, r1
 800080c:	80bb      	strh	r3, [r7, #4]
 800080e:	4613      	mov	r3, r2
 8000810:	807b      	strh	r3, [r7, #2]
	GPIO_ResetBits(W5500_SCS_PORT, W5500_SCS);//置W5500的SCS为低电平
 8000812:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000816:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800081a:	f7ff febb 	bl	8000594 <GPIO_ResetBits>
			
	SPI1_Send_Short(reg);//通过SPI1写16位寄存器地址
 800081e:	88bb      	ldrh	r3, [r7, #4]
 8000820:	4618      	mov	r0, r3
 8000822:	f7ff ff34 	bl	800068e <SPI1_Send_Short>
	SPI1_Send_Byte(FDM2|RWB_WRITE|(s*0x20+0x08));//通过SPI1写控制字节,2个字节数据长度,写数据,选择端口s的寄存器
 8000826:	79fb      	ldrb	r3, [r7, #7]
 8000828:	015b      	lsls	r3, r3, #5
 800082a:	b2db      	uxtb	r3, r3
 800082c:	3308      	adds	r3, #8
 800082e:	b2db      	uxtb	r3, r3
 8000830:	b25b      	sxtb	r3, r3
 8000832:	f043 0306 	orr.w	r3, r3, #6
 8000836:	b25b      	sxtb	r3, r3
 8000838:	b2db      	uxtb	r3, r3
 800083a:	4618      	mov	r0, r3
 800083c:	f7ff ff1a 	bl	8000674 <SPI1_Send_Byte>
	SPI1_Send_Short(dat);//写16位数据
 8000840:	887b      	ldrh	r3, [r7, #2]
 8000842:	4618      	mov	r0, r3
 8000844:	f7ff ff23 	bl	800068e <SPI1_Send_Short>

	GPIO_SetBits(W5500_SCS_PORT, W5500_SCS); //置W5500的SCS为高电平
 8000848:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800084c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000850:	f7ff feb0 	bl	80005b4 <GPIO_SetBits>
}
 8000854:	bf00      	nop
 8000856:	3708      	adds	r7, #8
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}

0800085c <Write_W5500_SOCK_4Byte>:
* 输出    : 无
* 返回值  : 无
* 说明    : 无
*******************************************************************************/
void Write_W5500_SOCK_4Byte(SOCKET s, unsigned short reg, unsigned char *dat_ptr)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	4603      	mov	r3, r0
 8000864:	603a      	str	r2, [r7, #0]
 8000866:	71fb      	strb	r3, [r7, #7]
 8000868:	460b      	mov	r3, r1
 800086a:	80bb      	strh	r3, [r7, #4]
	GPIO_ResetBits(W5500_SCS_PORT, W5500_SCS);//置W5500的SCS为低电平
 800086c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000870:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000874:	f7ff fe8e 	bl	8000594 <GPIO_ResetBits>
			
	SPI1_Send_Short(reg);//通过SPI1写16位寄存器地址
 8000878:	88bb      	ldrh	r3, [r7, #4]
 800087a:	4618      	mov	r0, r3
 800087c:	f7ff ff07 	bl	800068e <SPI1_Send_Short>
	SPI1_Send_Byte(FDM4|RWB_WRITE|(s*0x20+0x08));//通过SPI1写控制字节,4个字节数据长度,写数据,选择端口s的寄存器
 8000880:	79fb      	ldrb	r3, [r7, #7]
 8000882:	015b      	lsls	r3, r3, #5
 8000884:	b2db      	uxtb	r3, r3
 8000886:	3308      	adds	r3, #8
 8000888:	b2db      	uxtb	r3, r3
 800088a:	b25b      	sxtb	r3, r3
 800088c:	f043 0307 	orr.w	r3, r3, #7
 8000890:	b25b      	sxtb	r3, r3
 8000892:	b2db      	uxtb	r3, r3
 8000894:	4618      	mov	r0, r3
 8000896:	f7ff feed 	bl	8000674 <SPI1_Send_Byte>

	SPI1_Send_Byte(*dat_ptr++);//写第1个字节数据
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	1c5a      	adds	r2, r3, #1
 800089e:	603a      	str	r2, [r7, #0]
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	4618      	mov	r0, r3
 80008a4:	f7ff fee6 	bl	8000674 <SPI1_Send_Byte>
	SPI1_Send_Byte(*dat_ptr++);//写第2个字节数据
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	1c5a      	adds	r2, r3, #1
 80008ac:	603a      	str	r2, [r7, #0]
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	4618      	mov	r0, r3
 80008b2:	f7ff fedf 	bl	8000674 <SPI1_Send_Byte>
	SPI1_Send_Byte(*dat_ptr++);//写第3个字节数据
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	1c5a      	adds	r2, r3, #1
 80008ba:	603a      	str	r2, [r7, #0]
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	4618      	mov	r0, r3
 80008c0:	f7ff fed8 	bl	8000674 <SPI1_Send_Byte>
	SPI1_Send_Byte(*dat_ptr++);//写第4个字节数据
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	1c5a      	adds	r2, r3, #1
 80008c8:	603a      	str	r2, [r7, #0]
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	4618      	mov	r0, r3
 80008ce:	f7ff fed1 	bl	8000674 <SPI1_Send_Byte>

	GPIO_SetBits(W5500_SCS_PORT, W5500_SCS); //置W5500的SCS为高电平
 80008d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008da:	f7ff fe6b 	bl	80005b4 <GPIO_SetBits>
}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}

080008e6 <Read_W5500_1Byte>:
* 输出    : 无
* 返回值  : 读取到寄存器的1个字节数据
* 说明    : 无
*******************************************************************************/
unsigned char Read_W5500_1Byte(unsigned short reg)
{
 80008e6:	b580      	push	{r7, lr}
 80008e8:	b084      	sub	sp, #16
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	4603      	mov	r3, r0
 80008ee:	80fb      	strh	r3, [r7, #6]
	unsigned char i;

	GPIO_ResetBits(W5500_SCS_PORT, W5500_SCS);//置W5500的SCS为低电平
 80008f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008f8:	f7ff fe4c 	bl	8000594 <GPIO_ResetBits>
			
	SPI1_Send_Short(reg);//通过SPI1写16位寄存器地址
 80008fc:	88fb      	ldrh	r3, [r7, #6]
 80008fe:	4618      	mov	r0, r3
 8000900:	f7ff fec5 	bl	800068e <SPI1_Send_Short>
	SPI1_Send_Byte(FDM1|RWB_READ|COMMON_R);//通过SPI1写控制字节,1个字节数据长度,读数据,选择通用寄存器
 8000904:	2001      	movs	r0, #1
 8000906:	f7ff feb5 	bl	8000674 <SPI1_Send_Byte>

	i=SPI_ReadByte();
 800090a:	f7ff fe9f 	bl	800064c <SPI_ReadByte>
 800090e:	4603      	mov	r3, r0
 8000910:	73fb      	strb	r3, [r7, #15]
//	printf("i1=%d\n",i);
//	SPI1_Send_Byte(0x00);//发送一个哑数据
//	i=SPI_ReadByte();//读取1个字节数据
//	printf("i2=%d\n",i);

	GPIO_SetBits(W5500_SCS_PORT, W5500_SCS);//置W5500的SCS为高电平
 8000912:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000916:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800091a:	f7ff fe4b 	bl	80005b4 <GPIO_SetBits>
	return i;//返回读取到的寄存器数据
 800091e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000920:	4618      	mov	r0, r3
 8000922:	3710      	adds	r7, #16
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}

08000928 <Read_W5500_SOCK_1Byte>:
* 输出    : 无
* 返回值  : 读取到寄存器的1个字节数据
* 说明    : 无
*******************************************************************************/
unsigned char Read_W5500_SOCK_1Byte(SOCKET s, unsigned short reg)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af00      	add	r7, sp, #0
 800092e:	4603      	mov	r3, r0
 8000930:	460a      	mov	r2, r1
 8000932:	71fb      	strb	r3, [r7, #7]
 8000934:	4613      	mov	r3, r2
 8000936:	80bb      	strh	r3, [r7, #4]
	unsigned char i;

	GPIO_ResetBits(W5500_SCS_PORT, W5500_SCS);//置W5500的SCS为低电平
 8000938:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800093c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000940:	f7ff fe28 	bl	8000594 <GPIO_ResetBits>
			
	SPI1_Send_Short(reg);//通过SPI1写16位寄存器地址
 8000944:	88bb      	ldrh	r3, [r7, #4]
 8000946:	4618      	mov	r0, r3
 8000948:	f7ff fea1 	bl	800068e <SPI1_Send_Short>
	SPI1_Send_Byte(FDM1|RWB_READ|(s*0x20+0x08));//通过SPI1写控制字节,1个字节数据长度,读数据,选择端口s的寄存器
 800094c:	79fb      	ldrb	r3, [r7, #7]
 800094e:	015b      	lsls	r3, r3, #5
 8000950:	b2db      	uxtb	r3, r3
 8000952:	3308      	adds	r3, #8
 8000954:	b2db      	uxtb	r3, r3
 8000956:	b25b      	sxtb	r3, r3
 8000958:	f043 0301 	orr.w	r3, r3, #1
 800095c:	b25b      	sxtb	r3, r3
 800095e:	b2db      	uxtb	r3, r3
 8000960:	4618      	mov	r0, r3
 8000962:	f7ff fe87 	bl	8000674 <SPI1_Send_Byte>

	i=SPI_ReadByte();
 8000966:	f7ff fe71 	bl	800064c <SPI_ReadByte>
 800096a:	4603      	mov	r3, r0
 800096c:	73fb      	strb	r3, [r7, #15]
//	printf("i3=%d\n",i);
//	SPI1_Send_Byte(0x00);//发送一个哑数据
//	i=SPI_ReadByte();//读取1个字节数据
//	printf("i4=%d\n",i);
	GPIO_SetBits(W5500_SCS_PORT, W5500_SCS);//置W5500的SCS为高电平
 800096e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000972:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000976:	f7ff fe1d 	bl	80005b4 <GPIO_SetBits>
	return i;//返回读取到的寄存器数据
 800097a:	7bfb      	ldrb	r3, [r7, #15]
}
 800097c:	4618      	mov	r0, r3
 800097e:	3710      	adds	r7, #16
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}

08000984 <Read_W5500_SOCK_2Byte>:
* 输出    : 无
* 返回值  : 读取到寄存器的2个字节数据(16位)
* 说明    : 无
*******************************************************************************/
unsigned short Read_W5500_SOCK_2Byte(SOCKET s, unsigned short reg)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
 800098a:	4603      	mov	r3, r0
 800098c:	460a      	mov	r2, r1
 800098e:	71fb      	strb	r3, [r7, #7]
 8000990:	4613      	mov	r3, r2
 8000992:	80bb      	strh	r3, [r7, #4]
	unsigned short i;

	GPIO_ResetBits(W5500_SCS_PORT, W5500_SCS);//置W5500的SCS为低电平
 8000994:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000998:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800099c:	f7ff fdfa 	bl	8000594 <GPIO_ResetBits>
			
	SPI1_Send_Short(reg);//通过SPI1写16位寄存器地址
 80009a0:	88bb      	ldrh	r3, [r7, #4]
 80009a2:	4618      	mov	r0, r3
 80009a4:	f7ff fe73 	bl	800068e <SPI1_Send_Short>
	SPI1_Send_Byte(FDM2|RWB_READ|(s*0x20+0x08));//通过SPI1写控制字节,2个字节数据长度,读数据,选择端口s的寄存器
 80009a8:	79fb      	ldrb	r3, [r7, #7]
 80009aa:	015b      	lsls	r3, r3, #5
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	3308      	adds	r3, #8
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	b25b      	sxtb	r3, r3
 80009b4:	f043 0302 	orr.w	r3, r3, #2
 80009b8:	b25b      	sxtb	r3, r3
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	4618      	mov	r0, r3
 80009be:	f7ff fe59 	bl	8000674 <SPI1_Send_Byte>

//	i=SPI_ReadByte();
//	SPI1_Send_Byte(0x00);//发送一个哑数据
	i=SPI_ReadByte();//读取高位数据
 80009c2:	f7ff fe43 	bl	800064c <SPI_ReadByte>
 80009c6:	4603      	mov	r3, r0
 80009c8:	81fb      	strh	r3, [r7, #14]
//	SPI1_Send_Byte(0x00);//发送一个哑数据
	i*=256;
 80009ca:	89fb      	ldrh	r3, [r7, #14]
 80009cc:	021b      	lsls	r3, r3, #8
 80009ce:	81fb      	strh	r3, [r7, #14]
	i+=SPI_ReadByte();//读取低位数据
 80009d0:	f7ff fe3c 	bl	800064c <SPI_ReadByte>
 80009d4:	4603      	mov	r3, r0
 80009d6:	b29a      	uxth	r2, r3
 80009d8:	89fb      	ldrh	r3, [r7, #14]
 80009da:	4413      	add	r3, r2
 80009dc:	81fb      	strh	r3, [r7, #14]

	GPIO_SetBits(W5500_SCS_PORT, W5500_SCS);//置W5500的SCS为高电平
 80009de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e6:	f7ff fde5 	bl	80005b4 <GPIO_SetBits>
	return i;//返回读取到的寄存器数据
 80009ea:	89fb      	ldrh	r3, [r7, #14]
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	3710      	adds	r7, #16
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <Write_SOCK_Data_Buffer>:
* 输出    : 无
* 返回值  : 无
* 说明    : 无
*******************************************************************************/
void Write_SOCK_Data_Buffer(SOCKET s, unsigned char *dat_ptr, unsigned short size)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	4603      	mov	r3, r0
 80009fc:	6039      	str	r1, [r7, #0]
 80009fe:	71fb      	strb	r3, [r7, #7]
 8000a00:	4613      	mov	r3, r2
 8000a02:	80bb      	strh	r3, [r7, #4]
	unsigned short offset,offset1;
	while(hspi3.State == HAL_SPI_STATE_BUSY_TX);
 8000a04:	bf00      	nop
 8000a06:	4b3f      	ldr	r3, [pc, #252]	; (8000b04 <Write_SOCK_Data_Buffer+0x110>)
 8000a08:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	2b03      	cmp	r3, #3
 8000a10:	d0f9      	beq.n	8000a06 <Write_SOCK_Data_Buffer+0x12>
//		Write_W5500_SOCK_4Byte(s, Sn_DIPR, S0_DIP);//设置目的主机IP
//		Write_W5500_SOCK_2Byte(s, Sn_DPORTR, S0_DPort[0]*256+S0_DPort[1]);//设置目的主机端口号
//	}


	offset=Read_W5500_SOCK_2Byte(s,Sn_TX_WR);
 8000a12:	79fb      	ldrb	r3, [r7, #7]
 8000a14:	2124      	movs	r1, #36	; 0x24
 8000a16:	4618      	mov	r0, r3
 8000a18:	f7ff ffb4 	bl	8000984 <Read_W5500_SOCK_2Byte>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	81fb      	strh	r3, [r7, #14]
	offset1=offset;
 8000a20:	89fb      	ldrh	r3, [r7, #14]
 8000a22:	81bb      	strh	r3, [r7, #12]
	offset&=(S_TX_SIZE-1);//计算实际的物理地址
 8000a24:	89fb      	ldrh	r3, [r7, #14]
 8000a26:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8000a2a:	81fb      	strh	r3, [r7, #14]

	GPIO_ResetBits(W5500_SCS_PORT, W5500_SCS);//置W5500的SCS为低电平
 8000a2c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a34:	f7ff fdae 	bl	8000594 <GPIO_ResetBits>

	SPI1_Send_Short(offset);//写16位地址
 8000a38:	89fb      	ldrh	r3, [r7, #14]
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f7ff fe27 	bl	800068e <SPI1_Send_Short>
	SPI1_Send_Byte(VDM|RWB_WRITE|(s*0x20+0x10));//写控制字节,N个字节数据长度,写数据,选择端口s的寄存器
 8000a40:	79fb      	ldrb	r3, [r7, #7]
 8000a42:	015b      	lsls	r3, r3, #5
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	3310      	adds	r3, #16
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	b25b      	sxtb	r3, r3
 8000a4c:	f043 0304 	orr.w	r3, r3, #4
 8000a50:	b25b      	sxtb	r3, r3
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	4618      	mov	r0, r3
 8000a56:	f7ff fe0d 	bl	8000674 <SPI1_Send_Byte>

	if((offset+size)<S_TX_SIZE)//如果最大地址未超过W5500发送缓冲区寄存器的最大地址
 8000a5a:	89fa      	ldrh	r2, [r7, #14]
 8000a5c:	88bb      	ldrh	r3, [r7, #4]
 8000a5e:	4413      	add	r3, r2
 8000a60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a64:	da05      	bge.n	8000a72 <Write_SOCK_Data_Buffer+0x7e>
	{
//		for(i=0;i<size;i++)//循环写入size个字节数据
//		{
//			SPI1_Send_Byte(*dat_ptr++);//写入一个字节的数据
//		}
		SPI_WriteNBytes(dat_ptr,size);
 8000a66:	88bb      	ldrh	r3, [r7, #4]
 8000a68:	4619      	mov	r1, r3
 8000a6a:	6838      	ldr	r0, [r7, #0]
 8000a6c:	f7ff fdd0 	bl	8000610 <SPI_WriteNBytes>
 8000a70:	e02e      	b.n	8000ad0 <Write_SOCK_Data_Buffer+0xdc>
	}
	else//如果最大地址超过W5500发送缓冲区寄存器的最大地址
	{
		offset=S_TX_SIZE-offset;
 8000a72:	89fb      	ldrh	r3, [r7, #14]
 8000a74:	f5c3 5300 	rsb	r3, r3, #8192	; 0x2000
 8000a78:	81fb      	strh	r3, [r7, #14]
//		for(i=0;i<offset;i++)//循环写入前offset个字节数据
//		{
//			SPI1_Send_Byte(*dat_ptr++);//写入一个字节的数据
//		}
		SPI_WriteNBytes(dat_ptr,offset);
 8000a7a:	89fb      	ldrh	r3, [r7, #14]
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	6838      	ldr	r0, [r7, #0]
 8000a80:	f7ff fdc6 	bl	8000610 <SPI_WriteNBytes>
		GPIO_SetBits(W5500_SCS_PORT, W5500_SCS); //置W5500的SCS为高电平
 8000a84:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a8c:	f7ff fd92 	bl	80005b4 <GPIO_SetBits>

		GPIO_ResetBits(W5500_SCS_PORT, W5500_SCS);//置W5500的SCS为低电平
 8000a90:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a98:	f7ff fd7c 	bl	8000594 <GPIO_ResetBits>

		SPI1_Send_Short(0x00);//写16位地址
 8000a9c:	2000      	movs	r0, #0
 8000a9e:	f7ff fdf6 	bl	800068e <SPI1_Send_Short>
		SPI1_Send_Byte(VDM|RWB_WRITE|(s*0x20+0x10));//写控制字节,N个字节数据长度,写数据,选择端口s的寄存器
 8000aa2:	79fb      	ldrb	r3, [r7, #7]
 8000aa4:	015b      	lsls	r3, r3, #5
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	3310      	adds	r3, #16
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	b25b      	sxtb	r3, r3
 8000aae:	f043 0304 	orr.w	r3, r3, #4
 8000ab2:	b25b      	sxtb	r3, r3
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f7ff fddc 	bl	8000674 <SPI1_Send_Byte>

//		for(;i<size;i++)//循环写入size-offset个字节数据
//		{
//			SPI1_Send_Byte(*dat_ptr++);//写入一个字节的数据
//		}
		SPI_WriteNBytes(&dat_ptr[offset],size-offset);
 8000abc:	89fb      	ldrh	r3, [r7, #14]
 8000abe:	683a      	ldr	r2, [r7, #0]
 8000ac0:	18d0      	adds	r0, r2, r3
 8000ac2:	88ba      	ldrh	r2, [r7, #4]
 8000ac4:	89fb      	ldrh	r3, [r7, #14]
 8000ac6:	1ad3      	subs	r3, r2, r3
 8000ac8:	b29b      	uxth	r3, r3
 8000aca:	4619      	mov	r1, r3
 8000acc:	f7ff fda0 	bl	8000610 <SPI_WriteNBytes>
	}
	GPIO_SetBits(W5500_SCS_PORT, W5500_SCS); //置W5500的SCS为高电平
 8000ad0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ad4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ad8:	f7ff fd6c 	bl	80005b4 <GPIO_SetBits>
	
	offset1+=size;//更新实际物理地址,即下次写待发送数据到发送数据缓冲区的起始地址
 8000adc:	89ba      	ldrh	r2, [r7, #12]
 8000ade:	88bb      	ldrh	r3, [r7, #4]
 8000ae0:	4413      	add	r3, r2
 8000ae2:	81bb      	strh	r3, [r7, #12]
	Write_W5500_SOCK_2Byte(s, Sn_TX_WR, offset1);
 8000ae4:	89ba      	ldrh	r2, [r7, #12]
 8000ae6:	79fb      	ldrb	r3, [r7, #7]
 8000ae8:	2124      	movs	r1, #36	; 0x24
 8000aea:	4618      	mov	r0, r3
 8000aec:	f7ff fe88 	bl	8000800 <Write_W5500_SOCK_2Byte>
	Write_W5500_SOCK_1Byte(s, Sn_CR, SEND);//发送启动发送命令				
 8000af0:	79fb      	ldrb	r3, [r7, #7]
 8000af2:	2220      	movs	r2, #32
 8000af4:	2101      	movs	r1, #1
 8000af6:	4618      	mov	r0, r3
 8000af8:	f7ff fe54 	bl	80007a4 <Write_W5500_SOCK_1Byte>
}
 8000afc:	bf00      	nop
 8000afe:	3710      	adds	r7, #16
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	200000b0 	.word	0x200000b0

08000b08 <W5500_Hardware_Reset>:
* 输出    : 无
* 返回值  : 无
* 说明    : W5500的复位引脚保持低电平至少500us以上,才能重围W5500
*******************************************************************************/
void W5500_Hardware_Reset(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
	GPIO_ResetBits(W5500_RST_PORT, W5500_RST);//复位引脚拉低
 8000b0c:	2180      	movs	r1, #128	; 0x80
 8000b0e:	480e      	ldr	r0, [pc, #56]	; (8000b48 <W5500_Hardware_Reset+0x40>)
 8000b10:	f7ff fd40 	bl	8000594 <GPIO_ResetBits>
	HAL_Delay(500);
 8000b14:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b18:	f001 f8bc 	bl	8001c94 <HAL_Delay>
	GPIO_SetBits(W5500_RST_PORT, W5500_RST);//复位引脚拉高
 8000b1c:	2180      	movs	r1, #128	; 0x80
 8000b1e:	480a      	ldr	r0, [pc, #40]	; (8000b48 <W5500_Hardware_Reset+0x40>)
 8000b20:	f7ff fd48 	bl	80005b4 <GPIO_SetBits>
	HAL_Delay(200);
 8000b24:	20c8      	movs	r0, #200	; 0xc8
 8000b26:	f001 f8b5 	bl	8001c94 <HAL_Delay>
	while((Read_W5500_1Byte(PHYCFGR)&LINK)==0);//等待以太网连接完成
 8000b2a:	bf00      	nop
 8000b2c:	202e      	movs	r0, #46	; 0x2e
 8000b2e:	f7ff feda 	bl	80008e6 <Read_W5500_1Byte>
 8000b32:	4603      	mov	r3, r0
 8000b34:	f003 0301 	and.w	r3, r3, #1
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d0f7      	beq.n	8000b2c <W5500_Hardware_Reset+0x24>
	printf("w5500 Ethernet link complete !\r\n");
 8000b3c:	4803      	ldr	r0, [pc, #12]	; (8000b4c <W5500_Hardware_Reset+0x44>)
 8000b3e:	f006 f95f 	bl	8006e00 <puts>
	//uint8_t PHY=Read_W5500_1Byte(PHYCFGR);
	//printf("PHYCFGR: %d\n",PHY);
}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	48000800 	.word	0x48000800
 8000b4c:	08007d1c 	.word	0x08007d1c

08000b50 <W5500_Init>:
* 输出    : 无
* 返回值  : 无
* 说明    : 在使用W5500之前，先对W5500初始化
*******************************************************************************/
void W5500_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
	uint8_t i=0;
 8000b56:	2300      	movs	r3, #0
 8000b58:	71fb      	strb	r3, [r7, #7]

	Write_W5500_1Byte(MR, RST);//软件复位W5500,置1有效,复位后自动清0
 8000b5a:	2180      	movs	r1, #128	; 0x80
 8000b5c:	2000      	movs	r0, #0
 8000b5e:	f7ff fdab 	bl	80006b8 <Write_W5500_1Byte>
	HAL_Delay(10);//延时10ms,自己定义该函数
 8000b62:	200a      	movs	r0, #10
 8000b64:	f001 f896 	bl	8001c94 <HAL_Delay>

	//设置网关(Gateway)的IP地址,Gateway_IP为4字节unsigned char数组,自己定义 
	//使用网关可以使通信突破子网的局限，通过网关可以访问到其它子网或进入Internet
	Write_W5500_nByte(GAR, Gateway_IP, 4);
 8000b68:	2204      	movs	r2, #4
 8000b6a:	492b      	ldr	r1, [pc, #172]	; (8000c18 <W5500_Init+0xc8>)
 8000b6c:	2001      	movs	r0, #1
 8000b6e:	f7ff fde9 	bl	8000744 <Write_W5500_nByte>
			
	//设置子网掩码(MASK)值,SUB_MASK为4字节unsigned char数组,自己定义
	//子网掩码用于子网运算
	Write_W5500_nByte(SUBR,Sub_Mask,4);		
 8000b72:	2204      	movs	r2, #4
 8000b74:	4929      	ldr	r1, [pc, #164]	; (8000c1c <W5500_Init+0xcc>)
 8000b76:	2005      	movs	r0, #5
 8000b78:	f7ff fde4 	bl	8000744 <Write_W5500_nByte>
	
	//设置物理地址,PHY_ADDR为6字节unsigned char数组,自己定义,用于唯一标识网络设备的物理地址值
	//该地址值需要到IEEE申请，按照OUI的规定，前3个字节为厂商代码，后三个字节为产品序号
	//如果自己定义物理地址，注意第一个字节必须为偶数
	Write_W5500_nByte(SHAR,Phy_Addr,6);		
 8000b7c:	2206      	movs	r2, #6
 8000b7e:	4928      	ldr	r1, [pc, #160]	; (8000c20 <W5500_Init+0xd0>)
 8000b80:	2009      	movs	r0, #9
 8000b82:	f7ff fddf 	bl	8000744 <Write_W5500_nByte>

	//设置本机的IP地址,IP_ADDR为4字节unsigned char数组,自己定义
	//注意，网关IP必须与本机IP属于同一个子网，否则本机将无法找到网关
	Write_W5500_nByte(SIPR,IP_Addr,4);		
 8000b86:	2204      	movs	r2, #4
 8000b88:	4926      	ldr	r1, [pc, #152]	; (8000c24 <W5500_Init+0xd4>)
 8000b8a:	200f      	movs	r0, #15
 8000b8c:	f7ff fdda 	bl	8000744 <Write_W5500_nByte>
	
	//设置发送缓冲区和接收缓冲区的大小，参考W5500数据手册
	Write_W5500_SOCK_1Byte(0,Sn_RXBUF_SIZE, 0x08);//Socket Rx memory size=8k
 8000b90:	2208      	movs	r2, #8
 8000b92:	211e      	movs	r1, #30
 8000b94:	2000      	movs	r0, #0
 8000b96:	f7ff fe05 	bl	80007a4 <Write_W5500_SOCK_1Byte>
	Write_W5500_SOCK_1Byte(0,Sn_TXBUF_SIZE, 0x08);//Socket Tx mempry size=8k
 8000b9a:	2208      	movs	r2, #8
 8000b9c:	211f      	movs	r1, #31
 8000b9e:	2000      	movs	r0, #0
 8000ba0:	f7ff fe00 	bl	80007a4 <Write_W5500_SOCK_1Byte>
	
	Write_W5500_SOCK_1Byte(1,Sn_RXBUF_SIZE, 0x02);//Socket Rx memory size=2k
 8000ba4:	2202      	movs	r2, #2
 8000ba6:	211e      	movs	r1, #30
 8000ba8:	2001      	movs	r0, #1
 8000baa:	f7ff fdfb 	bl	80007a4 <Write_W5500_SOCK_1Byte>
	Write_W5500_SOCK_1Byte(1,Sn_TXBUF_SIZE, 0x02);//Socket Tx mempry size=2k
 8000bae:	2202      	movs	r2, #2
 8000bb0:	211f      	movs	r1, #31
 8000bb2:	2001      	movs	r0, #1
 8000bb4:	f7ff fdf6 	bl	80007a4 <Write_W5500_SOCK_1Byte>
	for(i=2;i<8;i++)
 8000bb8:	2302      	movs	r3, #2
 8000bba:	71fb      	strb	r3, [r7, #7]
 8000bbc:	e00e      	b.n	8000bdc <W5500_Init+0x8c>
	{
		Write_W5500_SOCK_1Byte(i,Sn_RXBUF_SIZE, 0x01);//Socket Rx memory size=1k
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	211e      	movs	r1, #30
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff fded 	bl	80007a4 <Write_W5500_SOCK_1Byte>
		Write_W5500_SOCK_1Byte(i,Sn_TXBUF_SIZE, 0x01);//Socket Tx mempry size=1k
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	2201      	movs	r2, #1
 8000bce:	211f      	movs	r1, #31
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff fde7 	bl	80007a4 <Write_W5500_SOCK_1Byte>
	for(i=2;i<8;i++)
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	71fb      	strb	r3, [r7, #7]
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
 8000bde:	2b07      	cmp	r3, #7
 8000be0:	d9ed      	bls.n	8000bbe <W5500_Init+0x6e>
	}

	//设置重试时间，默认为2000(200ms) 
	//每一单位数值为100微秒,初始化时值设为2000(0x07D0),等于200毫秒
	Write_W5500_2Byte(RTR, 0x07d0);
 8000be2:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000be6:	2019      	movs	r0, #25
 8000be8:	f7ff fd89 	bl	80006fe <Write_W5500_2Byte>

	//设置重试次数，默认为8次 
	//如果重发的次数超过设定值,则产生超时中断(相关的端口中断寄存器中的Sn_IR 超时位(TIMEOUT)置“1”)
	Write_W5500_1Byte(RCR,8);
 8000bec:	2108      	movs	r1, #8
 8000bee:	201b      	movs	r0, #27
 8000bf0:	f7ff fd62 	bl	80006b8 <Write_W5500_1Byte>

	//启动中断，参考W5500数据手册确定自己需要的中断类型
	//IMR_CONFLICT是IP地址冲突异常中断,IMR_UNREACH是UDP通信时，地址无法到达的异常中断
	//其它是Socket事件中断，根据需要添加
	Write_W5500_1Byte(IMR,IM_IR7 | IM_IR6);
 8000bf4:	21c0      	movs	r1, #192	; 0xc0
 8000bf6:	2016      	movs	r0, #22
 8000bf8:	f7ff fd5e 	bl	80006b8 <Write_W5500_1Byte>
	Write_W5500_1Byte(SIMR,S0_IMR);
 8000bfc:	2101      	movs	r1, #1
 8000bfe:	2018      	movs	r0, #24
 8000c00:	f7ff fd5a 	bl	80006b8 <Write_W5500_1Byte>
	Write_W5500_SOCK_1Byte(0, Sn_IMR, IMR_SENDOK | IMR_TIMEOUT | IMR_RECV | IMR_DISCON | IMR_CON);
 8000c04:	221f      	movs	r2, #31
 8000c06:	212c      	movs	r1, #44	; 0x2c
 8000c08:	2000      	movs	r0, #0
 8000c0a:	f7ff fdcb 	bl	80007a4 <Write_W5500_SOCK_1Byte>

}
 8000c0e:	bf00      	nop
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	20000090 	.word	0x20000090
 8000c1c:	20000094 	.word	0x20000094
 8000c20:	20000098 	.word	0x20000098
 8000c24:	200000a0 	.word	0x200000a0

08000c28 <Detect_Gateway>:
* 输出    : 无
* 返回值  : 成功返回TRUE(0xFF),失败返回FALSE(0x00)
* 说明    : 无
*******************************************************************************/
unsigned char Detect_Gateway(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
	unsigned char ip_adde[4];
	ip_adde[0]=IP_Addr[0]+1;
 8000c2e:	4b58      	ldr	r3, [pc, #352]	; (8000d90 <Detect_Gateway+0x168>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	3301      	adds	r3, #1
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	703b      	strb	r3, [r7, #0]
	ip_adde[1]=IP_Addr[1]+1;
 8000c38:	4b55      	ldr	r3, [pc, #340]	; (8000d90 <Detect_Gateway+0x168>)
 8000c3a:	785b      	ldrb	r3, [r3, #1]
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	707b      	strb	r3, [r7, #1]
	ip_adde[2]=IP_Addr[2]+1;
 8000c42:	4b53      	ldr	r3, [pc, #332]	; (8000d90 <Detect_Gateway+0x168>)
 8000c44:	789b      	ldrb	r3, [r3, #2]
 8000c46:	3301      	adds	r3, #1
 8000c48:	b2db      	uxtb	r3, r3
 8000c4a:	70bb      	strb	r3, [r7, #2]
	ip_adde[3]=IP_Addr[3]+1;
 8000c4c:	4b50      	ldr	r3, [pc, #320]	; (8000d90 <Detect_Gateway+0x168>)
 8000c4e:	78db      	ldrb	r3, [r3, #3]
 8000c50:	3301      	adds	r3, #1
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	70fb      	strb	r3, [r7, #3]

	//检查网关及获取网关的物理地址
	Write_W5500_SOCK_4Byte(0,Sn_DIPR,ip_adde);//向目的地址寄存器写入与本机IP不同的IP值
 8000c56:	463b      	mov	r3, r7
 8000c58:	461a      	mov	r2, r3
 8000c5a:	210c      	movs	r1, #12
 8000c5c:	2000      	movs	r0, #0
 8000c5e:	f7ff fdfd 	bl	800085c <Write_W5500_SOCK_4Byte>
	Write_W5500_SOCK_1Byte(0,Sn_MR,MR_UDP);//设置socket为TCP模式
 8000c62:	2202      	movs	r2, #2
 8000c64:	2100      	movs	r1, #0
 8000c66:	2000      	movs	r0, #0
 8000c68:	f7ff fd9c 	bl	80007a4 <Write_W5500_SOCK_1Byte>
	Write_W5500_SOCK_1Byte(0,Sn_CR,OPEN);//打开Socket	
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	2101      	movs	r1, #1
 8000c70:	2000      	movs	r0, #0
 8000c72:	f7ff fd97 	bl	80007a4 <Write_W5500_SOCK_1Byte>
	HAL_Delay(5);//延时5ms
 8000c76:	2005      	movs	r0, #5
 8000c78:	f001 f80c 	bl	8001c94 <HAL_Delay>
	Write_W5500_SOCK_4Byte(1,Sn_DIPR,ip_adde);//向目的地址寄存器写入与本机IP不同的IP值
 8000c7c:	463b      	mov	r3, r7
 8000c7e:	461a      	mov	r2, r3
 8000c80:	210c      	movs	r1, #12
 8000c82:	2001      	movs	r0, #1
 8000c84:	f7ff fdea 	bl	800085c <Write_W5500_SOCK_4Byte>
	Write_W5500_SOCK_1Byte(1,Sn_MR,MR_UDP);//设置socket为TCP模式
 8000c88:	2202      	movs	r2, #2
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	2001      	movs	r0, #1
 8000c8e:	f7ff fd89 	bl	80007a4 <Write_W5500_SOCK_1Byte>
	Write_W5500_SOCK_1Byte(1,Sn_CR,OPEN);//打开Socket	
 8000c92:	2201      	movs	r2, #1
 8000c94:	2101      	movs	r1, #1
 8000c96:	2001      	movs	r0, #1
 8000c98:	f7ff fd84 	bl	80007a4 <Write_W5500_SOCK_1Byte>
	HAL_Delay(5);//延时5ms 	 	
 8000c9c:	2005      	movs	r0, #5
 8000c9e:	f000 fff9 	bl	8001c94 <HAL_Delay>
//	Write_W5500_SOCK_4Byte(2,Sn_DIPR,ip_adde);//向目的地址寄存器写入与本机IP不同的IP值
//	Write_W5500_SOCK_1Byte(2,Sn_MR,MR_UDP);//设置socket为TCP模式
//	Write_W5500_SOCK_1Byte(2,Sn_CR,OPEN);//打开Socket	
//	HAL_Delay(5);//延时5ms 
	//printf("Sn_SR %d\n",Read_W5500_SOCK_1Byte(0,Sn_SR));
	if(Read_W5500_SOCK_1Byte(0,Sn_SR) != SOCK_INIT)//如果socket打开失败
 8000ca2:	2103      	movs	r1, #3
 8000ca4:	2000      	movs	r0, #0
 8000ca6:	f7ff fe3f 	bl	8000928 <Read_W5500_SOCK_1Byte>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b13      	cmp	r3, #19
 8000cae:	d006      	beq.n	8000cbe <Detect_Gateway+0x96>
	{
		//printf("sock falied!\n");
		Write_W5500_SOCK_1Byte(0,Sn_CR,CLOSE);//打开不成功,关闭Socket
 8000cb0:	2210      	movs	r2, #16
 8000cb2:	2101      	movs	r1, #1
 8000cb4:	2000      	movs	r0, #0
 8000cb6:	f7ff fd75 	bl	80007a4 <Write_W5500_SOCK_1Byte>
		return FALSE;//返回FALSE(0x00)
 8000cba:	2300      	movs	r3, #0
 8000cbc:	e064      	b.n	8000d88 <Detect_Gateway+0x160>
	}
		if(Read_W5500_SOCK_1Byte(1,Sn_SR) != SOCK_INIT)//如果socket打开失败
 8000cbe:	2103      	movs	r1, #3
 8000cc0:	2001      	movs	r0, #1
 8000cc2:	f7ff fe31 	bl	8000928 <Read_W5500_SOCK_1Byte>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b13      	cmp	r3, #19
 8000cca:	d006      	beq.n	8000cda <Detect_Gateway+0xb2>
	{
		//printf("sock falied!\n");
		Write_W5500_SOCK_1Byte(1,Sn_CR,CLOSE);//打开不成功,关闭Socket
 8000ccc:	2210      	movs	r2, #16
 8000cce:	2101      	movs	r1, #1
 8000cd0:	2001      	movs	r0, #1
 8000cd2:	f7ff fd67 	bl	80007a4 <Write_W5500_SOCK_1Byte>
		return FALSE;//返回FALSE(0x00)
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	e056      	b.n	8000d88 <Detect_Gateway+0x160>
//		//printf("sock falied!\n");
//		Write_W5500_SOCK_1Byte(2,Sn_CR,CLOSE);//打开不成功,关闭Socket
//		return FALSE;//返回FALSE(0x00)
//	}

	Write_W5500_SOCK_1Byte(0,Sn_CR,CONNECT);//设置Socket为Connect模式	
 8000cda:	2204      	movs	r2, #4
 8000cdc:	2101      	movs	r1, #1
 8000cde:	2000      	movs	r0, #0
 8000ce0:	f7ff fd60 	bl	80007a4 <Write_W5500_SOCK_1Byte>
	Write_W5500_SOCK_1Byte(1,Sn_CR,CONNECT);//设置Socket为Connect模式
 8000ce4:	2204      	movs	r2, #4
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	2001      	movs	r0, #1
 8000cea:	f7ff fd5b 	bl	80007a4 <Write_W5500_SOCK_1Byte>
//	Write_W5500_SOCK_1Byte(2,Sn_CR,CONNECT);	

	do
	{
		uint8_t j=0;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	71fb      	strb	r3, [r7, #7]
		uint8_t m=0;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	71bb      	strb	r3, [r7, #6]
//		uint8_t k=0;
		j=Read_W5500_SOCK_1Byte(0,Sn_IR);//读取Socket0中断标志寄存器
 8000cf6:	2102      	movs	r1, #2
 8000cf8:	2000      	movs	r0, #0
 8000cfa:	f7ff fe15 	bl	8000928 <Read_W5500_SOCK_1Byte>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	71fb      	strb	r3, [r7, #7]
		m=Read_W5500_SOCK_1Byte(1,Sn_IR);//读取Socket0中断标志寄存器
 8000d02:	2102      	movs	r1, #2
 8000d04:	2001      	movs	r0, #1
 8000d06:	f7ff fe0f 	bl	8000928 <Read_W5500_SOCK_1Byte>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	71bb      	strb	r3, [r7, #6]
//		k=Read_W5500_SOCK_1Byte(2,Sn_IR);
		if(j!=0)
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d005      	beq.n	8000d20 <Detect_Gateway+0xf8>
		Write_W5500_SOCK_1Byte(0,Sn_IR,j);
 8000d14:	79fb      	ldrb	r3, [r7, #7]
 8000d16:	461a      	mov	r2, r3
 8000d18:	2102      	movs	r1, #2
 8000d1a:	2000      	movs	r0, #0
 8000d1c:	f7ff fd42 	bl	80007a4 <Write_W5500_SOCK_1Byte>
		HAL_Delay(5);//延时5ms 
 8000d20:	2005      	movs	r0, #5
 8000d22:	f000 ffb7 	bl	8001c94 <HAL_Delay>
		if(m!=0)
 8000d26:	79bb      	ldrb	r3, [r7, #6]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d005      	beq.n	8000d38 <Detect_Gateway+0x110>
		Write_W5500_SOCK_1Byte(1,Sn_IR,m);
 8000d2c:	79bb      	ldrb	r3, [r7, #6]
 8000d2e:	461a      	mov	r2, r3
 8000d30:	2102      	movs	r1, #2
 8000d32:	2001      	movs	r0, #1
 8000d34:	f7ff fd36 	bl	80007a4 <Write_W5500_SOCK_1Byte>
		HAL_Delay(5);//延时5ms 
 8000d38:	2005      	movs	r0, #5
 8000d3a:	f000 ffab 	bl	8001c94 <HAL_Delay>
//		Write_W5500_SOCK_1Byte(2,Sn_IR,k);
//		HAL_Delay(5);//延时5ms 
		if(((j&IR_TIMEOUT) == IR_TIMEOUT)||((m&IR_TIMEOUT) == IR_TIMEOUT))
 8000d3e:	79fb      	ldrb	r3, [r7, #7]
 8000d40:	f003 0308 	and.w	r3, r3, #8
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d104      	bne.n	8000d52 <Detect_Gateway+0x12a>
 8000d48:	79bb      	ldrb	r3, [r7, #6]
 8000d4a:	f003 0308 	and.w	r3, r3, #8
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <Detect_Gateway+0x12e>
		{
			return FALSE;	
 8000d52:	2300      	movs	r3, #0
 8000d54:	e018      	b.n	8000d88 <Detect_Gateway+0x160>
		}
		else if((Read_W5500_SOCK_1Byte(0,Sn_DHAR) != 0xff)||(Read_W5500_SOCK_1Byte(1,Sn_DHAR) != 0xff))
 8000d56:	2106      	movs	r1, #6
 8000d58:	2000      	movs	r0, #0
 8000d5a:	f7ff fde5 	bl	8000928 <Read_W5500_SOCK_1Byte>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2bff      	cmp	r3, #255	; 0xff
 8000d62:	d106      	bne.n	8000d72 <Detect_Gateway+0x14a>
 8000d64:	2106      	movs	r1, #6
 8000d66:	2001      	movs	r0, #1
 8000d68:	f7ff fdde 	bl	8000928 <Read_W5500_SOCK_1Byte>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2bff      	cmp	r3, #255	; 0xff
 8000d70:	d0bd      	beq.n	8000cee <Detect_Gateway+0xc6>
		{
			Write_W5500_SOCK_1Byte(0,Sn_CR,CLOSE);//关闭Socket
 8000d72:	2210      	movs	r2, #16
 8000d74:	2101      	movs	r1, #1
 8000d76:	2000      	movs	r0, #0
 8000d78:	f7ff fd14 	bl	80007a4 <Write_W5500_SOCK_1Byte>
			Write_W5500_SOCK_1Byte(1,Sn_CR,CLOSE);//关闭Socket
 8000d7c:	2210      	movs	r2, #16
 8000d7e:	2101      	movs	r1, #1
 8000d80:	2001      	movs	r0, #1
 8000d82:	f7ff fd0f 	bl	80007a4 <Write_W5500_SOCK_1Byte>
//			Write_W5500_SOCK_1Byte(2,Sn_CR,CLOSE);//关闭Socket
			return TRUE;							
 8000d86:	2301      	movs	r3, #1
		}
	}while(1);
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	200000a0 	.word	0x200000a0

08000d94 <Socket_Init>:
* 输出    : 无
* 返回值  : 无
* 说明    : 无
*******************************************************************************/
void Socket_Init(SOCKET s)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	71fb      	strb	r3, [r7, #7]
	//设置分片长度，参考W5500数据手册，该值可以不修改	
	Write_W5500_SOCK_2Byte(s, Sn_MSSR, 1460);//最大分片字节数=1460(0x5b4)
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8000da4:	2112      	movs	r1, #18
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff fd2a 	bl	8000800 <Write_W5500_SOCK_2Byte>
//	Write_W5500_SOCK_2Byte(1, Sn_MSSR, 1460);//最大分片字节数=1460(0x5b4)
//	Write_W5500_SOCK_2Byte(2, Sn_MSSR, 1460);//最大分片字节数=1460(0x5b4)
	//设置指定端口
	switch(s)
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	2b07      	cmp	r3, #7
 8000db0:	d836      	bhi.n	8000e20 <Socket_Init+0x8c>
 8000db2:	a201      	add	r2, pc, #4	; (adr r2, 8000db8 <Socket_Init+0x24>)
 8000db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000db8:	08000dd9 	.word	0x08000dd9
 8000dbc:	08000e21 	.word	0x08000e21
 8000dc0:	08000e21 	.word	0x08000e21
 8000dc4:	08000e21 	.word	0x08000e21
 8000dc8:	08000e21 	.word	0x08000e21
 8000dcc:	08000e21 	.word	0x08000e21
 8000dd0:	08000e21 	.word	0x08000e21
 8000dd4:	08000e21 	.word	0x08000e21
	{
		case 0:
			//设置端口0的端口号
			Write_W5500_SOCK_2Byte(0, Sn_PORT, S0_Port[0]*256+S0_Port[1]);		
 8000dd8:	4b14      	ldr	r3, [pc, #80]	; (8000e2c <Socket_Init+0x98>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	b29b      	uxth	r3, r3
 8000dde:	021b      	lsls	r3, r3, #8
 8000de0:	b29a      	uxth	r2, r3
 8000de2:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <Socket_Init+0x98>)
 8000de4:	785b      	ldrb	r3, [r3, #1]
 8000de6:	b29b      	uxth	r3, r3
 8000de8:	4413      	add	r3, r2
 8000dea:	b29b      	uxth	r3, r3
 8000dec:	461a      	mov	r2, r3
 8000dee:	2104      	movs	r1, #4
 8000df0:	2000      	movs	r0, #0
 8000df2:	f7ff fd05 	bl	8000800 <Write_W5500_SOCK_2Byte>
			Write_W5500_SOCK_4Byte(0, Sn_DIPR, S0_DIP);//设置目的主机IP
 8000df6:	4a0e      	ldr	r2, [pc, #56]	; (8000e30 <Socket_Init+0x9c>)
 8000df8:	210c      	movs	r1, #12
 8000dfa:	2000      	movs	r0, #0
 8000dfc:	f7ff fd2e 	bl	800085c <Write_W5500_SOCK_4Byte>
			Write_W5500_SOCK_2Byte(0, Sn_DPORTR, S0_DPort[0]*256+S0_DPort[1]);//设置目的主机端口号			
 8000e00:	4b0c      	ldr	r3, [pc, #48]	; (8000e34 <Socket_Init+0xa0>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	b29b      	uxth	r3, r3
 8000e06:	021b      	lsls	r3, r3, #8
 8000e08:	b29a      	uxth	r2, r3
 8000e0a:	4b0a      	ldr	r3, [pc, #40]	; (8000e34 <Socket_Init+0xa0>)
 8000e0c:	785b      	ldrb	r3, [r3, #1]
 8000e0e:	b29b      	uxth	r3, r3
 8000e10:	4413      	add	r3, r2
 8000e12:	b29b      	uxth	r3, r3
 8000e14:	461a      	mov	r2, r3
 8000e16:	2110      	movs	r1, #16
 8000e18:	2000      	movs	r0, #0
 8000e1a:	f7ff fcf1 	bl	8000800 <Write_W5500_SOCK_2Byte>
			break;
 8000e1e:	e000      	b.n	8000e22 <Socket_Init+0x8e>

		case 7:
			break;

		default:
			break;
 8000e20:	bf00      	nop
	}
}
 8000e22:	bf00      	nop
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	200000a4 	.word	0x200000a4
 8000e30:	200000a8 	.word	0x200000a8
 8000e34:	200000ac 	.word	0x200000ac

08000e38 <Socket_Connect>:
* 说明    : 当本机Socket工作在客户端模式时,引用该程序,与远程服务器建立连接
*			如果启动连接后出现超时中断，则与服务器连接失败,需要重新调用该程序连接
*			该程序每调用一次,就与服务器产生一次连接
*******************************************************************************/
unsigned char Socket_Connect(SOCKET s)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	71fb      	strb	r3, [r7, #7]
	Write_W5500_SOCK_1Byte(s,Sn_MR,MR_TCP);//设置socket为TCP模式
 8000e42:	79fb      	ldrb	r3, [r7, #7]
 8000e44:	2201      	movs	r2, #1
 8000e46:	2100      	movs	r1, #0
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f7ff fcab 	bl	80007a4 <Write_W5500_SOCK_1Byte>
	Write_W5500_SOCK_1Byte(s,Sn_CR,OPEN);//打开Socket
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	2201      	movs	r2, #1
 8000e52:	2101      	movs	r1, #1
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff fca5 	bl	80007a4 <Write_W5500_SOCK_1Byte>
	HAL_Delay(5);//延时5ms
 8000e5a:	2005      	movs	r0, #5
 8000e5c:	f000 ff1a 	bl	8001c94 <HAL_Delay>
	if(Read_W5500_SOCK_1Byte(s,Sn_SR)!=SOCK_INIT)//如果socket打开失败
 8000e60:	79fb      	ldrb	r3, [r7, #7]
 8000e62:	2103      	movs	r1, #3
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff fd5f 	bl	8000928 <Read_W5500_SOCK_1Byte>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b13      	cmp	r3, #19
 8000e6e:	d007      	beq.n	8000e80 <Socket_Connect+0x48>
	{
		Write_W5500_SOCK_1Byte(s,Sn_CR,CLOSE);//打开不成功,关闭Socket
 8000e70:	79fb      	ldrb	r3, [r7, #7]
 8000e72:	2210      	movs	r2, #16
 8000e74:	2101      	movs	r1, #1
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff fc94 	bl	80007a4 <Write_W5500_SOCK_1Byte>
		return FALSE;//返回FALSE(0x00)
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	e006      	b.n	8000e8e <Socket_Connect+0x56>
	}
	Write_W5500_SOCK_1Byte(s,Sn_CR,CONNECT);//设置Socket为Connect模式
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	2204      	movs	r2, #4
 8000e84:	2101      	movs	r1, #1
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff fc8c 	bl	80007a4 <Write_W5500_SOCK_1Byte>
	return TRUE;//返回TRUE,设置成功
 8000e8c:	2301      	movs	r3, #1
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <Socket_Listen>:
* 返回值  : 成功返回TRUE(0xFF),失败返回FALSE(0x00)
* 说明    : 当本机Socket工作在服务器模式时,引用该程序,等等远程主机的连接
*			该程序只调用一次,就使W5500设置为服务器模式
*******************************************************************************/
unsigned char Socket_Listen(SOCKET s)
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b082      	sub	sp, #8
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	71fb      	strb	r3, [r7, #7]
	Write_W5500_SOCK_1Byte(s,Sn_MR,MR_TCP);//设置socket为TCP模式 
 8000ea0:	79fb      	ldrb	r3, [r7, #7]
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f7ff fc7c 	bl	80007a4 <Write_W5500_SOCK_1Byte>
	Write_W5500_SOCK_1Byte(s,Sn_CR,OPEN);//打开Socket	
 8000eac:	79fb      	ldrb	r3, [r7, #7]
 8000eae:	2201      	movs	r2, #1
 8000eb0:	2101      	movs	r1, #1
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f7ff fc76 	bl	80007a4 <Write_W5500_SOCK_1Byte>
	HAL_Delay(5);//延时5ms
 8000eb8:	2005      	movs	r0, #5
 8000eba:	f000 feeb 	bl	8001c94 <HAL_Delay>
	if(Read_W5500_SOCK_1Byte(s,Sn_SR)!=SOCK_INIT)//如果socket打开失败
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	2103      	movs	r1, #3
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f7ff fd30 	bl	8000928 <Read_W5500_SOCK_1Byte>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b13      	cmp	r3, #19
 8000ecc:	d007      	beq.n	8000ede <Socket_Listen+0x48>
	{
		Write_W5500_SOCK_1Byte(s,Sn_CR,CLOSE);//打开不成功,关闭Socket
 8000ece:	79fb      	ldrb	r3, [r7, #7]
 8000ed0:	2210      	movs	r2, #16
 8000ed2:	2101      	movs	r1, #1
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff fc65 	bl	80007a4 <Write_W5500_SOCK_1Byte>
		return FALSE;//返回FALSE(0x00)
 8000eda:	2300      	movs	r3, #0
 8000edc:	e019      	b.n	8000f12 <Socket_Listen+0x7c>
	}	
	Write_W5500_SOCK_1Byte(s,Sn_CR,LISTEN);//设置Socket为侦听模式	
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	2202      	movs	r2, #2
 8000ee2:	2101      	movs	r1, #1
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff fc5d 	bl	80007a4 <Write_W5500_SOCK_1Byte>
	HAL_Delay(5);//延时5ms
 8000eea:	2005      	movs	r0, #5
 8000eec:	f000 fed2 	bl	8001c94 <HAL_Delay>
	if(Read_W5500_SOCK_1Byte(s,Sn_SR)!=SOCK_LISTEN)//如果socket设置失败
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	2103      	movs	r1, #3
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff fd17 	bl	8000928 <Read_W5500_SOCK_1Byte>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b14      	cmp	r3, #20
 8000efe:	d007      	beq.n	8000f10 <Socket_Listen+0x7a>
	{
		Write_W5500_SOCK_1Byte(s,Sn_CR,CLOSE);//设置不成功,关闭Socket
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	2210      	movs	r2, #16
 8000f04:	2101      	movs	r1, #1
 8000f06:	4618      	mov	r0, r3
 8000f08:	f7ff fc4c 	bl	80007a4 <Write_W5500_SOCK_1Byte>
		return FALSE;//返回FALSE(0x00)
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	e000      	b.n	8000f12 <Socket_Listen+0x7c>
	}

	return TRUE;
 8000f10:	2301      	movs	r3, #1

	//至此完成了Socket的打开和设置侦听工作,至于远程客户端是否与它建立连接,则需要等待Socket中断，
	//以判断Socket的连接是否成功。参考W5500数据手册的Socket中断状态
	//在服务器侦听模式不需要设置目的IP和目的端口号
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <Socket_UDP>:
* 返回值  : 成功返回TRUE(0xFF),失败返回FALSE(0x00)
* 说明    : 如果Socket工作在UDP模式,引用该程序,在UDP模式下,Socket通信不需要建立连接
*			该程序只调用一次，就使W5500设置为UDP模式
*******************************************************************************/
unsigned char Socket_UDP(SOCKET s)
{
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b082      	sub	sp, #8
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	4603      	mov	r3, r0
 8000f22:	71fb      	strb	r3, [r7, #7]
	Write_W5500_SOCK_1Byte(s,Sn_MR,MR_UDP);//设置Socket为UDP模式*/
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	2202      	movs	r2, #2
 8000f28:	2100      	movs	r1, #0
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f7ff fc3a 	bl	80007a4 <Write_W5500_SOCK_1Byte>
	Write_W5500_SOCK_1Byte(s,Sn_CR,OPEN);//打开Socket*/
 8000f30:	79fb      	ldrb	r3, [r7, #7]
 8000f32:	2201      	movs	r2, #1
 8000f34:	2101      	movs	r1, #1
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff fc34 	bl	80007a4 <Write_W5500_SOCK_1Byte>

	
	HAL_Delay(5);//延时5ms
 8000f3c:	2005      	movs	r0, #5
 8000f3e:	f000 fea9 	bl	8001c94 <HAL_Delay>

	if(Read_W5500_SOCK_1Byte(s,Sn_SR)!=SOCK_UDP)//如果Socket打开失败
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	2103      	movs	r1, #3
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff fcee 	bl	8000928 <Read_W5500_SOCK_1Byte>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b22      	cmp	r3, #34	; 0x22
 8000f50:	d007      	beq.n	8000f62 <Socket_UDP+0x48>
	{
		Write_W5500_SOCK_1Byte(s,Sn_CR,CLOSE);//打开不成功,关闭Socket
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	2210      	movs	r2, #16
 8000f56:	2101      	movs	r1, #1
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff fc23 	bl	80007a4 <Write_W5500_SOCK_1Byte>
		//printf("Socket_UDP failed!\n");
		return FALSE;//返回FALSE(0x00)
 8000f5e:	2300      	movs	r3, #0
 8000f60:	e000      	b.n	8000f64 <Socket_UDP+0x4a>
	}
	else
	{
		//printf("UDP Success!\n");
		return TRUE;
 8000f62:	2301      	movs	r3, #1
	}

	//至此完成了Socket的打开和UDP模式设置,在这种模式下它不需要与远程主机建立连接
	//因为Socket不需要建立连接,所以在发送数据前都可以设置目的主机IP和目的Socket的端口号
	//如果目的主机IP和目的Socket的端口号是固定的,在运行过程中没有改变,那么也可以在这里设置
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <W5500_Initialization>:
//		Write_W5500_SOCK_4Byte(2, Sn_DIPR, S2_DIP);//设置目的主机IP
//		Write_W5500_SOCK_2Byte(2, Sn_DPORTR, S2_DPort[0]*256+S2_DPort[1]);//设置目的主机端口号		
//}

void W5500_Initialization(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
	W5500_Init();	
 8000f70:	f7ff fdee 	bl	8000b50 <W5500_Init>
	Detect_Gateway();	
 8000f74:	f7ff fe58 	bl	8000c28 <Detect_Gateway>
	Socket_Init(0);
 8000f78:	2000      	movs	r0, #0
 8000f7a:	f7ff ff0b 	bl	8000d94 <Socket_Init>
	//Socket_Init(1);
//	Socket_Init(2);
	//Dport_Set();
}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
	...

08000f84 <Load_Net_Parameters>:


void Load_Net_Parameters(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
	Gateway_IP[0] = 192;
 8000f88:	4b2a      	ldr	r3, [pc, #168]	; (8001034 <Load_Net_Parameters+0xb0>)
 8000f8a:	22c0      	movs	r2, #192	; 0xc0
 8000f8c:	701a      	strb	r2, [r3, #0]
	Gateway_IP[1] = 168;
 8000f8e:	4b29      	ldr	r3, [pc, #164]	; (8001034 <Load_Net_Parameters+0xb0>)
 8000f90:	22a8      	movs	r2, #168	; 0xa8
 8000f92:	705a      	strb	r2, [r3, #1]
	Gateway_IP[2] = 100;
 8000f94:	4b27      	ldr	r3, [pc, #156]	; (8001034 <Load_Net_Parameters+0xb0>)
 8000f96:	2264      	movs	r2, #100	; 0x64
 8000f98:	709a      	strb	r2, [r3, #2]
	Gateway_IP[3] = 1;
 8000f9a:	4b26      	ldr	r3, [pc, #152]	; (8001034 <Load_Net_Parameters+0xb0>)
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	70da      	strb	r2, [r3, #3]

	Sub_Mask[0]=255;
 8000fa0:	4b25      	ldr	r3, [pc, #148]	; (8001038 <Load_Net_Parameters+0xb4>)
 8000fa2:	22ff      	movs	r2, #255	; 0xff
 8000fa4:	701a      	strb	r2, [r3, #0]
	Sub_Mask[1]=255;
 8000fa6:	4b24      	ldr	r3, [pc, #144]	; (8001038 <Load_Net_Parameters+0xb4>)
 8000fa8:	22ff      	movs	r2, #255	; 0xff
 8000faa:	705a      	strb	r2, [r3, #1]
	Sub_Mask[2]=255;
 8000fac:	4b22      	ldr	r3, [pc, #136]	; (8001038 <Load_Net_Parameters+0xb4>)
 8000fae:	22ff      	movs	r2, #255	; 0xff
 8000fb0:	709a      	strb	r2, [r3, #2]
	Sub_Mask[3]=0;
 8000fb2:	4b21      	ldr	r3, [pc, #132]	; (8001038 <Load_Net_Parameters+0xb4>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	70da      	strb	r2, [r3, #3]

	Phy_Addr[0]=0x0c;
 8000fb8:	4b20      	ldr	r3, [pc, #128]	; (800103c <Load_Net_Parameters+0xb8>)
 8000fba:	220c      	movs	r2, #12
 8000fbc:	701a      	strb	r2, [r3, #0]
	Phy_Addr[1]=0x29;
 8000fbe:	4b1f      	ldr	r3, [pc, #124]	; (800103c <Load_Net_Parameters+0xb8>)
 8000fc0:	2229      	movs	r2, #41	; 0x29
 8000fc2:	705a      	strb	r2, [r3, #1]
	Phy_Addr[2]=0xab;
 8000fc4:	4b1d      	ldr	r3, [pc, #116]	; (800103c <Load_Net_Parameters+0xb8>)
 8000fc6:	22ab      	movs	r2, #171	; 0xab
 8000fc8:	709a      	strb	r2, [r3, #2]
	Phy_Addr[3]=0x7c;
 8000fca:	4b1c      	ldr	r3, [pc, #112]	; (800103c <Load_Net_Parameters+0xb8>)
 8000fcc:	227c      	movs	r2, #124	; 0x7c
 8000fce:	70da      	strb	r2, [r3, #3]
	Phy_Addr[4]=0x00;
 8000fd0:	4b1a      	ldr	r3, [pc, #104]	; (800103c <Load_Net_Parameters+0xb8>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	711a      	strb	r2, [r3, #4]
	Phy_Addr[5]=0x05;
 8000fd6:	4b19      	ldr	r3, [pc, #100]	; (800103c <Load_Net_Parameters+0xb8>)
 8000fd8:	2205      	movs	r2, #5
 8000fda:	715a      	strb	r2, [r3, #5]

	IP_Addr[0]=192;
 8000fdc:	4b18      	ldr	r3, [pc, #96]	; (8001040 <Load_Net_Parameters+0xbc>)
 8000fde:	22c0      	movs	r2, #192	; 0xc0
 8000fe0:	701a      	strb	r2, [r3, #0]
	IP_Addr[1]=168;
 8000fe2:	4b17      	ldr	r3, [pc, #92]	; (8001040 <Load_Net_Parameters+0xbc>)
 8000fe4:	22a8      	movs	r2, #168	; 0xa8
 8000fe6:	705a      	strb	r2, [r3, #1]
	IP_Addr[2]=100;
 8000fe8:	4b15      	ldr	r3, [pc, #84]	; (8001040 <Load_Net_Parameters+0xbc>)
 8000fea:	2264      	movs	r2, #100	; 0x64
 8000fec:	709a      	strb	r2, [r3, #2]
	IP_Addr[3]=10;
 8000fee:	4b14      	ldr	r3, [pc, #80]	; (8001040 <Load_Net_Parameters+0xbc>)
 8000ff0:	220a      	movs	r2, #10
 8000ff2:	70da      	strb	r2, [r3, #3]

	S0_Port[0] = 0x13;//5000 
 8000ff4:	4b13      	ldr	r3, [pc, #76]	; (8001044 <Load_Net_Parameters+0xc0>)
 8000ff6:	2213      	movs	r2, #19
 8000ff8:	701a      	strb	r2, [r3, #0]
	S0_Port[1] = 0x88;
 8000ffa:	4b12      	ldr	r3, [pc, #72]	; (8001044 <Load_Net_Parameters+0xc0>)
 8000ffc:	2288      	movs	r2, #136	; 0x88
 8000ffe:	705a      	strb	r2, [r3, #1]

	S0_DIP[0]=192;
 8001000:	4b11      	ldr	r3, [pc, #68]	; (8001048 <Load_Net_Parameters+0xc4>)
 8001002:	22c0      	movs	r2, #192	; 0xc0
 8001004:	701a      	strb	r2, [r3, #0]
	S0_DIP[1]=168;
 8001006:	4b10      	ldr	r3, [pc, #64]	; (8001048 <Load_Net_Parameters+0xc4>)
 8001008:	22a8      	movs	r2, #168	; 0xa8
 800100a:	705a      	strb	r2, [r3, #1]
	S0_DIP[2]=100;
 800100c:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <Load_Net_Parameters+0xc4>)
 800100e:	2264      	movs	r2, #100	; 0x64
 8001010:	709a      	strb	r2, [r3, #2]
	S0_DIP[3]=7;
 8001012:	4b0d      	ldr	r3, [pc, #52]	; (8001048 <Load_Net_Parameters+0xc4>)
 8001014:	2207      	movs	r2, #7
 8001016:	70da      	strb	r2, [r3, #3]

	S0_DPort[0] = 0x22;//8899
 8001018:	4b0c      	ldr	r3, [pc, #48]	; (800104c <Load_Net_Parameters+0xc8>)
 800101a:	2222      	movs	r2, #34	; 0x22
 800101c:	701a      	strb	r2, [r3, #0]
	S0_DPort[1] = 0xC3;
 800101e:	4b0b      	ldr	r3, [pc, #44]	; (800104c <Load_Net_Parameters+0xc8>)
 8001020:	22c3      	movs	r2, #195	; 0xc3
 8001022:	705a      	strb	r2, [r3, #1]
//	UDP_DIPR[3] = 10;
//
//	UDP_DPORT[0] = 0x17;
//	UDP_DPORT[1] = 0x70;

	S0_Mode=UDP_MODE;
 8001024:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <Load_Net_Parameters+0xcc>)
 8001026:	2202      	movs	r2, #2
 8001028:	701a      	strb	r2, [r3, #0]
}
 800102a:	bf00      	nop
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	20000090 	.word	0x20000090
 8001038:	20000094 	.word	0x20000094
 800103c:	20000098 	.word	0x20000098
 8001040:	200000a0 	.word	0x200000a0
 8001044:	200000a4 	.word	0x200000a4
 8001048:	200000a8 	.word	0x200000a8
 800104c:	200000ac 	.word	0x200000ac
 8001050:	20000000 	.word	0x20000000

08001054 <W5500_Socket_Set>:
	Tx_Buffer[size-8] = 0xFF;
	Write_SOCK_Data_Buffer(s, Tx_Buffer, size-7);
}

void W5500_Socket_Set(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
	if(S0_State==0)//???ú03?ê??ˉ????
 8001058:	4b20      	ldr	r3, [pc, #128]	; (80010dc <W5500_Socket_Set+0x88>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d133      	bne.n	80010c8 <W5500_Socket_Set+0x74>
	{
		if(S0_Mode==TCP_SERVER)//TCP·t???÷?￡ê? 
 8001060:	4b1f      	ldr	r3, [pc, #124]	; (80010e0 <W5500_Socket_Set+0x8c>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d10d      	bne.n	8001084 <W5500_Socket_Set+0x30>
		{
			if(Socket_Listen(0)==TRUE)
 8001068:	2000      	movs	r0, #0
 800106a:	f7ff ff14 	bl	8000e96 <Socket_Listen>
 800106e:	4603      	mov	r3, r0
 8001070:	2b01      	cmp	r3, #1
 8001072:	d103      	bne.n	800107c <W5500_Socket_Set+0x28>
				S0_State=S_INIT;
 8001074:	4b19      	ldr	r3, [pc, #100]	; (80010dc <W5500_Socket_Set+0x88>)
 8001076:	2201      	movs	r2, #1
 8001078:	701a      	strb	r2, [r3, #0]
 800107a:	e025      	b.n	80010c8 <W5500_Socket_Set+0x74>
			else
			{
				//DEBUG_PRINT("ERROR1\n");
				S0_State=0;
 800107c:	4b17      	ldr	r3, [pc, #92]	; (80010dc <W5500_Socket_Set+0x88>)
 800107e:	2200      	movs	r2, #0
 8001080:	701a      	strb	r2, [r3, #0]
 8001082:	e021      	b.n	80010c8 <W5500_Socket_Set+0x74>
			}
		}
		else if(S0_Mode==TCP_CLIENT)//TCP?í?§???￡ê? 
 8001084:	4b16      	ldr	r3, [pc, #88]	; (80010e0 <W5500_Socket_Set+0x8c>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	2b01      	cmp	r3, #1
 800108a:	d10d      	bne.n	80010a8 <W5500_Socket_Set+0x54>
		{
			if(Socket_Connect(0)==TRUE)
 800108c:	2000      	movs	r0, #0
 800108e:	f7ff fed3 	bl	8000e38 <Socket_Connect>
 8001092:	4603      	mov	r3, r0
 8001094:	2b01      	cmp	r3, #1
 8001096:	d103      	bne.n	80010a0 <W5500_Socket_Set+0x4c>
				S0_State=S_INIT;
 8001098:	4b10      	ldr	r3, [pc, #64]	; (80010dc <W5500_Socket_Set+0x88>)
 800109a:	2201      	movs	r2, #1
 800109c:	701a      	strb	r2, [r3, #0]
 800109e:	e013      	b.n	80010c8 <W5500_Socket_Set+0x74>
			else
			{
				//DEBUG_PRINT("ERROR2\n");
				S0_State=0;
 80010a0:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <W5500_Socket_Set+0x88>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	701a      	strb	r2, [r3, #0]
 80010a6:	e00f      	b.n	80010c8 <W5500_Socket_Set+0x74>
			}
		}
		else//UDP?￡ê? 
		{
			if(Socket_UDP(0)==TRUE)
 80010a8:	2000      	movs	r0, #0
 80010aa:	f7ff ff36 	bl	8000f1a <Socket_UDP>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d106      	bne.n	80010c2 <W5500_Socket_Set+0x6e>
			{
				S0_State=S_INIT|S_CONN;
 80010b4:	4b09      	ldr	r3, [pc, #36]	; (80010dc <W5500_Socket_Set+0x88>)
 80010b6:	2203      	movs	r2, #3
 80010b8:	701a      	strb	r2, [r3, #0]
				printf("socket open success!\r\n");
 80010ba:	480a      	ldr	r0, [pc, #40]	; (80010e4 <W5500_Socket_Set+0x90>)
 80010bc:	f005 fea0 	bl	8006e00 <puts>
 80010c0:	e002      	b.n	80010c8 <W5500_Socket_Set+0x74>
				//DEBUG_PRINT("Socket_UDP Success!\n");
			}
			else
			{
				//DEBUG_PRINT("ERROR3\n");
				S0_State=0;
 80010c2:	4b06      	ldr	r3, [pc, #24]	; (80010dc <W5500_Socket_Set+0x88>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	Write_W5500_1Byte(PHYCFGR,0x4a);
 80010c8:	214a      	movs	r1, #74	; 0x4a
 80010ca:	202e      	movs	r0, #46	; 0x2e
 80010cc:	f7ff faf4 	bl	80006b8 <Write_W5500_1Byte>
	Write_W5500_1Byte(PHYCFGR,0xca);
 80010d0:	21ca      	movs	r1, #202	; 0xca
 80010d2:	202e      	movs	r0, #46	; 0x2e
 80010d4:	f7ff faf0 	bl	80006b8 <Write_W5500_1Byte>
	//uint8_t PHY=Read_W5500_1Byte(PHYCFGR);
	//DEBUG_PRINT("PHYCFGR: %x\n",PHY);
}
 80010d8:	bf00      	nop
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	200000ae 	.word	0x200000ae
 80010e0:	20000000 	.word	0x20000000
 80010e4:	08007d88 	.word	0x08007d88

080010e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80010ee:	4b10      	ldr	r3, [pc, #64]	; (8001130 <MX_DMA_Init+0x48>)
 80010f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010f2:	4a0f      	ldr	r2, [pc, #60]	; (8001130 <MX_DMA_Init+0x48>)
 80010f4:	f043 0302 	orr.w	r3, r3, #2
 80010f8:	6493      	str	r3, [r2, #72]	; 0x48
 80010fa:	4b0d      	ldr	r3, [pc, #52]	; (8001130 <MX_DMA_Init+0x48>)
 80010fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010fe:	f003 0302 	and.w	r3, r3, #2
 8001102:	607b      	str	r3, [r7, #4]
 8001104:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 8001106:	2200      	movs	r2, #0
 8001108:	2100      	movs	r1, #0
 800110a:	203a      	movs	r0, #58	; 0x3a
 800110c:	f000 fec1 	bl	8001e92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8001110:	203a      	movs	r0, #58	; 0x3a
 8001112:	f000 feda 	bl	8001eca <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 8001116:	2200      	movs	r2, #0
 8001118:	2100      	movs	r1, #0
 800111a:	203c      	movs	r0, #60	; 0x3c
 800111c:	f000 feb9 	bl	8001e92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8001120:	203c      	movs	r0, #60	; 0x3c
 8001122:	f000 fed2 	bl	8001eca <HAL_NVIC_EnableIRQ>

}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40021000 	.word	0x40021000

08001134 <MX_GPIO_Init>:
        * EXTI
     PB6   ------> USART1_TX
     PB7   ------> USART1_RX
*/
void MX_GPIO_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b08a      	sub	sp, #40	; 0x28
 8001138:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113a:	f107 0314 	add.w	r3, r7, #20
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	605a      	str	r2, [r3, #4]
 8001144:	609a      	str	r2, [r3, #8]
 8001146:	60da      	str	r2, [r3, #12]
 8001148:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800114a:	4b41      	ldr	r3, [pc, #260]	; (8001250 <MX_GPIO_Init+0x11c>)
 800114c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800114e:	4a40      	ldr	r2, [pc, #256]	; (8001250 <MX_GPIO_Init+0x11c>)
 8001150:	f043 0304 	orr.w	r3, r3, #4
 8001154:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001156:	4b3e      	ldr	r3, [pc, #248]	; (8001250 <MX_GPIO_Init+0x11c>)
 8001158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115a:	f003 0304 	and.w	r3, r3, #4
 800115e:	613b      	str	r3, [r7, #16]
 8001160:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001162:	4b3b      	ldr	r3, [pc, #236]	; (8001250 <MX_GPIO_Init+0x11c>)
 8001164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001166:	4a3a      	ldr	r2, [pc, #232]	; (8001250 <MX_GPIO_Init+0x11c>)
 8001168:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800116c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800116e:	4b38      	ldr	r3, [pc, #224]	; (8001250 <MX_GPIO_Init+0x11c>)
 8001170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800117a:	4b35      	ldr	r3, [pc, #212]	; (8001250 <MX_GPIO_Init+0x11c>)
 800117c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117e:	4a34      	ldr	r2, [pc, #208]	; (8001250 <MX_GPIO_Init+0x11c>)
 8001180:	f043 0301 	orr.w	r3, r3, #1
 8001184:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001186:	4b32      	ldr	r3, [pc, #200]	; (8001250 <MX_GPIO_Init+0x11c>)
 8001188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	60bb      	str	r3, [r7, #8]
 8001190:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001192:	4b2f      	ldr	r3, [pc, #188]	; (8001250 <MX_GPIO_Init+0x11c>)
 8001194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001196:	4a2e      	ldr	r2, [pc, #184]	; (8001250 <MX_GPIO_Init+0x11c>)
 8001198:	f043 0302 	orr.w	r3, r3, #2
 800119c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800119e:	4b2c      	ldr	r3, [pc, #176]	; (8001250 <MX_GPIO_Init+0x11c>)
 80011a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a2:	f003 0302 	and.w	r3, r3, #2
 80011a6:	607b      	str	r3, [r7, #4]
 80011a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W5500_RST_GPIO_Port, W5500_RST_Pin, GPIO_PIN_RESET);
 80011aa:	2200      	movs	r2, #0
 80011ac:	2180      	movs	r1, #128	; 0x80
 80011ae:	4829      	ldr	r0, [pc, #164]	; (8001254 <MX_GPIO_Init+0x120>)
 80011b0:	f001 faba 	bl	8002728 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_NSS_GPIO_Port, SPI3_NSS_Pin, GPIO_PIN_SET);
 80011b4:	2201      	movs	r2, #1
 80011b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011be:	f001 fab3 	bl	8002728 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = W5500_INT_Pin;
 80011c2:	2340      	movs	r3, #64	; 0x40
 80011c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011c6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80011ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011cc:	2301      	movs	r3, #1
 80011ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(W5500_INT_GPIO_Port, &GPIO_InitStruct);
 80011d0:	f107 0314 	add.w	r3, r7, #20
 80011d4:	4619      	mov	r1, r3
 80011d6:	481f      	ldr	r0, [pc, #124]	; (8001254 <MX_GPIO_Init+0x120>)
 80011d8:	f001 f914 	bl	8002404 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = W5500_RST_Pin;
 80011dc:	2380      	movs	r3, #128	; 0x80
 80011de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e0:	2301      	movs	r3, #1
 80011e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80011e8:	2301      	movs	r3, #1
 80011ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(W5500_RST_GPIO_Port, &GPIO_InitStruct);
 80011ec:	f107 0314 	add.w	r3, r7, #20
 80011f0:	4619      	mov	r1, r3
 80011f2:	4818      	ldr	r0, [pc, #96]	; (8001254 <MX_GPIO_Init+0x120>)
 80011f4:	f001 f906 	bl	8002404 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI3_NSS_Pin;
 80011f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011fe:	2301      	movs	r3, #1
 8001200:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001206:	2303      	movs	r3, #3
 8001208:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI3_NSS_GPIO_Port, &GPIO_InitStruct);
 800120a:	f107 0314 	add.w	r3, r7, #20
 800120e:	4619      	mov	r1, r3
 8001210:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001214:	f001 f8f6 	bl	8002404 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001218:	23c0      	movs	r3, #192	; 0xc0
 800121a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121c:	2302      	movs	r3, #2
 800121e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001220:	2300      	movs	r3, #0
 8001222:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001224:	2303      	movs	r3, #3
 8001226:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001228:	2307      	movs	r3, #7
 800122a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800122c:	f107 0314 	add.w	r3, r7, #20
 8001230:	4619      	mov	r1, r3
 8001232:	4809      	ldr	r0, [pc, #36]	; (8001258 <MX_GPIO_Init+0x124>)
 8001234:	f001 f8e6 	bl	8002404 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8001238:	2200      	movs	r2, #0
 800123a:	2101      	movs	r1, #1
 800123c:	2017      	movs	r0, #23
 800123e:	f000 fe28 	bl	8001e92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001242:	2017      	movs	r0, #23
 8001244:	f000 fe41 	bl	8001eca <HAL_NVIC_EnableIRQ>

}
 8001248:	bf00      	nop
 800124a:	3728      	adds	r7, #40	; 0x28
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40021000 	.word	0x40021000
 8001254:	48000800 	.word	0x48000800
 8001258:	48000400 	.word	0x48000400

0800125c <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//GPIO外部中断处理回调函数
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_6){
 8001266:	88fb      	ldrh	r3, [r7, #6]
 8001268:	2b40      	cmp	r3, #64	; 0x40
 800126a:	d102      	bne.n	8001272 <HAL_GPIO_EXTI_Callback+0x16>
		W5500_Interrupt=1;
 800126c:	4b04      	ldr	r3, [pc, #16]	; (8001280 <HAL_GPIO_EXTI_Callback+0x24>)
 800126e:	2201      	movs	r2, #1
 8001270:	701a      	strb	r2, [r3, #0]
	}
}
 8001272:	bf00      	nop
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	200000af 	.word	0x200000af

08001284 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001288:	f000 fc8f 	bl	8001baa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800128c:	f000 f836 	bl	80012fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001290:	f7ff ff50 	bl	8001134 <MX_GPIO_Init>
  MX_DMA_Init();
 8001294:	f7ff ff28 	bl	80010e8 <MX_DMA_Init>
  MX_SPI3_Init();
 8001298:	f000 f884 	bl	80013a4 <MX_SPI3_Init>
  MX_TIM2_Init();
 800129c:	f000 fa72 	bl	8001784 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80012a0:	f000 fb12 	bl	80018c8 <MX_USART2_UART_Init>
  MX_UART4_Init();
 80012a4:	f000 fae0 	bl	8001868 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
//  HAL_TIM_Base_Start_IT((TIM_HandleTypeDef *)&htim2); //�???????????启定时器2中断

  printf("uart init success\n\r");
 80012a8:	4810      	ldr	r0, [pc, #64]	; (80012ec <main+0x68>)
 80012aa:	f005 fd23 	bl	8006cf4 <iprintf>

  Load_Net_Parameters();		//装载网络参数
 80012ae:	f7ff fe69 	bl	8000f84 <Load_Net_Parameters>
  	W5500_Hardware_Reset();		//硬件复位W5500
 80012b2:	f7ff fc29 	bl	8000b08 <W5500_Hardware_Reset>
  	W5500_Initialization();		//W5500初始货配�????????????
 80012b6:	f7ff fe59 	bl	8000f6c <W5500_Initialization>
  	printf("w5500 init success\n\r");
 80012ba:	480d      	ldr	r0, [pc, #52]	; (80012f0 <main+0x6c>)
 80012bc:	f005 fd1a 	bl	8006cf4 <iprintf>
  	W5500_Socket_Set();//W5500端口初始化配�?
 80012c0:	f7ff fec8 	bl	8001054 <W5500_Socket_Set>

  	__HAL_UART_ENABLE_IT(&huart4, UART_IT_IDLE);
 80012c4:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <main+0x70>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	4b0a      	ldr	r3, [pc, #40]	; (80012f4 <main+0x70>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f042 0210 	orr.w	r2, r2, #16
 80012d2:	601a      	str	r2, [r3, #0]
  	//__HAL_UART_ENABLE_IT(&huart4, UART_IT_RXNE);
  	__HAL_UART_CLEAR_IDLEFLAG(&huart4);
 80012d4:	4b07      	ldr	r3, [pc, #28]	; (80012f4 <main+0x70>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2210      	movs	r2, #16
 80012da:	621a      	str	r2, [r3, #32]
  	HAL_UART_Receive_DMA(&huart4, DMA_Buffer, DMA_BUFFER_LENGTH);
 80012dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012e0:	4905      	ldr	r1, [pc, #20]	; (80012f8 <main+0x74>)
 80012e2:	4804      	ldr	r0, [pc, #16]	; (80012f4 <main+0x70>)
 80012e4:	f004 fa08 	bl	80056f8 <HAL_UART_Receive_DMA>
  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012e8:	e7fe      	b.n	80012e8 <main+0x64>
 80012ea:	bf00      	nop
 80012ec:	08007da0 	.word	0x08007da0
 80012f0:	08007db4 	.word	0x08007db4
 80012f4:	20000264 	.word	0x20000264
 80012f8:	20000164 	.word	0x20000164

080012fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b096      	sub	sp, #88	; 0x58
 8001300:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001302:	f107 0314 	add.w	r3, r7, #20
 8001306:	2244      	movs	r2, #68	; 0x44
 8001308:	2100      	movs	r1, #0
 800130a:	4618      	mov	r0, r3
 800130c:	f005 fcea 	bl	8006ce4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001310:	463b      	mov	r3, r7
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	605a      	str	r2, [r3, #4]
 8001318:	609a      	str	r2, [r3, #8]
 800131a:	60da      	str	r2, [r3, #12]
 800131c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800131e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001322:	f001 fa3f 	bl	80027a4 <HAL_PWREx_ControlVoltageScaling>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800132c:	f000 f835 	bl	800139a <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001330:	2301      	movs	r3, #1
 8001332:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001334:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001338:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800133a:	2302      	movs	r3, #2
 800133c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800133e:	2303      	movs	r3, #3
 8001340:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001342:	2302      	movs	r3, #2
 8001344:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001346:	230c      	movs	r3, #12
 8001348:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800134a:	2302      	movs	r3, #2
 800134c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800134e:	2302      	movs	r3, #2
 8001350:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001352:	2302      	movs	r3, #2
 8001354:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001356:	f107 0314 	add.w	r3, r7, #20
 800135a:	4618      	mov	r0, r3
 800135c:	f001 fa78 	bl	8002850 <HAL_RCC_OscConfig>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001366:	f000 f818 	bl	800139a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800136a:	230f      	movs	r3, #15
 800136c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800136e:	2303      	movs	r3, #3
 8001370:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001372:	2300      	movs	r3, #0
 8001374:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001376:	2300      	movs	r3, #0
 8001378:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800137a:	2300      	movs	r3, #0
 800137c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800137e:	463b      	mov	r3, r7
 8001380:	2104      	movs	r1, #4
 8001382:	4618      	mov	r0, r3
 8001384:	f001 fe7e 	bl	8003084 <HAL_RCC_ClockConfig>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800138e:	f000 f804 	bl	800139a <Error_Handler>
  }
}
 8001392:	bf00      	nop
 8001394:	3758      	adds	r7, #88	; 0x58
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800139a:	b480      	push	{r7}
 800139c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800139e:	b672      	cpsid	i
}
 80013a0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013a2:	e7fe      	b.n	80013a2 <Error_Handler+0x8>

080013a4 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80013a8:	4b1b      	ldr	r3, [pc, #108]	; (8001418 <MX_SPI3_Init+0x74>)
 80013aa:	4a1c      	ldr	r2, [pc, #112]	; (800141c <MX_SPI3_Init+0x78>)
 80013ac:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80013ae:	4b1a      	ldr	r3, [pc, #104]	; (8001418 <MX_SPI3_Init+0x74>)
 80013b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013b4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80013b6:	4b18      	ldr	r3, [pc, #96]	; (8001418 <MX_SPI3_Init+0x74>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80013bc:	4b16      	ldr	r3, [pc, #88]	; (8001418 <MX_SPI3_Init+0x74>)
 80013be:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80013c2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013c4:	4b14      	ldr	r3, [pc, #80]	; (8001418 <MX_SPI3_Init+0x74>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013ca:	4b13      	ldr	r3, [pc, #76]	; (8001418 <MX_SPI3_Init+0x74>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80013d0:	4b11      	ldr	r3, [pc, #68]	; (8001418 <MX_SPI3_Init+0x74>)
 80013d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013d6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80013d8:	4b0f      	ldr	r3, [pc, #60]	; (8001418 <MX_SPI3_Init+0x74>)
 80013da:	2200      	movs	r2, #0
 80013dc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013de:	4b0e      	ldr	r3, [pc, #56]	; (8001418 <MX_SPI3_Init+0x74>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80013e4:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <MX_SPI3_Init+0x74>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013ea:	4b0b      	ldr	r3, [pc, #44]	; (8001418 <MX_SPI3_Init+0x74>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80013f0:	4b09      	ldr	r3, [pc, #36]	; (8001418 <MX_SPI3_Init+0x74>)
 80013f2:	2207      	movs	r2, #7
 80013f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80013f6:	4b08      	ldr	r3, [pc, #32]	; (8001418 <MX_SPI3_Init+0x74>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80013fc:	4b06      	ldr	r3, [pc, #24]	; (8001418 <MX_SPI3_Init+0x74>)
 80013fe:	2208      	movs	r2, #8
 8001400:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001402:	4805      	ldr	r0, [pc, #20]	; (8001418 <MX_SPI3_Init+0x74>)
 8001404:	f002 fd2c 	bl	8003e60 <HAL_SPI_Init>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800140e:	f7ff ffc4 	bl	800139a <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	200000b0 	.word	0x200000b0
 800141c:	40003c00 	.word	0x40003c00

08001420 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b08a      	sub	sp, #40	; 0x28
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001428:	f107 0314 	add.w	r3, r7, #20
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	609a      	str	r2, [r3, #8]
 8001434:	60da      	str	r2, [r3, #12]
 8001436:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a17      	ldr	r2, [pc, #92]	; (800149c <HAL_SPI_MspInit+0x7c>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d127      	bne.n	8001492 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001442:	4b17      	ldr	r3, [pc, #92]	; (80014a0 <HAL_SPI_MspInit+0x80>)
 8001444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001446:	4a16      	ldr	r2, [pc, #88]	; (80014a0 <HAL_SPI_MspInit+0x80>)
 8001448:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800144c:	6593      	str	r3, [r2, #88]	; 0x58
 800144e:	4b14      	ldr	r3, [pc, #80]	; (80014a0 <HAL_SPI_MspInit+0x80>)
 8001450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001452:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001456:	613b      	str	r3, [r7, #16]
 8001458:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800145a:	4b11      	ldr	r3, [pc, #68]	; (80014a0 <HAL_SPI_MspInit+0x80>)
 800145c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145e:	4a10      	ldr	r2, [pc, #64]	; (80014a0 <HAL_SPI_MspInit+0x80>)
 8001460:	f043 0302 	orr.w	r3, r3, #2
 8001464:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001466:	4b0e      	ldr	r3, [pc, #56]	; (80014a0 <HAL_SPI_MspInit+0x80>)
 8001468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146a:	f003 0302 	and.w	r3, r3, #2
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI3_SCK
    PB4 (NJTRST)     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001472:	2338      	movs	r3, #56	; 0x38
 8001474:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001476:	2302      	movs	r3, #2
 8001478:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147a:	2300      	movs	r3, #0
 800147c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800147e:	2303      	movs	r3, #3
 8001480:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001482:	2306      	movs	r3, #6
 8001484:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001486:	f107 0314 	add.w	r3, r7, #20
 800148a:	4619      	mov	r1, r3
 800148c:	4805      	ldr	r0, [pc, #20]	; (80014a4 <HAL_SPI_MspInit+0x84>)
 800148e:	f000 ffb9 	bl	8002404 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001492:	bf00      	nop
 8001494:	3728      	adds	r7, #40	; 0x28
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	40003c00 	.word	0x40003c00
 80014a0:	40021000 	.word	0x40021000
 80014a4:	48000400 	.word	0x48000400

080014a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ae:	4b0f      	ldr	r3, [pc, #60]	; (80014ec <HAL_MspInit+0x44>)
 80014b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014b2:	4a0e      	ldr	r2, [pc, #56]	; (80014ec <HAL_MspInit+0x44>)
 80014b4:	f043 0301 	orr.w	r3, r3, #1
 80014b8:	6613      	str	r3, [r2, #96]	; 0x60
 80014ba:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <HAL_MspInit+0x44>)
 80014bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	607b      	str	r3, [r7, #4]
 80014c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014c6:	4b09      	ldr	r3, [pc, #36]	; (80014ec <HAL_MspInit+0x44>)
 80014c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ca:	4a08      	ldr	r2, [pc, #32]	; (80014ec <HAL_MspInit+0x44>)
 80014cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014d0:	6593      	str	r3, [r2, #88]	; 0x58
 80014d2:	4b06      	ldr	r3, [pc, #24]	; (80014ec <HAL_MspInit+0x44>)
 80014d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014da:	603b      	str	r3, [r7, #0]
 80014dc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 80014de:	2005      	movs	r0, #5
 80014e0:	f000 fccc 	bl	8001e7c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014e4:	bf00      	nop
 80014e6:	3708      	adds	r7, #8
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40021000 	.word	0x40021000

080014f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014f4:	e7fe      	b.n	80014f4 <NMI_Handler+0x4>

080014f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014f6:	b480      	push	{r7}
 80014f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014fa:	e7fe      	b.n	80014fa <HardFault_Handler+0x4>

080014fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001500:	e7fe      	b.n	8001500 <MemManage_Handler+0x4>

08001502 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001502:	b480      	push	{r7}
 8001504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001506:	e7fe      	b.n	8001506 <BusFault_Handler+0x4>

08001508 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800150c:	e7fe      	b.n	800150c <UsageFault_Handler+0x4>

0800150e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800150e:	b480      	push	{r7}
 8001510:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001520:	bf00      	nop
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr

0800152a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800152a:	b480      	push	{r7}
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800152e:	bf00      	nop
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800153c:	f000 fb8a 	bl	8001c54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001540:	bf00      	nop
 8001542:	bd80      	pop	{r7, pc}

08001544 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(W5500_INT_Pin);
 8001548:	2040      	movs	r0, #64	; 0x40
 800154a:	f001 f905 	bl	8002758 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
	...

08001554 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001558:	4802      	ldr	r0, [pc, #8]	; (8001564 <TIM2_IRQHandler+0x10>)
 800155a:	f003 fbf6 	bl	8004d4a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20000118 	.word	0x20000118

08001568 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800156e:	481c      	ldr	r0, [pc, #112]	; (80015e0 <UART4_IRQHandler+0x78>)
 8001570:	f004 f9aa 	bl	80058c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */
  if(__HAL_UART_GET_FLAG(&huart4, UART_FLAG_IDLE) != RESET){
 8001574:	4b1a      	ldr	r3, [pc, #104]	; (80015e0 <UART4_IRQHandler+0x78>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	69db      	ldr	r3, [r3, #28]
 800157a:	f003 0310 	and.w	r3, r3, #16
 800157e:	2b10      	cmp	r3, #16
 8001580:	d129      	bne.n	80015d6 <UART4_IRQHandler+0x6e>
	  __HAL_UART_CLEAR_IDLEFLAG(&huart4); //清楚空闲中断标志位
 8001582:	4b17      	ldr	r3, [pc, #92]	; (80015e0 <UART4_IRQHandler+0x78>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2210      	movs	r2, #16
 8001588:	621a      	str	r2, [r3, #32]
	  HAL_UART_DMAStop(&huart4);		//停止本次DMA传输
 800158a:	4815      	ldr	r0, [pc, #84]	; (80015e0 <UART4_IRQHandler+0x78>)
 800158c:	f004 f90a 	bl	80057a4 <HAL_UART_DMAStop>

	  unsigned int len = DMA_BUFFER_LENGTH  - __HAL_DMA_GET_COUNTER(&hdma_uart4_rx);
 8001590:	4b14      	ldr	r3, [pc, #80]	; (80015e4 <UART4_IRQHandler+0x7c>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800159a:	607b      	str	r3, [r7, #4]
	  printf("w5500 send data success!\r\n");
 800159c:	4812      	ldr	r0, [pc, #72]	; (80015e8 <UART4_IRQHandler+0x80>)
 800159e:	f005 fc2f 	bl	8006e00 <puts>
	  Write_SOCK_Data_Buffer(0, DMA_Buffer, len);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	461a      	mov	r2, r3
 80015a8:	4910      	ldr	r1, [pc, #64]	; (80015ec <UART4_IRQHandler+0x84>)
 80015aa:	2000      	movs	r0, #0
 80015ac:	f7ff fa22 	bl	80009f4 <Write_SOCK_Data_Buffer>
	  HAL_UART_Transmit(&huart4, DMA_Buffer, len, 200);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	b29a      	uxth	r2, r3
 80015b4:	23c8      	movs	r3, #200	; 0xc8
 80015b6:	490d      	ldr	r1, [pc, #52]	; (80015ec <UART4_IRQHandler+0x84>)
 80015b8:	4809      	ldr	r0, [pc, #36]	; (80015e0 <UART4_IRQHandler+0x78>)
 80015ba:	f004 f809 	bl	80055d0 <HAL_UART_Transmit>
	  memset(DMA_Buffer, 0, DMA_BUFFER_LENGTH);
 80015be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015c2:	2100      	movs	r1, #0
 80015c4:	4809      	ldr	r0, [pc, #36]	; (80015ec <UART4_IRQHandler+0x84>)
 80015c6:	f005 fb8d 	bl	8006ce4 <memset>
	  HAL_UART_Receive_DMA(&huart4, DMA_Buffer, DMA_BUFFER_LENGTH);
 80015ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015ce:	4907      	ldr	r1, [pc, #28]	; (80015ec <UART4_IRQHandler+0x84>)
 80015d0:	4803      	ldr	r0, [pc, #12]	; (80015e0 <UART4_IRQHandler+0x78>)
 80015d2:	f004 f891 	bl	80056f8 <HAL_UART_Receive_DMA>
  }
  /* USER CODE END UART4_IRQn 1 */
}
 80015d6:	bf00      	nop
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	20000264 	.word	0x20000264
 80015e4:	2000036c 	.word	0x2000036c
 80015e8:	08007dcc 	.word	0x08007dcc
 80015ec:	20000164 	.word	0x20000164

080015f0 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 80015f4:	4802      	ldr	r0, [pc, #8]	; (8001600 <DMA2_Channel3_IRQHandler+0x10>)
 80015f6:	f000 fe1a 	bl	800222e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	200003b4 	.word	0x200003b4

08001604 <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001608:	4802      	ldr	r0, [pc, #8]	; (8001614 <DMA2_Channel5_IRQHandler+0x10>)
 800160a:	f000 fe10 	bl	800222e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	2000036c 	.word	0x2000036c

08001618 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b086      	sub	sp, #24
 800161c:	af00      	add	r7, sp, #0
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	60b9      	str	r1, [r7, #8]
 8001622:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001624:	2300      	movs	r3, #0
 8001626:	617b      	str	r3, [r7, #20]
 8001628:	e00a      	b.n	8001640 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800162a:	f3af 8000 	nop.w
 800162e:	4601      	mov	r1, r0
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	1c5a      	adds	r2, r3, #1
 8001634:	60ba      	str	r2, [r7, #8]
 8001636:	b2ca      	uxtb	r2, r1
 8001638:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	3301      	adds	r3, #1
 800163e:	617b      	str	r3, [r7, #20]
 8001640:	697a      	ldr	r2, [r7, #20]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	429a      	cmp	r2, r3
 8001646:	dbf0      	blt.n	800162a <_read+0x12>
	}

return len;
 8001648:	687b      	ldr	r3, [r7, #4]
}
 800164a:	4618      	mov	r0, r3
 800164c:	3718      	adds	r7, #24
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b086      	sub	sp, #24
 8001656:	af00      	add	r7, sp, #0
 8001658:	60f8      	str	r0, [r7, #12]
 800165a:	60b9      	str	r1, [r7, #8]
 800165c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800165e:	2300      	movs	r3, #0
 8001660:	617b      	str	r3, [r7, #20]
 8001662:	e009      	b.n	8001678 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	1c5a      	adds	r2, r3, #1
 8001668:	60ba      	str	r2, [r7, #8]
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	4618      	mov	r0, r3
 800166e:	f000 fa61 	bl	8001b34 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	3301      	adds	r3, #1
 8001676:	617b      	str	r3, [r7, #20]
 8001678:	697a      	ldr	r2, [r7, #20]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	429a      	cmp	r2, r3
 800167e:	dbf1      	blt.n	8001664 <_write+0x12>
	}
	return len;
 8001680:	687b      	ldr	r3, [r7, #4]
}
 8001682:	4618      	mov	r0, r3
 8001684:	3718      	adds	r7, #24
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <_close>:

int _close(int file)
{
 800168a:	b480      	push	{r7}
 800168c:	b083      	sub	sp, #12
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
	return -1;
 8001692:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001696:	4618      	mov	r0, r3
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr

080016a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016a2:	b480      	push	{r7}
 80016a4:	b083      	sub	sp, #12
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
 80016aa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016b2:	605a      	str	r2, [r3, #4]
	return 0;
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr

080016c2 <_isatty>:

int _isatty(int file)
{
 80016c2:	b480      	push	{r7}
 80016c4:	b083      	sub	sp, #12
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
	return 1;
 80016ca:	2301      	movs	r3, #1
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016d8:	b480      	push	{r7}
 80016da:	b085      	sub	sp, #20
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	607a      	str	r2, [r7, #4]
	return 0;
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3714      	adds	r7, #20
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
	...

080016f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b086      	sub	sp, #24
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016fc:	4a14      	ldr	r2, [pc, #80]	; (8001750 <_sbrk+0x5c>)
 80016fe:	4b15      	ldr	r3, [pc, #84]	; (8001754 <_sbrk+0x60>)
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001708:	4b13      	ldr	r3, [pc, #76]	; (8001758 <_sbrk+0x64>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d102      	bne.n	8001716 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001710:	4b11      	ldr	r3, [pc, #68]	; (8001758 <_sbrk+0x64>)
 8001712:	4a12      	ldr	r2, [pc, #72]	; (800175c <_sbrk+0x68>)
 8001714:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001716:	4b10      	ldr	r3, [pc, #64]	; (8001758 <_sbrk+0x64>)
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4413      	add	r3, r2
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	429a      	cmp	r2, r3
 8001722:	d207      	bcs.n	8001734 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001724:	f005 fab4 	bl	8006c90 <__errno>
 8001728:	4603      	mov	r3, r0
 800172a:	220c      	movs	r2, #12
 800172c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800172e:	f04f 33ff 	mov.w	r3, #4294967295
 8001732:	e009      	b.n	8001748 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001734:	4b08      	ldr	r3, [pc, #32]	; (8001758 <_sbrk+0x64>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800173a:	4b07      	ldr	r3, [pc, #28]	; (8001758 <_sbrk+0x64>)
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4413      	add	r3, r2
 8001742:	4a05      	ldr	r2, [pc, #20]	; (8001758 <_sbrk+0x64>)
 8001744:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001746:	68fb      	ldr	r3, [r7, #12]
}
 8001748:	4618      	mov	r0, r3
 800174a:	3718      	adds	r7, #24
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	20050000 	.word	0x20050000
 8001754:	00000400 	.word	0x00000400
 8001758:	20000114 	.word	0x20000114
 800175c:	20000410 	.word	0x20000410

08001760 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001764:	4b06      	ldr	r3, [pc, #24]	; (8001780 <SystemInit+0x20>)
 8001766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800176a:	4a05      	ldr	r2, [pc, #20]	; (8001780 <SystemInit+0x20>)
 800176c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001770:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001774:	bf00      	nop
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	e000ed00 	.word	0xe000ed00

08001784 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b088      	sub	sp, #32
 8001788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800178a:	f107 0310 	add.w	r3, r7, #16
 800178e:	2200      	movs	r2, #0
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	605a      	str	r2, [r3, #4]
 8001794:	609a      	str	r2, [r3, #8]
 8001796:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001798:	1d3b      	adds	r3, r7, #4
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	605a      	str	r2, [r3, #4]
 80017a0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017a2:	4b1e      	ldr	r3, [pc, #120]	; (800181c <MX_TIM2_Init+0x98>)
 80017a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017a8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80017aa:	4b1c      	ldr	r3, [pc, #112]	; (800181c <MX_TIM2_Init+0x98>)
 80017ac:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80017b0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017b2:	4b1a      	ldr	r3, [pc, #104]	; (800181c <MX_TIM2_Init+0x98>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 80017b8:	4b18      	ldr	r3, [pc, #96]	; (800181c <MX_TIM2_Init+0x98>)
 80017ba:	f242 720f 	movw	r2, #9999	; 0x270f
 80017be:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017c0:	4b16      	ldr	r3, [pc, #88]	; (800181c <MX_TIM2_Init+0x98>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017c6:	4b15      	ldr	r3, [pc, #84]	; (800181c <MX_TIM2_Init+0x98>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017cc:	4813      	ldr	r0, [pc, #76]	; (800181c <MX_TIM2_Init+0x98>)
 80017ce:	f003 fa65 	bl	8004c9c <HAL_TIM_Base_Init>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80017d8:	f7ff fddf 	bl	800139a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017e0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017e2:	f107 0310 	add.w	r3, r7, #16
 80017e6:	4619      	mov	r1, r3
 80017e8:	480c      	ldr	r0, [pc, #48]	; (800181c <MX_TIM2_Init+0x98>)
 80017ea:	f003 fbcd 	bl	8004f88 <HAL_TIM_ConfigClockSource>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80017f4:	f7ff fdd1 	bl	800139a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017f8:	2300      	movs	r3, #0
 80017fa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017fc:	2300      	movs	r3, #0
 80017fe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001800:	1d3b      	adds	r3, r7, #4
 8001802:	4619      	mov	r1, r3
 8001804:	4805      	ldr	r0, [pc, #20]	; (800181c <MX_TIM2_Init+0x98>)
 8001806:	f003 fdef 	bl	80053e8 <HAL_TIMEx_MasterConfigSynchronization>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001810:	f7ff fdc3 	bl	800139a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001814:	bf00      	nop
 8001816:	3720      	adds	r7, #32
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	20000118 	.word	0x20000118

08001820 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001830:	d113      	bne.n	800185a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001832:	4b0c      	ldr	r3, [pc, #48]	; (8001864 <HAL_TIM_Base_MspInit+0x44>)
 8001834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001836:	4a0b      	ldr	r2, [pc, #44]	; (8001864 <HAL_TIM_Base_MspInit+0x44>)
 8001838:	f043 0301 	orr.w	r3, r3, #1
 800183c:	6593      	str	r3, [r2, #88]	; 0x58
 800183e:	4b09      	ldr	r3, [pc, #36]	; (8001864 <HAL_TIM_Base_MspInit+0x44>)
 8001840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800184a:	2200      	movs	r2, #0
 800184c:	2101      	movs	r1, #1
 800184e:	201c      	movs	r0, #28
 8001850:	f000 fb1f 	bl	8001e92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001854:	201c      	movs	r0, #28
 8001856:	f000 fb38 	bl	8001eca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800185a:	bf00      	nop
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40021000 	.word	0x40021000

08001868 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart4_rx;
DMA_HandleTypeDef hdma_uart4_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800186c:	4b14      	ldr	r3, [pc, #80]	; (80018c0 <MX_UART4_Init+0x58>)
 800186e:	4a15      	ldr	r2, [pc, #84]	; (80018c4 <MX_UART4_Init+0x5c>)
 8001870:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001872:	4b13      	ldr	r3, [pc, #76]	; (80018c0 <MX_UART4_Init+0x58>)
 8001874:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001878:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800187a:	4b11      	ldr	r3, [pc, #68]	; (80018c0 <MX_UART4_Init+0x58>)
 800187c:	2200      	movs	r2, #0
 800187e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001880:	4b0f      	ldr	r3, [pc, #60]	; (80018c0 <MX_UART4_Init+0x58>)
 8001882:	2200      	movs	r2, #0
 8001884:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001886:	4b0e      	ldr	r3, [pc, #56]	; (80018c0 <MX_UART4_Init+0x58>)
 8001888:	2200      	movs	r2, #0
 800188a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800188c:	4b0c      	ldr	r3, [pc, #48]	; (80018c0 <MX_UART4_Init+0x58>)
 800188e:	220c      	movs	r2, #12
 8001890:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001892:	4b0b      	ldr	r3, [pc, #44]	; (80018c0 <MX_UART4_Init+0x58>)
 8001894:	2200      	movs	r2, #0
 8001896:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001898:	4b09      	ldr	r3, [pc, #36]	; (80018c0 <MX_UART4_Init+0x58>)
 800189a:	2200      	movs	r2, #0
 800189c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800189e:	4b08      	ldr	r3, [pc, #32]	; (80018c0 <MX_UART4_Init+0x58>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018a4:	4b06      	ldr	r3, [pc, #24]	; (80018c0 <MX_UART4_Init+0x58>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80018aa:	4805      	ldr	r0, [pc, #20]	; (80018c0 <MX_UART4_Init+0x58>)
 80018ac:	f003 fe42 	bl	8005534 <HAL_UART_Init>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80018b6:	f7ff fd70 	bl	800139a <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80018ba:	bf00      	nop
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	20000264 	.word	0x20000264
 80018c4:	40004c00 	.word	0x40004c00

080018c8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018cc:	4b14      	ldr	r3, [pc, #80]	; (8001920 <MX_USART2_UART_Init+0x58>)
 80018ce:	4a15      	ldr	r2, [pc, #84]	; (8001924 <MX_USART2_UART_Init+0x5c>)
 80018d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018d2:	4b13      	ldr	r3, [pc, #76]	; (8001920 <MX_USART2_UART_Init+0x58>)
 80018d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018da:	4b11      	ldr	r3, [pc, #68]	; (8001920 <MX_USART2_UART_Init+0x58>)
 80018dc:	2200      	movs	r2, #0
 80018de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018e0:	4b0f      	ldr	r3, [pc, #60]	; (8001920 <MX_USART2_UART_Init+0x58>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018e6:	4b0e      	ldr	r3, [pc, #56]	; (8001920 <MX_USART2_UART_Init+0x58>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018ec:	4b0c      	ldr	r3, [pc, #48]	; (8001920 <MX_USART2_UART_Init+0x58>)
 80018ee:	220c      	movs	r2, #12
 80018f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018f2:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <MX_USART2_UART_Init+0x58>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018f8:	4b09      	ldr	r3, [pc, #36]	; (8001920 <MX_USART2_UART_Init+0x58>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018fe:	4b08      	ldr	r3, [pc, #32]	; (8001920 <MX_USART2_UART_Init+0x58>)
 8001900:	2200      	movs	r2, #0
 8001902:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001904:	4b06      	ldr	r3, [pc, #24]	; (8001920 <MX_USART2_UART_Init+0x58>)
 8001906:	2200      	movs	r2, #0
 8001908:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800190a:	4805      	ldr	r0, [pc, #20]	; (8001920 <MX_USART2_UART_Init+0x58>)
 800190c:	f003 fe12 	bl	8005534 <HAL_UART_Init>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001916:	f7ff fd40 	bl	800139a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800191a:	bf00      	nop
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	200002e8 	.word	0x200002e8
 8001924:	40004400 	.word	0x40004400

08001928 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b0ae      	sub	sp, #184	; 0xb8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001930:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	605a      	str	r2, [r3, #4]
 800193a:	609a      	str	r2, [r3, #8]
 800193c:	60da      	str	r2, [r3, #12]
 800193e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001940:	f107 0318 	add.w	r3, r7, #24
 8001944:	228c      	movs	r2, #140	; 0x8c
 8001946:	2100      	movs	r1, #0
 8001948:	4618      	mov	r0, r3
 800194a:	f005 f9cb 	bl	8006ce4 <memset>
  if(uartHandle->Instance==UART4)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a71      	ldr	r2, [pc, #452]	; (8001b18 <HAL_UART_MspInit+0x1f0>)
 8001954:	4293      	cmp	r3, r2
 8001956:	f040 8099 	bne.w	8001a8c <HAL_UART_MspInit+0x164>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800195a:	2308      	movs	r3, #8
 800195c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800195e:	2300      	movs	r3, #0
 8001960:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001962:	f107 0318 	add.w	r3, r7, #24
 8001966:	4618      	mov	r0, r3
 8001968:	f001 fdb0 	bl	80034cc <HAL_RCCEx_PeriphCLKConfig>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001972:	f7ff fd12 	bl	800139a <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001976:	4b69      	ldr	r3, [pc, #420]	; (8001b1c <HAL_UART_MspInit+0x1f4>)
 8001978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800197a:	4a68      	ldr	r2, [pc, #416]	; (8001b1c <HAL_UART_MspInit+0x1f4>)
 800197c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001980:	6593      	str	r3, [r2, #88]	; 0x58
 8001982:	4b66      	ldr	r3, [pc, #408]	; (8001b1c <HAL_UART_MspInit+0x1f4>)
 8001984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001986:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800198a:	617b      	str	r3, [r7, #20]
 800198c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800198e:	4b63      	ldr	r3, [pc, #396]	; (8001b1c <HAL_UART_MspInit+0x1f4>)
 8001990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001992:	4a62      	ldr	r2, [pc, #392]	; (8001b1c <HAL_UART_MspInit+0x1f4>)
 8001994:	f043 0301 	orr.w	r3, r3, #1
 8001998:	64d3      	str	r3, [r2, #76]	; 0x4c
 800199a:	4b60      	ldr	r3, [pc, #384]	; (8001b1c <HAL_UART_MspInit+0x1f4>)
 800199c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	613b      	str	r3, [r7, #16]
 80019a4:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80019a6:	2303      	movs	r3, #3
 80019a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ac:	2302      	movs	r3, #2
 80019ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b2:	2300      	movs	r3, #0
 80019b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b8:	2303      	movs	r3, #3
 80019ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80019be:	2308      	movs	r3, #8
 80019c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80019c8:	4619      	mov	r1, r3
 80019ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019ce:	f000 fd19 	bl	8002404 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA2_Channel5;
 80019d2:	4b53      	ldr	r3, [pc, #332]	; (8001b20 <HAL_UART_MspInit+0x1f8>)
 80019d4:	4a53      	ldr	r2, [pc, #332]	; (8001b24 <HAL_UART_MspInit+0x1fc>)
 80019d6:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_2;
 80019d8:	4b51      	ldr	r3, [pc, #324]	; (8001b20 <HAL_UART_MspInit+0x1f8>)
 80019da:	2202      	movs	r2, #2
 80019dc:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019de:	4b50      	ldr	r3, [pc, #320]	; (8001b20 <HAL_UART_MspInit+0x1f8>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019e4:	4b4e      	ldr	r3, [pc, #312]	; (8001b20 <HAL_UART_MspInit+0x1f8>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80019ea:	4b4d      	ldr	r3, [pc, #308]	; (8001b20 <HAL_UART_MspInit+0x1f8>)
 80019ec:	2280      	movs	r2, #128	; 0x80
 80019ee:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019f0:	4b4b      	ldr	r3, [pc, #300]	; (8001b20 <HAL_UART_MspInit+0x1f8>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019f6:	4b4a      	ldr	r3, [pc, #296]	; (8001b20 <HAL_UART_MspInit+0x1f8>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 80019fc:	4b48      	ldr	r3, [pc, #288]	; (8001b20 <HAL_UART_MspInit+0x1f8>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001a02:	4b47      	ldr	r3, [pc, #284]	; (8001b20 <HAL_UART_MspInit+0x1f8>)
 8001a04:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a08:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001a0a:	4845      	ldr	r0, [pc, #276]	; (8001b20 <HAL_UART_MspInit+0x1f8>)
 8001a0c:	f000 fa78 	bl	8001f00 <HAL_DMA_Init>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <HAL_UART_MspInit+0xf2>
    {
      Error_Handler();
 8001a16:	f7ff fcc0 	bl	800139a <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a40      	ldr	r2, [pc, #256]	; (8001b20 <HAL_UART_MspInit+0x1f8>)
 8001a1e:	671a      	str	r2, [r3, #112]	; 0x70
 8001a20:	4a3f      	ldr	r2, [pc, #252]	; (8001b20 <HAL_UART_MspInit+0x1f8>)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6293      	str	r3, [r2, #40]	; 0x28

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA2_Channel3;
 8001a26:	4b40      	ldr	r3, [pc, #256]	; (8001b28 <HAL_UART_MspInit+0x200>)
 8001a28:	4a40      	ldr	r2, [pc, #256]	; (8001b2c <HAL_UART_MspInit+0x204>)
 8001a2a:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_2;
 8001a2c:	4b3e      	ldr	r3, [pc, #248]	; (8001b28 <HAL_UART_MspInit+0x200>)
 8001a2e:	2202      	movs	r2, #2
 8001a30:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a32:	4b3d      	ldr	r3, [pc, #244]	; (8001b28 <HAL_UART_MspInit+0x200>)
 8001a34:	2210      	movs	r2, #16
 8001a36:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a38:	4b3b      	ldr	r3, [pc, #236]	; (8001b28 <HAL_UART_MspInit+0x200>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a3e:	4b3a      	ldr	r3, [pc, #232]	; (8001b28 <HAL_UART_MspInit+0x200>)
 8001a40:	2280      	movs	r2, #128	; 0x80
 8001a42:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a44:	4b38      	ldr	r3, [pc, #224]	; (8001b28 <HAL_UART_MspInit+0x200>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a4a:	4b37      	ldr	r3, [pc, #220]	; (8001b28 <HAL_UART_MspInit+0x200>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8001a50:	4b35      	ldr	r3, [pc, #212]	; (8001b28 <HAL_UART_MspInit+0x200>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001a56:	4b34      	ldr	r3, [pc, #208]	; (8001b28 <HAL_UART_MspInit+0x200>)
 8001a58:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a5c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8001a5e:	4832      	ldr	r0, [pc, #200]	; (8001b28 <HAL_UART_MspInit+0x200>)
 8001a60:	f000 fa4e 	bl	8001f00 <HAL_DMA_Init>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <HAL_UART_MspInit+0x146>
    {
      Error_Handler();
 8001a6a:	f7ff fc96 	bl	800139a <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a2d      	ldr	r2, [pc, #180]	; (8001b28 <HAL_UART_MspInit+0x200>)
 8001a72:	66da      	str	r2, [r3, #108]	; 0x6c
 8001a74:	4a2c      	ldr	r2, [pc, #176]	; (8001b28 <HAL_UART_MspInit+0x200>)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6293      	str	r3, [r2, #40]	; 0x28

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	2034      	movs	r0, #52	; 0x34
 8001a80:	f000 fa07 	bl	8001e92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001a84:	2034      	movs	r0, #52	; 0x34
 8001a86:	f000 fa20 	bl	8001eca <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001a8a:	e040      	b.n	8001b0e <HAL_UART_MspInit+0x1e6>
  else if(uartHandle->Instance==USART2)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a27      	ldr	r2, [pc, #156]	; (8001b30 <HAL_UART_MspInit+0x208>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d13b      	bne.n	8001b0e <HAL_UART_MspInit+0x1e6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001a96:	2302      	movs	r3, #2
 8001a98:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a9e:	f107 0318 	add.w	r3, r7, #24
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f001 fd12 	bl	80034cc <HAL_RCCEx_PeriphCLKConfig>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <HAL_UART_MspInit+0x18a>
      Error_Handler();
 8001aae:	f7ff fc74 	bl	800139a <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ab2:	4b1a      	ldr	r3, [pc, #104]	; (8001b1c <HAL_UART_MspInit+0x1f4>)
 8001ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab6:	4a19      	ldr	r2, [pc, #100]	; (8001b1c <HAL_UART_MspInit+0x1f4>)
 8001ab8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001abc:	6593      	str	r3, [r2, #88]	; 0x58
 8001abe:	4b17      	ldr	r3, [pc, #92]	; (8001b1c <HAL_UART_MspInit+0x1f4>)
 8001ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aca:	4b14      	ldr	r3, [pc, #80]	; (8001b1c <HAL_UART_MspInit+0x1f4>)
 8001acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ace:	4a13      	ldr	r2, [pc, #76]	; (8001b1c <HAL_UART_MspInit+0x1f4>)
 8001ad0:	f043 0301 	orr.w	r3, r3, #1
 8001ad4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ad6:	4b11      	ldr	r3, [pc, #68]	; (8001b1c <HAL_UART_MspInit+0x1f4>)
 8001ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	60bb      	str	r3, [r7, #8]
 8001ae0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001ae2:	230c      	movs	r3, #12
 8001ae4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae8:	2302      	movs	r3, #2
 8001aea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aee:	2300      	movs	r3, #0
 8001af0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af4:	2303      	movs	r3, #3
 8001af6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001afa:	2307      	movs	r3, #7
 8001afc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b00:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b04:	4619      	mov	r1, r3
 8001b06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b0a:	f000 fc7b 	bl	8002404 <HAL_GPIO_Init>
}
 8001b0e:	bf00      	nop
 8001b10:	37b8      	adds	r7, #184	; 0xb8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	40004c00 	.word	0x40004c00
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	2000036c 	.word	0x2000036c
 8001b24:	40020458 	.word	0x40020458
 8001b28:	200003b4 	.word	0x200003b4
 8001b2c:	40020430 	.word	0x40020430
 8001b30:	40004400 	.word	0x40004400

08001b34 <__io_putchar>:
  * @brief Retargets the C library printf function to the USART.
  * @param None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
//  HAL_UART_Transmit_DMA(&huart2, (uint8_t *)&ch, 1);
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xffff);
 8001b3c:	1d39      	adds	r1, r7, #4
 8001b3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b42:	2201      	movs	r2, #1
 8001b44:	4803      	ldr	r0, [pc, #12]	; (8001b54 <__io_putchar+0x20>)
 8001b46:	f003 fd43 	bl	80055d0 <HAL_UART_Transmit>
  return ch;
 8001b4a:	687b      	ldr	r3, [r7, #4]
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	200002e8 	.word	0x200002e8

08001b58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001b58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b90 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b5c:	f7ff fe00 	bl	8001760 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b60:	480c      	ldr	r0, [pc, #48]	; (8001b94 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b62:	490d      	ldr	r1, [pc, #52]	; (8001b98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b64:	4a0d      	ldr	r2, [pc, #52]	; (8001b9c <LoopForever+0xe>)
  movs r3, #0
 8001b66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b68:	e002      	b.n	8001b70 <LoopCopyDataInit>

08001b6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b6e:	3304      	adds	r3, #4

08001b70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b74:	d3f9      	bcc.n	8001b6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b76:	4a0a      	ldr	r2, [pc, #40]	; (8001ba0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b78:	4c0a      	ldr	r4, [pc, #40]	; (8001ba4 <LoopForever+0x16>)
  movs r3, #0
 8001b7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b7c:	e001      	b.n	8001b82 <LoopFillZerobss>

08001b7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b80:	3204      	adds	r2, #4

08001b82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b84:	d3fb      	bcc.n	8001b7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b86:	f005 f889 	bl	8006c9c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b8a:	f7ff fb7b 	bl	8001284 <main>

08001b8e <LoopForever>:

LoopForever:
    b LoopForever
 8001b8e:	e7fe      	b.n	8001b8e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001b90:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001b94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b98:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001b9c:	08007ed8 	.word	0x08007ed8
  ldr r2, =_sbss
 8001ba0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001ba4:	20000410 	.word	0x20000410

08001ba8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ba8:	e7fe      	b.n	8001ba8 <ADC1_2_IRQHandler>

08001baa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b082      	sub	sp, #8
 8001bae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bb4:	2003      	movs	r0, #3
 8001bb6:	f000 f961 	bl	8001e7c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bba:	2000      	movs	r0, #0
 8001bbc:	f000 f80e 	bl	8001bdc <HAL_InitTick>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d002      	beq.n	8001bcc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	71fb      	strb	r3, [r7, #7]
 8001bca:	e001      	b.n	8001bd0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001bcc:	f7ff fc6c 	bl	80014a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001bd0:	79fb      	ldrb	r3, [r7, #7]
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
	...

08001bdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001be4:	2300      	movs	r3, #0
 8001be6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001be8:	4b17      	ldr	r3, [pc, #92]	; (8001c48 <HAL_InitTick+0x6c>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d023      	beq.n	8001c38 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001bf0:	4b16      	ldr	r3, [pc, #88]	; (8001c4c <HAL_InitTick+0x70>)
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	4b14      	ldr	r3, [pc, #80]	; (8001c48 <HAL_InitTick+0x6c>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c06:	4618      	mov	r0, r3
 8001c08:	f000 f96d 	bl	8001ee6 <HAL_SYSTICK_Config>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d10f      	bne.n	8001c32 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2b0f      	cmp	r3, #15
 8001c16:	d809      	bhi.n	8001c2c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c18:	2200      	movs	r2, #0
 8001c1a:	6879      	ldr	r1, [r7, #4]
 8001c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c20:	f000 f937 	bl	8001e92 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c24:	4a0a      	ldr	r2, [pc, #40]	; (8001c50 <HAL_InitTick+0x74>)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6013      	str	r3, [r2, #0]
 8001c2a:	e007      	b.n	8001c3c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	73fb      	strb	r3, [r7, #15]
 8001c30:	e004      	b.n	8001c3c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	73fb      	strb	r3, [r7, #15]
 8001c36:	e001      	b.n	8001c3c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3710      	adds	r7, #16
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	2000000c 	.word	0x2000000c
 8001c4c:	20000004 	.word	0x20000004
 8001c50:	20000008 	.word	0x20000008

08001c54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c58:	4b06      	ldr	r3, [pc, #24]	; (8001c74 <HAL_IncTick+0x20>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	4b06      	ldr	r3, [pc, #24]	; (8001c78 <HAL_IncTick+0x24>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4413      	add	r3, r2
 8001c64:	4a04      	ldr	r2, [pc, #16]	; (8001c78 <HAL_IncTick+0x24>)
 8001c66:	6013      	str	r3, [r2, #0]
}
 8001c68:	bf00      	nop
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	2000000c 	.word	0x2000000c
 8001c78:	200003fc 	.word	0x200003fc

08001c7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c80:	4b03      	ldr	r3, [pc, #12]	; (8001c90 <HAL_GetTick+0x14>)
 8001c82:	681b      	ldr	r3, [r3, #0]
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	200003fc 	.word	0x200003fc

08001c94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c9c:	f7ff ffee 	bl	8001c7c <HAL_GetTick>
 8001ca0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cac:	d005      	beq.n	8001cba <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001cae:	4b0a      	ldr	r3, [pc, #40]	; (8001cd8 <HAL_Delay+0x44>)
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cba:	bf00      	nop
 8001cbc:	f7ff ffde 	bl	8001c7c <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	68fa      	ldr	r2, [r7, #12]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d8f7      	bhi.n	8001cbc <HAL_Delay+0x28>
  {
  }
}
 8001ccc:	bf00      	nop
 8001cce:	bf00      	nop
 8001cd0:	3710      	adds	r7, #16
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	2000000c 	.word	0x2000000c

08001cdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b085      	sub	sp, #20
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f003 0307 	and.w	r3, r3, #7
 8001cea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cec:	4b0c      	ldr	r3, [pc, #48]	; (8001d20 <__NVIC_SetPriorityGrouping+0x44>)
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cf2:	68ba      	ldr	r2, [r7, #8]
 8001cf4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d0e:	4a04      	ldr	r2, [pc, #16]	; (8001d20 <__NVIC_SetPriorityGrouping+0x44>)
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	60d3      	str	r3, [r2, #12]
}
 8001d14:	bf00      	nop
 8001d16:	3714      	adds	r7, #20
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr
 8001d20:	e000ed00 	.word	0xe000ed00

08001d24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d28:	4b04      	ldr	r3, [pc, #16]	; (8001d3c <__NVIC_GetPriorityGrouping+0x18>)
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	0a1b      	lsrs	r3, r3, #8
 8001d2e:	f003 0307 	and.w	r3, r3, #7
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr
 8001d3c:	e000ed00 	.word	0xe000ed00

08001d40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	db0b      	blt.n	8001d6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d52:	79fb      	ldrb	r3, [r7, #7]
 8001d54:	f003 021f 	and.w	r2, r3, #31
 8001d58:	4907      	ldr	r1, [pc, #28]	; (8001d78 <__NVIC_EnableIRQ+0x38>)
 8001d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5e:	095b      	lsrs	r3, r3, #5
 8001d60:	2001      	movs	r0, #1
 8001d62:	fa00 f202 	lsl.w	r2, r0, r2
 8001d66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d6a:	bf00      	nop
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	e000e100 	.word	0xe000e100

08001d7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	4603      	mov	r3, r0
 8001d84:	6039      	str	r1, [r7, #0]
 8001d86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	db0a      	blt.n	8001da6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	b2da      	uxtb	r2, r3
 8001d94:	490c      	ldr	r1, [pc, #48]	; (8001dc8 <__NVIC_SetPriority+0x4c>)
 8001d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9a:	0112      	lsls	r2, r2, #4
 8001d9c:	b2d2      	uxtb	r2, r2
 8001d9e:	440b      	add	r3, r1
 8001da0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001da4:	e00a      	b.n	8001dbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	b2da      	uxtb	r2, r3
 8001daa:	4908      	ldr	r1, [pc, #32]	; (8001dcc <__NVIC_SetPriority+0x50>)
 8001dac:	79fb      	ldrb	r3, [r7, #7]
 8001dae:	f003 030f 	and.w	r3, r3, #15
 8001db2:	3b04      	subs	r3, #4
 8001db4:	0112      	lsls	r2, r2, #4
 8001db6:	b2d2      	uxtb	r2, r2
 8001db8:	440b      	add	r3, r1
 8001dba:	761a      	strb	r2, [r3, #24]
}
 8001dbc:	bf00      	nop
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr
 8001dc8:	e000e100 	.word	0xe000e100
 8001dcc:	e000ed00 	.word	0xe000ed00

08001dd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b089      	sub	sp, #36	; 0x24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f003 0307 	and.w	r3, r3, #7
 8001de2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	f1c3 0307 	rsb	r3, r3, #7
 8001dea:	2b04      	cmp	r3, #4
 8001dec:	bf28      	it	cs
 8001dee:	2304      	movcs	r3, #4
 8001df0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	3304      	adds	r3, #4
 8001df6:	2b06      	cmp	r3, #6
 8001df8:	d902      	bls.n	8001e00 <NVIC_EncodePriority+0x30>
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	3b03      	subs	r3, #3
 8001dfe:	e000      	b.n	8001e02 <NVIC_EncodePriority+0x32>
 8001e00:	2300      	movs	r3, #0
 8001e02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e04:	f04f 32ff 	mov.w	r2, #4294967295
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0e:	43da      	mvns	r2, r3
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	401a      	ands	r2, r3
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e18:	f04f 31ff 	mov.w	r1, #4294967295
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e22:	43d9      	mvns	r1, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e28:	4313      	orrs	r3, r2
         );
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3724      	adds	r7, #36	; 0x24
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
	...

08001e38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	3b01      	subs	r3, #1
 8001e44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e48:	d301      	bcc.n	8001e4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e00f      	b.n	8001e6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e4e:	4a0a      	ldr	r2, [pc, #40]	; (8001e78 <SysTick_Config+0x40>)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	3b01      	subs	r3, #1
 8001e54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e56:	210f      	movs	r1, #15
 8001e58:	f04f 30ff 	mov.w	r0, #4294967295
 8001e5c:	f7ff ff8e 	bl	8001d7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e60:	4b05      	ldr	r3, [pc, #20]	; (8001e78 <SysTick_Config+0x40>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e66:	4b04      	ldr	r3, [pc, #16]	; (8001e78 <SysTick_Config+0x40>)
 8001e68:	2207      	movs	r2, #7
 8001e6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	e000e010 	.word	0xe000e010

08001e7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f7ff ff29 	bl	8001cdc <__NVIC_SetPriorityGrouping>
}
 8001e8a:	bf00      	nop
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b086      	sub	sp, #24
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	4603      	mov	r3, r0
 8001e9a:	60b9      	str	r1, [r7, #8]
 8001e9c:	607a      	str	r2, [r7, #4]
 8001e9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ea4:	f7ff ff3e 	bl	8001d24 <__NVIC_GetPriorityGrouping>
 8001ea8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	68b9      	ldr	r1, [r7, #8]
 8001eae:	6978      	ldr	r0, [r7, #20]
 8001eb0:	f7ff ff8e 	bl	8001dd0 <NVIC_EncodePriority>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eba:	4611      	mov	r1, r2
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7ff ff5d 	bl	8001d7c <__NVIC_SetPriority>
}
 8001ec2:	bf00      	nop
 8001ec4:	3718      	adds	r7, #24
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b082      	sub	sp, #8
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7ff ff31 	bl	8001d40 <__NVIC_EnableIRQ>
}
 8001ede:	bf00      	nop
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	b082      	sub	sp, #8
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f7ff ffa2 	bl	8001e38 <SysTick_Config>
 8001ef4:	4603      	mov	r3, r0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
	...

08001f00 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d101      	bne.n	8001f12 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e098      	b.n	8002044 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	461a      	mov	r2, r3
 8001f18:	4b4d      	ldr	r3, [pc, #308]	; (8002050 <HAL_DMA_Init+0x150>)
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d80f      	bhi.n	8001f3e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	461a      	mov	r2, r3
 8001f24:	4b4b      	ldr	r3, [pc, #300]	; (8002054 <HAL_DMA_Init+0x154>)
 8001f26:	4413      	add	r3, r2
 8001f28:	4a4b      	ldr	r2, [pc, #300]	; (8002058 <HAL_DMA_Init+0x158>)
 8001f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f2e:	091b      	lsrs	r3, r3, #4
 8001f30:	009a      	lsls	r2, r3, #2
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a48      	ldr	r2, [pc, #288]	; (800205c <HAL_DMA_Init+0x15c>)
 8001f3a:	641a      	str	r2, [r3, #64]	; 0x40
 8001f3c:	e00e      	b.n	8001f5c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	461a      	mov	r2, r3
 8001f44:	4b46      	ldr	r3, [pc, #280]	; (8002060 <HAL_DMA_Init+0x160>)
 8001f46:	4413      	add	r3, r2
 8001f48:	4a43      	ldr	r2, [pc, #268]	; (8002058 <HAL_DMA_Init+0x158>)
 8001f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f4e:	091b      	lsrs	r3, r3, #4
 8001f50:	009a      	lsls	r2, r3, #2
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a42      	ldr	r2, [pc, #264]	; (8002064 <HAL_DMA_Init+0x164>)
 8001f5a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2202      	movs	r2, #2
 8001f60:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001f72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f76:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001f80:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6a1b      	ldr	r3, [r3, #32]
 8001f9e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001fa0:	68fa      	ldr	r2, [r7, #12]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	68fa      	ldr	r2, [r7, #12]
 8001fac:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001fb6:	d039      	beq.n	800202c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbc:	4a27      	ldr	r2, [pc, #156]	; (800205c <HAL_DMA_Init+0x15c>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d11a      	bne.n	8001ff8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001fc2:	4b29      	ldr	r3, [pc, #164]	; (8002068 <HAL_DMA_Init+0x168>)
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fca:	f003 031c 	and.w	r3, r3, #28
 8001fce:	210f      	movs	r1, #15
 8001fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	4924      	ldr	r1, [pc, #144]	; (8002068 <HAL_DMA_Init+0x168>)
 8001fd8:	4013      	ands	r3, r2
 8001fda:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001fdc:	4b22      	ldr	r3, [pc, #136]	; (8002068 <HAL_DMA_Init+0x168>)
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6859      	ldr	r1, [r3, #4]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe8:	f003 031c 	and.w	r3, r3, #28
 8001fec:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff0:	491d      	ldr	r1, [pc, #116]	; (8002068 <HAL_DMA_Init+0x168>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	600b      	str	r3, [r1, #0]
 8001ff6:	e019      	b.n	800202c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001ff8:	4b1c      	ldr	r3, [pc, #112]	; (800206c <HAL_DMA_Init+0x16c>)
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002000:	f003 031c 	and.w	r3, r3, #28
 8002004:	210f      	movs	r1, #15
 8002006:	fa01 f303 	lsl.w	r3, r1, r3
 800200a:	43db      	mvns	r3, r3
 800200c:	4917      	ldr	r1, [pc, #92]	; (800206c <HAL_DMA_Init+0x16c>)
 800200e:	4013      	ands	r3, r2
 8002010:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002012:	4b16      	ldr	r3, [pc, #88]	; (800206c <HAL_DMA_Init+0x16c>)
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6859      	ldr	r1, [r3, #4]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201e:	f003 031c 	and.w	r3, r3, #28
 8002022:	fa01 f303 	lsl.w	r3, r1, r3
 8002026:	4911      	ldr	r1, [pc, #68]	; (800206c <HAL_DMA_Init+0x16c>)
 8002028:	4313      	orrs	r3, r2
 800202a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2201      	movs	r2, #1
 8002036:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002042:	2300      	movs	r3, #0
}
 8002044:	4618      	mov	r0, r3
 8002046:	3714      	adds	r7, #20
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr
 8002050:	40020407 	.word	0x40020407
 8002054:	bffdfff8 	.word	0xbffdfff8
 8002058:	cccccccd 	.word	0xcccccccd
 800205c:	40020000 	.word	0x40020000
 8002060:	bffdfbf8 	.word	0xbffdfbf8
 8002064:	40020400 	.word	0x40020400
 8002068:	400200a8 	.word	0x400200a8
 800206c:	400204a8 	.word	0x400204a8

08002070 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b086      	sub	sp, #24
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]
 800207c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800207e:	2300      	movs	r3, #0
 8002080:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002088:	2b01      	cmp	r3, #1
 800208a:	d101      	bne.n	8002090 <HAL_DMA_Start_IT+0x20>
 800208c:	2302      	movs	r3, #2
 800208e:	e04b      	b.n	8002128 <HAL_DMA_Start_IT+0xb8>
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d13a      	bne.n	800211a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2202      	movs	r2, #2
 80020a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2200      	movs	r2, #0
 80020b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f022 0201 	bic.w	r2, r2, #1
 80020c0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	68b9      	ldr	r1, [r7, #8]
 80020c8:	68f8      	ldr	r0, [r7, #12]
 80020ca:	f000 f96b 	bl	80023a4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d008      	beq.n	80020e8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f042 020e 	orr.w	r2, r2, #14
 80020e4:	601a      	str	r2, [r3, #0]
 80020e6:	e00f      	b.n	8002108 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f022 0204 	bic.w	r2, r2, #4
 80020f6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f042 020a 	orr.w	r2, r2, #10
 8002106:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f042 0201 	orr.w	r2, r2, #1
 8002116:	601a      	str	r2, [r3, #0]
 8002118:	e005      	b.n	8002126 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2200      	movs	r2, #0
 800211e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002122:	2302      	movs	r3, #2
 8002124:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002126:	7dfb      	ldrb	r3, [r7, #23]
}
 8002128:	4618      	mov	r0, r3
 800212a:	3718      	adds	r7, #24
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002130:	b480      	push	{r7}
 8002132:	b085      	sub	sp, #20
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002138:	2300      	movs	r3, #0
 800213a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002142:	b2db      	uxtb	r3, r3
 8002144:	2b02      	cmp	r3, #2
 8002146:	d008      	beq.n	800215a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2204      	movs	r2, #4
 800214c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e022      	b.n	80021a0 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f022 020e 	bic.w	r2, r2, #14
 8002168:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f022 0201 	bic.w	r2, r2, #1
 8002178:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217e:	f003 021c 	and.w	r2, r3, #28
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002186:	2101      	movs	r1, #1
 8002188:	fa01 f202 	lsl.w	r2, r1, r2
 800218c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2201      	movs	r2, #1
 8002192:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800219e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3714      	adds	r7, #20
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021b4:	2300      	movs	r3, #0
 80021b6:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d005      	beq.n	80021d0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2204      	movs	r2, #4
 80021c8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	73fb      	strb	r3, [r7, #15]
 80021ce:	e029      	b.n	8002224 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f022 020e 	bic.w	r2, r2, #14
 80021de:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f022 0201 	bic.w	r2, r2, #1
 80021ee:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f4:	f003 021c 	and.w	r2, r3, #28
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fc:	2101      	movs	r1, #1
 80021fe:	fa01 f202 	lsl.w	r2, r1, r2
 8002202:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2201      	movs	r2, #1
 8002208:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002218:	2b00      	cmp	r3, #0
 800221a:	d003      	beq.n	8002224 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	4798      	blx	r3
    }
  }
  return status;
 8002224:	7bfb      	ldrb	r3, [r7, #15]
}
 8002226:	4618      	mov	r0, r3
 8002228:	3710      	adds	r7, #16
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800222e:	b580      	push	{r7, lr}
 8002230:	b084      	sub	sp, #16
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800224a:	f003 031c 	and.w	r3, r3, #28
 800224e:	2204      	movs	r2, #4
 8002250:	409a      	lsls	r2, r3
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	4013      	ands	r3, r2
 8002256:	2b00      	cmp	r3, #0
 8002258:	d026      	beq.n	80022a8 <HAL_DMA_IRQHandler+0x7a>
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	f003 0304 	and.w	r3, r3, #4
 8002260:	2b00      	cmp	r3, #0
 8002262:	d021      	beq.n	80022a8 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0320 	and.w	r3, r3, #32
 800226e:	2b00      	cmp	r3, #0
 8002270:	d107      	bne.n	8002282 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f022 0204 	bic.w	r2, r2, #4
 8002280:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002286:	f003 021c 	and.w	r2, r3, #28
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	2104      	movs	r1, #4
 8002290:	fa01 f202 	lsl.w	r2, r1, r2
 8002294:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229a:	2b00      	cmp	r3, #0
 800229c:	d071      	beq.n	8002382 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80022a6:	e06c      	b.n	8002382 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ac:	f003 031c 	and.w	r3, r3, #28
 80022b0:	2202      	movs	r2, #2
 80022b2:	409a      	lsls	r2, r3
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	4013      	ands	r3, r2
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d02e      	beq.n	800231a <HAL_DMA_IRQHandler+0xec>
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d029      	beq.n	800231a <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0320 	and.w	r3, r3, #32
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d10b      	bne.n	80022ec <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f022 020a 	bic.w	r2, r2, #10
 80022e2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f0:	f003 021c 	and.w	r2, r3, #28
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f8:	2102      	movs	r1, #2
 80022fa:	fa01 f202 	lsl.w	r2, r1, r2
 80022fe:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2200      	movs	r2, #0
 8002304:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800230c:	2b00      	cmp	r3, #0
 800230e:	d038      	beq.n	8002382 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002318:	e033      	b.n	8002382 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800231e:	f003 031c 	and.w	r3, r3, #28
 8002322:	2208      	movs	r2, #8
 8002324:	409a      	lsls	r2, r3
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	4013      	ands	r3, r2
 800232a:	2b00      	cmp	r3, #0
 800232c:	d02a      	beq.n	8002384 <HAL_DMA_IRQHandler+0x156>
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	f003 0308 	and.w	r3, r3, #8
 8002334:	2b00      	cmp	r3, #0
 8002336:	d025      	beq.n	8002384 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f022 020e 	bic.w	r2, r2, #14
 8002346:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234c:	f003 021c 	and.w	r2, r3, #28
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002354:	2101      	movs	r1, #1
 8002356:	fa01 f202 	lsl.w	r2, r1, r2
 800235a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2201      	movs	r2, #1
 8002366:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002376:	2b00      	cmp	r3, #0
 8002378:	d004      	beq.n	8002384 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002382:	bf00      	nop
 8002384:	bf00      	nop
}
 8002386:	3710      	adds	r7, #16
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}

0800238c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8002398:	4618      	mov	r0, r3
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b085      	sub	sp, #20
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
 80023b0:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b6:	f003 021c 	and.w	r2, r3, #28
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023be:	2101      	movs	r1, #1
 80023c0:	fa01 f202 	lsl.w	r2, r1, r2
 80023c4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	683a      	ldr	r2, [r7, #0]
 80023cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	2b10      	cmp	r3, #16
 80023d4:	d108      	bne.n	80023e8 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68ba      	ldr	r2, [r7, #8]
 80023e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80023e6:	e007      	b.n	80023f8 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	68ba      	ldr	r2, [r7, #8]
 80023ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	60da      	str	r2, [r3, #12]
}
 80023f8:	bf00      	nop
 80023fa:	3714      	adds	r7, #20
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002404:	b480      	push	{r7}
 8002406:	b087      	sub	sp, #28
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800240e:	2300      	movs	r3, #0
 8002410:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002412:	e166      	b.n	80026e2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	2101      	movs	r1, #1
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	fa01 f303 	lsl.w	r3, r1, r3
 8002420:	4013      	ands	r3, r2
 8002422:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2b00      	cmp	r3, #0
 8002428:	f000 8158 	beq.w	80026dc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f003 0303 	and.w	r3, r3, #3
 8002434:	2b01      	cmp	r3, #1
 8002436:	d005      	beq.n	8002444 <HAL_GPIO_Init+0x40>
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f003 0303 	and.w	r3, r3, #3
 8002440:	2b02      	cmp	r3, #2
 8002442:	d130      	bne.n	80024a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	005b      	lsls	r3, r3, #1
 800244e:	2203      	movs	r2, #3
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	43db      	mvns	r3, r3
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	4013      	ands	r3, r2
 800245a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	68da      	ldr	r2, [r3, #12]
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	693a      	ldr	r2, [r7, #16]
 800246a:	4313      	orrs	r3, r2
 800246c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	693a      	ldr	r2, [r7, #16]
 8002472:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800247a:	2201      	movs	r2, #1
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	fa02 f303 	lsl.w	r3, r2, r3
 8002482:	43db      	mvns	r3, r3
 8002484:	693a      	ldr	r2, [r7, #16]
 8002486:	4013      	ands	r3, r2
 8002488:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	091b      	lsrs	r3, r3, #4
 8002490:	f003 0201 	and.w	r2, r3, #1
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	fa02 f303 	lsl.w	r3, r2, r3
 800249a:	693a      	ldr	r2, [r7, #16]
 800249c:	4313      	orrs	r3, r2
 800249e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f003 0303 	and.w	r3, r3, #3
 80024ae:	2b03      	cmp	r3, #3
 80024b0:	d017      	beq.n	80024e2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	2203      	movs	r2, #3
 80024be:	fa02 f303 	lsl.w	r3, r2, r3
 80024c2:	43db      	mvns	r3, r3
 80024c4:	693a      	ldr	r2, [r7, #16]
 80024c6:	4013      	ands	r3, r2
 80024c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	689a      	ldr	r2, [r3, #8]
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	fa02 f303 	lsl.w	r3, r2, r3
 80024d6:	693a      	ldr	r2, [r7, #16]
 80024d8:	4313      	orrs	r3, r2
 80024da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f003 0303 	and.w	r3, r3, #3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d123      	bne.n	8002536 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	08da      	lsrs	r2, r3, #3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	3208      	adds	r2, #8
 80024f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	f003 0307 	and.w	r3, r3, #7
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	220f      	movs	r2, #15
 8002506:	fa02 f303 	lsl.w	r3, r2, r3
 800250a:	43db      	mvns	r3, r3
 800250c:	693a      	ldr	r2, [r7, #16]
 800250e:	4013      	ands	r3, r2
 8002510:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	691a      	ldr	r2, [r3, #16]
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	f003 0307 	and.w	r3, r3, #7
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	fa02 f303 	lsl.w	r3, r2, r3
 8002522:	693a      	ldr	r2, [r7, #16]
 8002524:	4313      	orrs	r3, r2
 8002526:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	08da      	lsrs	r2, r3, #3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	3208      	adds	r2, #8
 8002530:	6939      	ldr	r1, [r7, #16]
 8002532:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	005b      	lsls	r3, r3, #1
 8002540:	2203      	movs	r2, #3
 8002542:	fa02 f303 	lsl.w	r3, r2, r3
 8002546:	43db      	mvns	r3, r3
 8002548:	693a      	ldr	r2, [r7, #16]
 800254a:	4013      	ands	r3, r2
 800254c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f003 0203 	and.w	r2, r3, #3
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	fa02 f303 	lsl.w	r3, r2, r3
 800255e:	693a      	ldr	r2, [r7, #16]
 8002560:	4313      	orrs	r3, r2
 8002562:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	693a      	ldr	r2, [r7, #16]
 8002568:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002572:	2b00      	cmp	r3, #0
 8002574:	f000 80b2 	beq.w	80026dc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002578:	4b61      	ldr	r3, [pc, #388]	; (8002700 <HAL_GPIO_Init+0x2fc>)
 800257a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800257c:	4a60      	ldr	r2, [pc, #384]	; (8002700 <HAL_GPIO_Init+0x2fc>)
 800257e:	f043 0301 	orr.w	r3, r3, #1
 8002582:	6613      	str	r3, [r2, #96]	; 0x60
 8002584:	4b5e      	ldr	r3, [pc, #376]	; (8002700 <HAL_GPIO_Init+0x2fc>)
 8002586:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002588:	f003 0301 	and.w	r3, r3, #1
 800258c:	60bb      	str	r3, [r7, #8]
 800258e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002590:	4a5c      	ldr	r2, [pc, #368]	; (8002704 <HAL_GPIO_Init+0x300>)
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	089b      	lsrs	r3, r3, #2
 8002596:	3302      	adds	r3, #2
 8002598:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800259c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	f003 0303 	and.w	r3, r3, #3
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	220f      	movs	r2, #15
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	43db      	mvns	r3, r3
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	4013      	ands	r3, r2
 80025b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80025ba:	d02b      	beq.n	8002614 <HAL_GPIO_Init+0x210>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4a52      	ldr	r2, [pc, #328]	; (8002708 <HAL_GPIO_Init+0x304>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d025      	beq.n	8002610 <HAL_GPIO_Init+0x20c>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4a51      	ldr	r2, [pc, #324]	; (800270c <HAL_GPIO_Init+0x308>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d01f      	beq.n	800260c <HAL_GPIO_Init+0x208>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	4a50      	ldr	r2, [pc, #320]	; (8002710 <HAL_GPIO_Init+0x30c>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d019      	beq.n	8002608 <HAL_GPIO_Init+0x204>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4a4f      	ldr	r2, [pc, #316]	; (8002714 <HAL_GPIO_Init+0x310>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d013      	beq.n	8002604 <HAL_GPIO_Init+0x200>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	4a4e      	ldr	r2, [pc, #312]	; (8002718 <HAL_GPIO_Init+0x314>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d00d      	beq.n	8002600 <HAL_GPIO_Init+0x1fc>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4a4d      	ldr	r2, [pc, #308]	; (800271c <HAL_GPIO_Init+0x318>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d007      	beq.n	80025fc <HAL_GPIO_Init+0x1f8>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4a4c      	ldr	r2, [pc, #304]	; (8002720 <HAL_GPIO_Init+0x31c>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d101      	bne.n	80025f8 <HAL_GPIO_Init+0x1f4>
 80025f4:	2307      	movs	r3, #7
 80025f6:	e00e      	b.n	8002616 <HAL_GPIO_Init+0x212>
 80025f8:	2308      	movs	r3, #8
 80025fa:	e00c      	b.n	8002616 <HAL_GPIO_Init+0x212>
 80025fc:	2306      	movs	r3, #6
 80025fe:	e00a      	b.n	8002616 <HAL_GPIO_Init+0x212>
 8002600:	2305      	movs	r3, #5
 8002602:	e008      	b.n	8002616 <HAL_GPIO_Init+0x212>
 8002604:	2304      	movs	r3, #4
 8002606:	e006      	b.n	8002616 <HAL_GPIO_Init+0x212>
 8002608:	2303      	movs	r3, #3
 800260a:	e004      	b.n	8002616 <HAL_GPIO_Init+0x212>
 800260c:	2302      	movs	r3, #2
 800260e:	e002      	b.n	8002616 <HAL_GPIO_Init+0x212>
 8002610:	2301      	movs	r3, #1
 8002612:	e000      	b.n	8002616 <HAL_GPIO_Init+0x212>
 8002614:	2300      	movs	r3, #0
 8002616:	697a      	ldr	r2, [r7, #20]
 8002618:	f002 0203 	and.w	r2, r2, #3
 800261c:	0092      	lsls	r2, r2, #2
 800261e:	4093      	lsls	r3, r2
 8002620:	693a      	ldr	r2, [r7, #16]
 8002622:	4313      	orrs	r3, r2
 8002624:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002626:	4937      	ldr	r1, [pc, #220]	; (8002704 <HAL_GPIO_Init+0x300>)
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	089b      	lsrs	r3, r3, #2
 800262c:	3302      	adds	r3, #2
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002634:	4b3b      	ldr	r3, [pc, #236]	; (8002724 <HAL_GPIO_Init+0x320>)
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	43db      	mvns	r3, r3
 800263e:	693a      	ldr	r2, [r7, #16]
 8002640:	4013      	ands	r3, r2
 8002642:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d003      	beq.n	8002658 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	4313      	orrs	r3, r2
 8002656:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002658:	4a32      	ldr	r2, [pc, #200]	; (8002724 <HAL_GPIO_Init+0x320>)
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800265e:	4b31      	ldr	r3, [pc, #196]	; (8002724 <HAL_GPIO_Init+0x320>)
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	43db      	mvns	r3, r3
 8002668:	693a      	ldr	r2, [r7, #16]
 800266a:	4013      	ands	r3, r2
 800266c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d003      	beq.n	8002682 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	4313      	orrs	r3, r2
 8002680:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002682:	4a28      	ldr	r2, [pc, #160]	; (8002724 <HAL_GPIO_Init+0x320>)
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002688:	4b26      	ldr	r3, [pc, #152]	; (8002724 <HAL_GPIO_Init+0x320>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	43db      	mvns	r3, r3
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	4013      	ands	r3, r2
 8002696:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d003      	beq.n	80026ac <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80026ac:	4a1d      	ldr	r2, [pc, #116]	; (8002724 <HAL_GPIO_Init+0x320>)
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80026b2:	4b1c      	ldr	r3, [pc, #112]	; (8002724 <HAL_GPIO_Init+0x320>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	43db      	mvns	r3, r3
 80026bc:	693a      	ldr	r2, [r7, #16]
 80026be:	4013      	ands	r3, r2
 80026c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d003      	beq.n	80026d6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80026ce:	693a      	ldr	r2, [r7, #16]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80026d6:	4a13      	ldr	r2, [pc, #76]	; (8002724 <HAL_GPIO_Init+0x320>)
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	3301      	adds	r3, #1
 80026e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	fa22 f303 	lsr.w	r3, r2, r3
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	f47f ae91 	bne.w	8002414 <HAL_GPIO_Init+0x10>
  }
}
 80026f2:	bf00      	nop
 80026f4:	bf00      	nop
 80026f6:	371c      	adds	r7, #28
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr
 8002700:	40021000 	.word	0x40021000
 8002704:	40010000 	.word	0x40010000
 8002708:	48000400 	.word	0x48000400
 800270c:	48000800 	.word	0x48000800
 8002710:	48000c00 	.word	0x48000c00
 8002714:	48001000 	.word	0x48001000
 8002718:	48001400 	.word	0x48001400
 800271c:	48001800 	.word	0x48001800
 8002720:	48001c00 	.word	0x48001c00
 8002724:	40010400 	.word	0x40010400

08002728 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	460b      	mov	r3, r1
 8002732:	807b      	strh	r3, [r7, #2]
 8002734:	4613      	mov	r3, r2
 8002736:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002738:	787b      	ldrb	r3, [r7, #1]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d003      	beq.n	8002746 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800273e:	887a      	ldrh	r2, [r7, #2]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002744:	e002      	b.n	800274c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002746:	887a      	ldrh	r2, [r7, #2]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800274c:	bf00      	nop
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr

08002758 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	4603      	mov	r3, r0
 8002760:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002762:	4b08      	ldr	r3, [pc, #32]	; (8002784 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002764:	695a      	ldr	r2, [r3, #20]
 8002766:	88fb      	ldrh	r3, [r7, #6]
 8002768:	4013      	ands	r3, r2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d006      	beq.n	800277c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800276e:	4a05      	ldr	r2, [pc, #20]	; (8002784 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002770:	88fb      	ldrh	r3, [r7, #6]
 8002772:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002774:	88fb      	ldrh	r3, [r7, #6]
 8002776:	4618      	mov	r0, r3
 8002778:	f7fe fd70 	bl	800125c <HAL_GPIO_EXTI_Callback>
  }
}
 800277c:	bf00      	nop
 800277e:	3708      	adds	r7, #8
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	40010400 	.word	0x40010400

08002788 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800278c:	4b04      	ldr	r3, [pc, #16]	; (80027a0 <HAL_PWREx_GetVoltageRange+0x18>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002794:	4618      	mov	r0, r3
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	40007000 	.word	0x40007000

080027a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b085      	sub	sp, #20
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027b2:	d130      	bne.n	8002816 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80027b4:	4b23      	ldr	r3, [pc, #140]	; (8002844 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80027bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027c0:	d038      	beq.n	8002834 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80027c2:	4b20      	ldr	r3, [pc, #128]	; (8002844 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80027ca:	4a1e      	ldr	r2, [pc, #120]	; (8002844 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027d0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80027d2:	4b1d      	ldr	r3, [pc, #116]	; (8002848 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2232      	movs	r2, #50	; 0x32
 80027d8:	fb02 f303 	mul.w	r3, r2, r3
 80027dc:	4a1b      	ldr	r2, [pc, #108]	; (800284c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80027de:	fba2 2303 	umull	r2, r3, r2, r3
 80027e2:	0c9b      	lsrs	r3, r3, #18
 80027e4:	3301      	adds	r3, #1
 80027e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027e8:	e002      	b.n	80027f0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	3b01      	subs	r3, #1
 80027ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027f0:	4b14      	ldr	r3, [pc, #80]	; (8002844 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027f2:	695b      	ldr	r3, [r3, #20]
 80027f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027fc:	d102      	bne.n	8002804 <HAL_PWREx_ControlVoltageScaling+0x60>
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d1f2      	bne.n	80027ea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002804:	4b0f      	ldr	r3, [pc, #60]	; (8002844 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002806:	695b      	ldr	r3, [r3, #20]
 8002808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800280c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002810:	d110      	bne.n	8002834 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e00f      	b.n	8002836 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002816:	4b0b      	ldr	r3, [pc, #44]	; (8002844 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800281e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002822:	d007      	beq.n	8002834 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002824:	4b07      	ldr	r3, [pc, #28]	; (8002844 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800282c:	4a05      	ldr	r2, [pc, #20]	; (8002844 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800282e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002832:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3714      	adds	r7, #20
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	40007000 	.word	0x40007000
 8002848:	20000004 	.word	0x20000004
 800284c:	431bde83 	.word	0x431bde83

08002850 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b088      	sub	sp, #32
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d102      	bne.n	8002864 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	f000 bc08 	b.w	8003074 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002864:	4b96      	ldr	r3, [pc, #600]	; (8002ac0 <HAL_RCC_OscConfig+0x270>)
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f003 030c 	and.w	r3, r3, #12
 800286c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800286e:	4b94      	ldr	r3, [pc, #592]	; (8002ac0 <HAL_RCC_OscConfig+0x270>)
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	f003 0303 	and.w	r3, r3, #3
 8002876:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0310 	and.w	r3, r3, #16
 8002880:	2b00      	cmp	r3, #0
 8002882:	f000 80e4 	beq.w	8002a4e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d007      	beq.n	800289c <HAL_RCC_OscConfig+0x4c>
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	2b0c      	cmp	r3, #12
 8002890:	f040 808b 	bne.w	80029aa <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	2b01      	cmp	r3, #1
 8002898:	f040 8087 	bne.w	80029aa <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800289c:	4b88      	ldr	r3, [pc, #544]	; (8002ac0 <HAL_RCC_OscConfig+0x270>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0302 	and.w	r3, r3, #2
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d005      	beq.n	80028b4 <HAL_RCC_OscConfig+0x64>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d101      	bne.n	80028b4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e3df      	b.n	8003074 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a1a      	ldr	r2, [r3, #32]
 80028b8:	4b81      	ldr	r3, [pc, #516]	; (8002ac0 <HAL_RCC_OscConfig+0x270>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0308 	and.w	r3, r3, #8
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d004      	beq.n	80028ce <HAL_RCC_OscConfig+0x7e>
 80028c4:	4b7e      	ldr	r3, [pc, #504]	; (8002ac0 <HAL_RCC_OscConfig+0x270>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028cc:	e005      	b.n	80028da <HAL_RCC_OscConfig+0x8a>
 80028ce:	4b7c      	ldr	r3, [pc, #496]	; (8002ac0 <HAL_RCC_OscConfig+0x270>)
 80028d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028d4:	091b      	lsrs	r3, r3, #4
 80028d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028da:	4293      	cmp	r3, r2
 80028dc:	d223      	bcs.n	8002926 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a1b      	ldr	r3, [r3, #32]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f000 fd92 	bl	800340c <RCC_SetFlashLatencyFromMSIRange>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e3c0      	b.n	8003074 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028f2:	4b73      	ldr	r3, [pc, #460]	; (8002ac0 <HAL_RCC_OscConfig+0x270>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a72      	ldr	r2, [pc, #456]	; (8002ac0 <HAL_RCC_OscConfig+0x270>)
 80028f8:	f043 0308 	orr.w	r3, r3, #8
 80028fc:	6013      	str	r3, [r2, #0]
 80028fe:	4b70      	ldr	r3, [pc, #448]	; (8002ac0 <HAL_RCC_OscConfig+0x270>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a1b      	ldr	r3, [r3, #32]
 800290a:	496d      	ldr	r1, [pc, #436]	; (8002ac0 <HAL_RCC_OscConfig+0x270>)
 800290c:	4313      	orrs	r3, r2
 800290e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002910:	4b6b      	ldr	r3, [pc, #428]	; (8002ac0 <HAL_RCC_OscConfig+0x270>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	69db      	ldr	r3, [r3, #28]
 800291c:	021b      	lsls	r3, r3, #8
 800291e:	4968      	ldr	r1, [pc, #416]	; (8002ac0 <HAL_RCC_OscConfig+0x270>)
 8002920:	4313      	orrs	r3, r2
 8002922:	604b      	str	r3, [r1, #4]
 8002924:	e025      	b.n	8002972 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002926:	4b66      	ldr	r3, [pc, #408]	; (8002ac0 <HAL_RCC_OscConfig+0x270>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a65      	ldr	r2, [pc, #404]	; (8002ac0 <HAL_RCC_OscConfig+0x270>)
 800292c:	f043 0308 	orr.w	r3, r3, #8
 8002930:	6013      	str	r3, [r2, #0]
 8002932:	4b63      	ldr	r3, [pc, #396]	; (8002ac0 <HAL_RCC_OscConfig+0x270>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a1b      	ldr	r3, [r3, #32]
 800293e:	4960      	ldr	r1, [pc, #384]	; (8002ac0 <HAL_RCC_OscConfig+0x270>)
 8002940:	4313      	orrs	r3, r2
 8002942:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002944:	4b5e      	ldr	r3, [pc, #376]	; (8002ac0 <HAL_RCC_OscConfig+0x270>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	69db      	ldr	r3, [r3, #28]
 8002950:	021b      	lsls	r3, r3, #8
 8002952:	495b      	ldr	r1, [pc, #364]	; (8002ac0 <HAL_RCC_OscConfig+0x270>)
 8002954:	4313      	orrs	r3, r2
 8002956:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d109      	bne.n	8002972 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a1b      	ldr	r3, [r3, #32]
 8002962:	4618      	mov	r0, r3
 8002964:	f000 fd52 	bl	800340c <RCC_SetFlashLatencyFromMSIRange>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e380      	b.n	8003074 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002972:	f000 fc87 	bl	8003284 <HAL_RCC_GetSysClockFreq>
 8002976:	4602      	mov	r2, r0
 8002978:	4b51      	ldr	r3, [pc, #324]	; (8002ac0 <HAL_RCC_OscConfig+0x270>)
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	091b      	lsrs	r3, r3, #4
 800297e:	f003 030f 	and.w	r3, r3, #15
 8002982:	4950      	ldr	r1, [pc, #320]	; (8002ac4 <HAL_RCC_OscConfig+0x274>)
 8002984:	5ccb      	ldrb	r3, [r1, r3]
 8002986:	f003 031f 	and.w	r3, r3, #31
 800298a:	fa22 f303 	lsr.w	r3, r2, r3
 800298e:	4a4e      	ldr	r2, [pc, #312]	; (8002ac8 <HAL_RCC_OscConfig+0x278>)
 8002990:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002992:	4b4e      	ldr	r3, [pc, #312]	; (8002acc <HAL_RCC_OscConfig+0x27c>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4618      	mov	r0, r3
 8002998:	f7ff f920 	bl	8001bdc <HAL_InitTick>
 800299c:	4603      	mov	r3, r0
 800299e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80029a0:	7bfb      	ldrb	r3, [r7, #15]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d052      	beq.n	8002a4c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80029a6:	7bfb      	ldrb	r3, [r7, #15]
 80029a8:	e364      	b.n	8003074 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d032      	beq.n	8002a18 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80029b2:	4b43      	ldr	r3, [pc, #268]	; (8002ac0 <HAL_RCC_OscConfig+0x270>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a42      	ldr	r2, [pc, #264]	; (8002ac0 <HAL_RCC_OscConfig+0x270>)
 80029b8:	f043 0301 	orr.w	r3, r3, #1
 80029bc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80029be:	f7ff f95d 	bl	8001c7c <HAL_GetTick>
 80029c2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029c4:	e008      	b.n	80029d8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029c6:	f7ff f959 	bl	8001c7c <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d901      	bls.n	80029d8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e34d      	b.n	8003074 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029d8:	4b39      	ldr	r3, [pc, #228]	; (8002ac0 <HAL_RCC_OscConfig+0x270>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0302 	and.w	r3, r3, #2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d0f0      	beq.n	80029c6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029e4:	4b36      	ldr	r3, [pc, #216]	; (8002ac0 <HAL_RCC_OscConfig+0x270>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a35      	ldr	r2, [pc, #212]	; (8002ac0 <HAL_RCC_OscConfig+0x270>)
 80029ea:	f043 0308 	orr.w	r3, r3, #8
 80029ee:	6013      	str	r3, [r2, #0]
 80029f0:	4b33      	ldr	r3, [pc, #204]	; (8002ac0 <HAL_RCC_OscConfig+0x270>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6a1b      	ldr	r3, [r3, #32]
 80029fc:	4930      	ldr	r1, [pc, #192]	; (8002ac0 <HAL_RCC_OscConfig+0x270>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a02:	4b2f      	ldr	r3, [pc, #188]	; (8002ac0 <HAL_RCC_OscConfig+0x270>)
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	69db      	ldr	r3, [r3, #28]
 8002a0e:	021b      	lsls	r3, r3, #8
 8002a10:	492b      	ldr	r1, [pc, #172]	; (8002ac0 <HAL_RCC_OscConfig+0x270>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	604b      	str	r3, [r1, #4]
 8002a16:	e01a      	b.n	8002a4e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a18:	4b29      	ldr	r3, [pc, #164]	; (8002ac0 <HAL_RCC_OscConfig+0x270>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a28      	ldr	r2, [pc, #160]	; (8002ac0 <HAL_RCC_OscConfig+0x270>)
 8002a1e:	f023 0301 	bic.w	r3, r3, #1
 8002a22:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a24:	f7ff f92a 	bl	8001c7c <HAL_GetTick>
 8002a28:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a2a:	e008      	b.n	8002a3e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a2c:	f7ff f926 	bl	8001c7c <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e31a      	b.n	8003074 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a3e:	4b20      	ldr	r3, [pc, #128]	; (8002ac0 <HAL_RCC_OscConfig+0x270>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d1f0      	bne.n	8002a2c <HAL_RCC_OscConfig+0x1dc>
 8002a4a:	e000      	b.n	8002a4e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a4c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d073      	beq.n	8002b42 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	2b08      	cmp	r3, #8
 8002a5e:	d005      	beq.n	8002a6c <HAL_RCC_OscConfig+0x21c>
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	2b0c      	cmp	r3, #12
 8002a64:	d10e      	bne.n	8002a84 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	2b03      	cmp	r3, #3
 8002a6a:	d10b      	bne.n	8002a84 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a6c:	4b14      	ldr	r3, [pc, #80]	; (8002ac0 <HAL_RCC_OscConfig+0x270>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d063      	beq.n	8002b40 <HAL_RCC_OscConfig+0x2f0>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d15f      	bne.n	8002b40 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e2f7      	b.n	8003074 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a8c:	d106      	bne.n	8002a9c <HAL_RCC_OscConfig+0x24c>
 8002a8e:	4b0c      	ldr	r3, [pc, #48]	; (8002ac0 <HAL_RCC_OscConfig+0x270>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a0b      	ldr	r2, [pc, #44]	; (8002ac0 <HAL_RCC_OscConfig+0x270>)
 8002a94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a98:	6013      	str	r3, [r2, #0]
 8002a9a:	e025      	b.n	8002ae8 <HAL_RCC_OscConfig+0x298>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002aa4:	d114      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x280>
 8002aa6:	4b06      	ldr	r3, [pc, #24]	; (8002ac0 <HAL_RCC_OscConfig+0x270>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a05      	ldr	r2, [pc, #20]	; (8002ac0 <HAL_RCC_OscConfig+0x270>)
 8002aac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ab0:	6013      	str	r3, [r2, #0]
 8002ab2:	4b03      	ldr	r3, [pc, #12]	; (8002ac0 <HAL_RCC_OscConfig+0x270>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a02      	ldr	r2, [pc, #8]	; (8002ac0 <HAL_RCC_OscConfig+0x270>)
 8002ab8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002abc:	6013      	str	r3, [r2, #0]
 8002abe:	e013      	b.n	8002ae8 <HAL_RCC_OscConfig+0x298>
 8002ac0:	40021000 	.word	0x40021000
 8002ac4:	08007de8 	.word	0x08007de8
 8002ac8:	20000004 	.word	0x20000004
 8002acc:	20000008 	.word	0x20000008
 8002ad0:	4ba0      	ldr	r3, [pc, #640]	; (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a9f      	ldr	r2, [pc, #636]	; (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002ad6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ada:	6013      	str	r3, [r2, #0]
 8002adc:	4b9d      	ldr	r3, [pc, #628]	; (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a9c      	ldr	r2, [pc, #624]	; (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002ae2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ae6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d013      	beq.n	8002b18 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af0:	f7ff f8c4 	bl	8001c7c <HAL_GetTick>
 8002af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002af6:	e008      	b.n	8002b0a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002af8:	f7ff f8c0 	bl	8001c7c <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b64      	cmp	r3, #100	; 0x64
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e2b4      	b.n	8003074 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b0a:	4b92      	ldr	r3, [pc, #584]	; (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d0f0      	beq.n	8002af8 <HAL_RCC_OscConfig+0x2a8>
 8002b16:	e014      	b.n	8002b42 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b18:	f7ff f8b0 	bl	8001c7c <HAL_GetTick>
 8002b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b1e:	e008      	b.n	8002b32 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b20:	f7ff f8ac 	bl	8001c7c <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b64      	cmp	r3, #100	; 0x64
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e2a0      	b.n	8003074 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b32:	4b88      	ldr	r3, [pc, #544]	; (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1f0      	bne.n	8002b20 <HAL_RCC_OscConfig+0x2d0>
 8002b3e:	e000      	b.n	8002b42 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d060      	beq.n	8002c10 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	2b04      	cmp	r3, #4
 8002b52:	d005      	beq.n	8002b60 <HAL_RCC_OscConfig+0x310>
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	2b0c      	cmp	r3, #12
 8002b58:	d119      	bne.n	8002b8e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d116      	bne.n	8002b8e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b60:	4b7c      	ldr	r3, [pc, #496]	; (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d005      	beq.n	8002b78 <HAL_RCC_OscConfig+0x328>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d101      	bne.n	8002b78 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e27d      	b.n	8003074 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b78:	4b76      	ldr	r3, [pc, #472]	; (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	691b      	ldr	r3, [r3, #16]
 8002b84:	061b      	lsls	r3, r3, #24
 8002b86:	4973      	ldr	r1, [pc, #460]	; (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b8c:	e040      	b.n	8002c10 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d023      	beq.n	8002bde <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b96:	4b6f      	ldr	r3, [pc, #444]	; (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a6e      	ldr	r2, [pc, #440]	; (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002b9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ba0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba2:	f7ff f86b 	bl	8001c7c <HAL_GetTick>
 8002ba6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ba8:	e008      	b.n	8002bbc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002baa:	f7ff f867 	bl	8001c7c <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d901      	bls.n	8002bbc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e25b      	b.n	8003074 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bbc:	4b65      	ldr	r3, [pc, #404]	; (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d0f0      	beq.n	8002baa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bc8:	4b62      	ldr	r3, [pc, #392]	; (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	691b      	ldr	r3, [r3, #16]
 8002bd4:	061b      	lsls	r3, r3, #24
 8002bd6:	495f      	ldr	r1, [pc, #380]	; (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	604b      	str	r3, [r1, #4]
 8002bdc:	e018      	b.n	8002c10 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bde:	4b5d      	ldr	r3, [pc, #372]	; (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a5c      	ldr	r2, [pc, #368]	; (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002be4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002be8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bea:	f7ff f847 	bl	8001c7c <HAL_GetTick>
 8002bee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002bf0:	e008      	b.n	8002c04 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bf2:	f7ff f843 	bl	8001c7c <HAL_GetTick>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d901      	bls.n	8002c04 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002c00:	2303      	movs	r3, #3
 8002c02:	e237      	b.n	8003074 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c04:	4b53      	ldr	r3, [pc, #332]	; (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d1f0      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0308 	and.w	r3, r3, #8
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d03c      	beq.n	8002c96 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	695b      	ldr	r3, [r3, #20]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d01c      	beq.n	8002c5e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c24:	4b4b      	ldr	r3, [pc, #300]	; (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002c26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c2a:	4a4a      	ldr	r2, [pc, #296]	; (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002c2c:	f043 0301 	orr.w	r3, r3, #1
 8002c30:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c34:	f7ff f822 	bl	8001c7c <HAL_GetTick>
 8002c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c3a:	e008      	b.n	8002c4e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c3c:	f7ff f81e 	bl	8001c7c <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e212      	b.n	8003074 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c4e:	4b41      	ldr	r3, [pc, #260]	; (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002c50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c54:	f003 0302 	and.w	r3, r3, #2
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d0ef      	beq.n	8002c3c <HAL_RCC_OscConfig+0x3ec>
 8002c5c:	e01b      	b.n	8002c96 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c5e:	4b3d      	ldr	r3, [pc, #244]	; (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002c60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c64:	4a3b      	ldr	r2, [pc, #236]	; (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002c66:	f023 0301 	bic.w	r3, r3, #1
 8002c6a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c6e:	f7ff f805 	bl	8001c7c <HAL_GetTick>
 8002c72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c74:	e008      	b.n	8002c88 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c76:	f7ff f801 	bl	8001c7c <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d901      	bls.n	8002c88 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e1f5      	b.n	8003074 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c88:	4b32      	ldr	r3, [pc, #200]	; (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002c8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d1ef      	bne.n	8002c76 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0304 	and.w	r3, r3, #4
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	f000 80a6 	beq.w	8002df0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002ca8:	4b2a      	ldr	r3, [pc, #168]	; (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d10d      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cb4:	4b27      	ldr	r3, [pc, #156]	; (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cb8:	4a26      	ldr	r2, [pc, #152]	; (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002cba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cbe:	6593      	str	r3, [r2, #88]	; 0x58
 8002cc0:	4b24      	ldr	r3, [pc, #144]	; (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cc8:	60bb      	str	r3, [r7, #8]
 8002cca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cd0:	4b21      	ldr	r3, [pc, #132]	; (8002d58 <HAL_RCC_OscConfig+0x508>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d118      	bne.n	8002d0e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002cdc:	4b1e      	ldr	r3, [pc, #120]	; (8002d58 <HAL_RCC_OscConfig+0x508>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a1d      	ldr	r2, [pc, #116]	; (8002d58 <HAL_RCC_OscConfig+0x508>)
 8002ce2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ce6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ce8:	f7fe ffc8 	bl	8001c7c <HAL_GetTick>
 8002cec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cee:	e008      	b.n	8002d02 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cf0:	f7fe ffc4 	bl	8001c7c <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e1b8      	b.n	8003074 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d02:	4b15      	ldr	r3, [pc, #84]	; (8002d58 <HAL_RCC_OscConfig+0x508>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d0f0      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d108      	bne.n	8002d28 <HAL_RCC_OscConfig+0x4d8>
 8002d16:	4b0f      	ldr	r3, [pc, #60]	; (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d1c:	4a0d      	ldr	r2, [pc, #52]	; (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002d1e:	f043 0301 	orr.w	r3, r3, #1
 8002d22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d26:	e029      	b.n	8002d7c <HAL_RCC_OscConfig+0x52c>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	2b05      	cmp	r3, #5
 8002d2e:	d115      	bne.n	8002d5c <HAL_RCC_OscConfig+0x50c>
 8002d30:	4b08      	ldr	r3, [pc, #32]	; (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d36:	4a07      	ldr	r2, [pc, #28]	; (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002d38:	f043 0304 	orr.w	r3, r3, #4
 8002d3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d40:	4b04      	ldr	r3, [pc, #16]	; (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d46:	4a03      	ldr	r2, [pc, #12]	; (8002d54 <HAL_RCC_OscConfig+0x504>)
 8002d48:	f043 0301 	orr.w	r3, r3, #1
 8002d4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d50:	e014      	b.n	8002d7c <HAL_RCC_OscConfig+0x52c>
 8002d52:	bf00      	nop
 8002d54:	40021000 	.word	0x40021000
 8002d58:	40007000 	.word	0x40007000
 8002d5c:	4b9d      	ldr	r3, [pc, #628]	; (8002fd4 <HAL_RCC_OscConfig+0x784>)
 8002d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d62:	4a9c      	ldr	r2, [pc, #624]	; (8002fd4 <HAL_RCC_OscConfig+0x784>)
 8002d64:	f023 0301 	bic.w	r3, r3, #1
 8002d68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d6c:	4b99      	ldr	r3, [pc, #612]	; (8002fd4 <HAL_RCC_OscConfig+0x784>)
 8002d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d72:	4a98      	ldr	r2, [pc, #608]	; (8002fd4 <HAL_RCC_OscConfig+0x784>)
 8002d74:	f023 0304 	bic.w	r3, r3, #4
 8002d78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d016      	beq.n	8002db2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d84:	f7fe ff7a 	bl	8001c7c <HAL_GetTick>
 8002d88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d8a:	e00a      	b.n	8002da2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d8c:	f7fe ff76 	bl	8001c7c <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e168      	b.n	8003074 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002da2:	4b8c      	ldr	r3, [pc, #560]	; (8002fd4 <HAL_RCC_OscConfig+0x784>)
 8002da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d0ed      	beq.n	8002d8c <HAL_RCC_OscConfig+0x53c>
 8002db0:	e015      	b.n	8002dde <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002db2:	f7fe ff63 	bl	8001c7c <HAL_GetTick>
 8002db6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002db8:	e00a      	b.n	8002dd0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dba:	f7fe ff5f 	bl	8001c7c <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d901      	bls.n	8002dd0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e151      	b.n	8003074 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002dd0:	4b80      	ldr	r3, [pc, #512]	; (8002fd4 <HAL_RCC_OscConfig+0x784>)
 8002dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1ed      	bne.n	8002dba <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002dde:	7ffb      	ldrb	r3, [r7, #31]
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d105      	bne.n	8002df0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002de4:	4b7b      	ldr	r3, [pc, #492]	; (8002fd4 <HAL_RCC_OscConfig+0x784>)
 8002de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002de8:	4a7a      	ldr	r2, [pc, #488]	; (8002fd4 <HAL_RCC_OscConfig+0x784>)
 8002dea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dee:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0320 	and.w	r3, r3, #32
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d03c      	beq.n	8002e76 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d01c      	beq.n	8002e3e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002e04:	4b73      	ldr	r3, [pc, #460]	; (8002fd4 <HAL_RCC_OscConfig+0x784>)
 8002e06:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e0a:	4a72      	ldr	r2, [pc, #456]	; (8002fd4 <HAL_RCC_OscConfig+0x784>)
 8002e0c:	f043 0301 	orr.w	r3, r3, #1
 8002e10:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e14:	f7fe ff32 	bl	8001c7c <HAL_GetTick>
 8002e18:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e1a:	e008      	b.n	8002e2e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e1c:	f7fe ff2e 	bl	8001c7c <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e122      	b.n	8003074 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e2e:	4b69      	ldr	r3, [pc, #420]	; (8002fd4 <HAL_RCC_OscConfig+0x784>)
 8002e30:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e34:	f003 0302 	and.w	r3, r3, #2
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d0ef      	beq.n	8002e1c <HAL_RCC_OscConfig+0x5cc>
 8002e3c:	e01b      	b.n	8002e76 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002e3e:	4b65      	ldr	r3, [pc, #404]	; (8002fd4 <HAL_RCC_OscConfig+0x784>)
 8002e40:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e44:	4a63      	ldr	r2, [pc, #396]	; (8002fd4 <HAL_RCC_OscConfig+0x784>)
 8002e46:	f023 0301 	bic.w	r3, r3, #1
 8002e4a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e4e:	f7fe ff15 	bl	8001c7c <HAL_GetTick>
 8002e52:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002e54:	e008      	b.n	8002e68 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e56:	f7fe ff11 	bl	8001c7c <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d901      	bls.n	8002e68 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e105      	b.n	8003074 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002e68:	4b5a      	ldr	r3, [pc, #360]	; (8002fd4 <HAL_RCC_OscConfig+0x784>)
 8002e6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e6e:	f003 0302 	and.w	r3, r3, #2
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1ef      	bne.n	8002e56 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	f000 80f9 	beq.w	8003072 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	f040 80cf 	bne.w	8003028 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002e8a:	4b52      	ldr	r3, [pc, #328]	; (8002fd4 <HAL_RCC_OscConfig+0x784>)
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	f003 0203 	and.w	r2, r3, #3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d12c      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea8:	3b01      	subs	r3, #1
 8002eaa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d123      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eba:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d11b      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eca:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d113      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eda:	085b      	lsrs	r3, r3, #1
 8002edc:	3b01      	subs	r3, #1
 8002ede:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d109      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eee:	085b      	lsrs	r3, r3, #1
 8002ef0:	3b01      	subs	r3, #1
 8002ef2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d071      	beq.n	8002fdc <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	2b0c      	cmp	r3, #12
 8002efc:	d068      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002efe:	4b35      	ldr	r3, [pc, #212]	; (8002fd4 <HAL_RCC_OscConfig+0x784>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d105      	bne.n	8002f16 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002f0a:	4b32      	ldr	r3, [pc, #200]	; (8002fd4 <HAL_RCC_OscConfig+0x784>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e0ac      	b.n	8003074 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002f1a:	4b2e      	ldr	r3, [pc, #184]	; (8002fd4 <HAL_RCC_OscConfig+0x784>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a2d      	ldr	r2, [pc, #180]	; (8002fd4 <HAL_RCC_OscConfig+0x784>)
 8002f20:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f24:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f26:	f7fe fea9 	bl	8001c7c <HAL_GetTick>
 8002f2a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f2c:	e008      	b.n	8002f40 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f2e:	f7fe fea5 	bl	8001c7c <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d901      	bls.n	8002f40 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e099      	b.n	8003074 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f40:	4b24      	ldr	r3, [pc, #144]	; (8002fd4 <HAL_RCC_OscConfig+0x784>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d1f0      	bne.n	8002f2e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f4c:	4b21      	ldr	r3, [pc, #132]	; (8002fd4 <HAL_RCC_OscConfig+0x784>)
 8002f4e:	68da      	ldr	r2, [r3, #12]
 8002f50:	4b21      	ldr	r3, [pc, #132]	; (8002fd8 <HAL_RCC_OscConfig+0x788>)
 8002f52:	4013      	ands	r3, r2
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002f5c:	3a01      	subs	r2, #1
 8002f5e:	0112      	lsls	r2, r2, #4
 8002f60:	4311      	orrs	r1, r2
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f66:	0212      	lsls	r2, r2, #8
 8002f68:	4311      	orrs	r1, r2
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002f6e:	0852      	lsrs	r2, r2, #1
 8002f70:	3a01      	subs	r2, #1
 8002f72:	0552      	lsls	r2, r2, #21
 8002f74:	4311      	orrs	r1, r2
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002f7a:	0852      	lsrs	r2, r2, #1
 8002f7c:	3a01      	subs	r2, #1
 8002f7e:	0652      	lsls	r2, r2, #25
 8002f80:	4311      	orrs	r1, r2
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f86:	06d2      	lsls	r2, r2, #27
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	4912      	ldr	r1, [pc, #72]	; (8002fd4 <HAL_RCC_OscConfig+0x784>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002f90:	4b10      	ldr	r3, [pc, #64]	; (8002fd4 <HAL_RCC_OscConfig+0x784>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a0f      	ldr	r2, [pc, #60]	; (8002fd4 <HAL_RCC_OscConfig+0x784>)
 8002f96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f9a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f9c:	4b0d      	ldr	r3, [pc, #52]	; (8002fd4 <HAL_RCC_OscConfig+0x784>)
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	4a0c      	ldr	r2, [pc, #48]	; (8002fd4 <HAL_RCC_OscConfig+0x784>)
 8002fa2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fa6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002fa8:	f7fe fe68 	bl	8001c7c <HAL_GetTick>
 8002fac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fae:	e008      	b.n	8002fc2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fb0:	f7fe fe64 	bl	8001c7c <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e058      	b.n	8003074 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fc2:	4b04      	ldr	r3, [pc, #16]	; (8002fd4 <HAL_RCC_OscConfig+0x784>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d0f0      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002fce:	e050      	b.n	8003072 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e04f      	b.n	8003074 <HAL_RCC_OscConfig+0x824>
 8002fd4:	40021000 	.word	0x40021000
 8002fd8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fdc:	4b27      	ldr	r3, [pc, #156]	; (800307c <HAL_RCC_OscConfig+0x82c>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d144      	bne.n	8003072 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002fe8:	4b24      	ldr	r3, [pc, #144]	; (800307c <HAL_RCC_OscConfig+0x82c>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a23      	ldr	r2, [pc, #140]	; (800307c <HAL_RCC_OscConfig+0x82c>)
 8002fee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ff2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ff4:	4b21      	ldr	r3, [pc, #132]	; (800307c <HAL_RCC_OscConfig+0x82c>)
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	4a20      	ldr	r2, [pc, #128]	; (800307c <HAL_RCC_OscConfig+0x82c>)
 8002ffa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ffe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003000:	f7fe fe3c 	bl	8001c7c <HAL_GetTick>
 8003004:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003006:	e008      	b.n	800301a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003008:	f7fe fe38 	bl	8001c7c <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b02      	cmp	r3, #2
 8003014:	d901      	bls.n	800301a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e02c      	b.n	8003074 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800301a:	4b18      	ldr	r3, [pc, #96]	; (800307c <HAL_RCC_OscConfig+0x82c>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d0f0      	beq.n	8003008 <HAL_RCC_OscConfig+0x7b8>
 8003026:	e024      	b.n	8003072 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	2b0c      	cmp	r3, #12
 800302c:	d01f      	beq.n	800306e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800302e:	4b13      	ldr	r3, [pc, #76]	; (800307c <HAL_RCC_OscConfig+0x82c>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a12      	ldr	r2, [pc, #72]	; (800307c <HAL_RCC_OscConfig+0x82c>)
 8003034:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003038:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800303a:	f7fe fe1f 	bl	8001c7c <HAL_GetTick>
 800303e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003040:	e008      	b.n	8003054 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003042:	f7fe fe1b 	bl	8001c7c <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	2b02      	cmp	r3, #2
 800304e:	d901      	bls.n	8003054 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	e00f      	b.n	8003074 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003054:	4b09      	ldr	r3, [pc, #36]	; (800307c <HAL_RCC_OscConfig+0x82c>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d1f0      	bne.n	8003042 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003060:	4b06      	ldr	r3, [pc, #24]	; (800307c <HAL_RCC_OscConfig+0x82c>)
 8003062:	68da      	ldr	r2, [r3, #12]
 8003064:	4905      	ldr	r1, [pc, #20]	; (800307c <HAL_RCC_OscConfig+0x82c>)
 8003066:	4b06      	ldr	r3, [pc, #24]	; (8003080 <HAL_RCC_OscConfig+0x830>)
 8003068:	4013      	ands	r3, r2
 800306a:	60cb      	str	r3, [r1, #12]
 800306c:	e001      	b.n	8003072 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e000      	b.n	8003074 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003072:	2300      	movs	r3, #0
}
 8003074:	4618      	mov	r0, r3
 8003076:	3720      	adds	r7, #32
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	40021000 	.word	0x40021000
 8003080:	feeefffc 	.word	0xfeeefffc

08003084 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d101      	bne.n	8003098 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e0e7      	b.n	8003268 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003098:	4b75      	ldr	r3, [pc, #468]	; (8003270 <HAL_RCC_ClockConfig+0x1ec>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0307 	and.w	r3, r3, #7
 80030a0:	683a      	ldr	r2, [r7, #0]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d910      	bls.n	80030c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030a6:	4b72      	ldr	r3, [pc, #456]	; (8003270 <HAL_RCC_ClockConfig+0x1ec>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f023 0207 	bic.w	r2, r3, #7
 80030ae:	4970      	ldr	r1, [pc, #448]	; (8003270 <HAL_RCC_ClockConfig+0x1ec>)
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030b6:	4b6e      	ldr	r3, [pc, #440]	; (8003270 <HAL_RCC_ClockConfig+0x1ec>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0307 	and.w	r3, r3, #7
 80030be:	683a      	ldr	r2, [r7, #0]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d001      	beq.n	80030c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e0cf      	b.n	8003268 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0302 	and.w	r3, r3, #2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d010      	beq.n	80030f6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689a      	ldr	r2, [r3, #8]
 80030d8:	4b66      	ldr	r3, [pc, #408]	; (8003274 <HAL_RCC_ClockConfig+0x1f0>)
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d908      	bls.n	80030f6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030e4:	4b63      	ldr	r3, [pc, #396]	; (8003274 <HAL_RCC_ClockConfig+0x1f0>)
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	4960      	ldr	r1, [pc, #384]	; (8003274 <HAL_RCC_ClockConfig+0x1f0>)
 80030f2:	4313      	orrs	r3, r2
 80030f4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d04c      	beq.n	800319c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	2b03      	cmp	r3, #3
 8003108:	d107      	bne.n	800311a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800310a:	4b5a      	ldr	r3, [pc, #360]	; (8003274 <HAL_RCC_ClockConfig+0x1f0>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d121      	bne.n	800315a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e0a6      	b.n	8003268 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	2b02      	cmp	r3, #2
 8003120:	d107      	bne.n	8003132 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003122:	4b54      	ldr	r3, [pc, #336]	; (8003274 <HAL_RCC_ClockConfig+0x1f0>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d115      	bne.n	800315a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e09a      	b.n	8003268 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d107      	bne.n	800314a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800313a:	4b4e      	ldr	r3, [pc, #312]	; (8003274 <HAL_RCC_ClockConfig+0x1f0>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0302 	and.w	r3, r3, #2
 8003142:	2b00      	cmp	r3, #0
 8003144:	d109      	bne.n	800315a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e08e      	b.n	8003268 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800314a:	4b4a      	ldr	r3, [pc, #296]	; (8003274 <HAL_RCC_ClockConfig+0x1f0>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003152:	2b00      	cmp	r3, #0
 8003154:	d101      	bne.n	800315a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e086      	b.n	8003268 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800315a:	4b46      	ldr	r3, [pc, #280]	; (8003274 <HAL_RCC_ClockConfig+0x1f0>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f023 0203 	bic.w	r2, r3, #3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	4943      	ldr	r1, [pc, #268]	; (8003274 <HAL_RCC_ClockConfig+0x1f0>)
 8003168:	4313      	orrs	r3, r2
 800316a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800316c:	f7fe fd86 	bl	8001c7c <HAL_GetTick>
 8003170:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003172:	e00a      	b.n	800318a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003174:	f7fe fd82 	bl	8001c7c <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003182:	4293      	cmp	r3, r2
 8003184:	d901      	bls.n	800318a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e06e      	b.n	8003268 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800318a:	4b3a      	ldr	r3, [pc, #232]	; (8003274 <HAL_RCC_ClockConfig+0x1f0>)
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f003 020c 	and.w	r2, r3, #12
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	429a      	cmp	r2, r3
 800319a:	d1eb      	bne.n	8003174 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0302 	and.w	r3, r3, #2
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d010      	beq.n	80031ca <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	689a      	ldr	r2, [r3, #8]
 80031ac:	4b31      	ldr	r3, [pc, #196]	; (8003274 <HAL_RCC_ClockConfig+0x1f0>)
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d208      	bcs.n	80031ca <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031b8:	4b2e      	ldr	r3, [pc, #184]	; (8003274 <HAL_RCC_ClockConfig+0x1f0>)
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	492b      	ldr	r1, [pc, #172]	; (8003274 <HAL_RCC_ClockConfig+0x1f0>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031ca:	4b29      	ldr	r3, [pc, #164]	; (8003270 <HAL_RCC_ClockConfig+0x1ec>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0307 	and.w	r3, r3, #7
 80031d2:	683a      	ldr	r2, [r7, #0]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d210      	bcs.n	80031fa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031d8:	4b25      	ldr	r3, [pc, #148]	; (8003270 <HAL_RCC_ClockConfig+0x1ec>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f023 0207 	bic.w	r2, r3, #7
 80031e0:	4923      	ldr	r1, [pc, #140]	; (8003270 <HAL_RCC_ClockConfig+0x1ec>)
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031e8:	4b21      	ldr	r3, [pc, #132]	; (8003270 <HAL_RCC_ClockConfig+0x1ec>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0307 	and.w	r3, r3, #7
 80031f0:	683a      	ldr	r2, [r7, #0]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d001      	beq.n	80031fa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e036      	b.n	8003268 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0304 	and.w	r3, r3, #4
 8003202:	2b00      	cmp	r3, #0
 8003204:	d008      	beq.n	8003218 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003206:	4b1b      	ldr	r3, [pc, #108]	; (8003274 <HAL_RCC_ClockConfig+0x1f0>)
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	4918      	ldr	r1, [pc, #96]	; (8003274 <HAL_RCC_ClockConfig+0x1f0>)
 8003214:	4313      	orrs	r3, r2
 8003216:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0308 	and.w	r3, r3, #8
 8003220:	2b00      	cmp	r3, #0
 8003222:	d009      	beq.n	8003238 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003224:	4b13      	ldr	r3, [pc, #76]	; (8003274 <HAL_RCC_ClockConfig+0x1f0>)
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	691b      	ldr	r3, [r3, #16]
 8003230:	00db      	lsls	r3, r3, #3
 8003232:	4910      	ldr	r1, [pc, #64]	; (8003274 <HAL_RCC_ClockConfig+0x1f0>)
 8003234:	4313      	orrs	r3, r2
 8003236:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003238:	f000 f824 	bl	8003284 <HAL_RCC_GetSysClockFreq>
 800323c:	4602      	mov	r2, r0
 800323e:	4b0d      	ldr	r3, [pc, #52]	; (8003274 <HAL_RCC_ClockConfig+0x1f0>)
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	091b      	lsrs	r3, r3, #4
 8003244:	f003 030f 	and.w	r3, r3, #15
 8003248:	490b      	ldr	r1, [pc, #44]	; (8003278 <HAL_RCC_ClockConfig+0x1f4>)
 800324a:	5ccb      	ldrb	r3, [r1, r3]
 800324c:	f003 031f 	and.w	r3, r3, #31
 8003250:	fa22 f303 	lsr.w	r3, r2, r3
 8003254:	4a09      	ldr	r2, [pc, #36]	; (800327c <HAL_RCC_ClockConfig+0x1f8>)
 8003256:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003258:	4b09      	ldr	r3, [pc, #36]	; (8003280 <HAL_RCC_ClockConfig+0x1fc>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4618      	mov	r0, r3
 800325e:	f7fe fcbd 	bl	8001bdc <HAL_InitTick>
 8003262:	4603      	mov	r3, r0
 8003264:	72fb      	strb	r3, [r7, #11]

  return status;
 8003266:	7afb      	ldrb	r3, [r7, #11]
}
 8003268:	4618      	mov	r0, r3
 800326a:	3710      	adds	r7, #16
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	40022000 	.word	0x40022000
 8003274:	40021000 	.word	0x40021000
 8003278:	08007de8 	.word	0x08007de8
 800327c:	20000004 	.word	0x20000004
 8003280:	20000008 	.word	0x20000008

08003284 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003284:	b480      	push	{r7}
 8003286:	b089      	sub	sp, #36	; 0x24
 8003288:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800328a:	2300      	movs	r3, #0
 800328c:	61fb      	str	r3, [r7, #28]
 800328e:	2300      	movs	r3, #0
 8003290:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003292:	4b3e      	ldr	r3, [pc, #248]	; (800338c <HAL_RCC_GetSysClockFreq+0x108>)
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f003 030c 	and.w	r3, r3, #12
 800329a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800329c:	4b3b      	ldr	r3, [pc, #236]	; (800338c <HAL_RCC_GetSysClockFreq+0x108>)
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	f003 0303 	and.w	r3, r3, #3
 80032a4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d005      	beq.n	80032b8 <HAL_RCC_GetSysClockFreq+0x34>
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	2b0c      	cmp	r3, #12
 80032b0:	d121      	bne.n	80032f6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d11e      	bne.n	80032f6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80032b8:	4b34      	ldr	r3, [pc, #208]	; (800338c <HAL_RCC_GetSysClockFreq+0x108>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0308 	and.w	r3, r3, #8
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d107      	bne.n	80032d4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80032c4:	4b31      	ldr	r3, [pc, #196]	; (800338c <HAL_RCC_GetSysClockFreq+0x108>)
 80032c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032ca:	0a1b      	lsrs	r3, r3, #8
 80032cc:	f003 030f 	and.w	r3, r3, #15
 80032d0:	61fb      	str	r3, [r7, #28]
 80032d2:	e005      	b.n	80032e0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80032d4:	4b2d      	ldr	r3, [pc, #180]	; (800338c <HAL_RCC_GetSysClockFreq+0x108>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	091b      	lsrs	r3, r3, #4
 80032da:	f003 030f 	and.w	r3, r3, #15
 80032de:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80032e0:	4a2b      	ldr	r2, [pc, #172]	; (8003390 <HAL_RCC_GetSysClockFreq+0x10c>)
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032e8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d10d      	bne.n	800330c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032f4:	e00a      	b.n	800330c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	2b04      	cmp	r3, #4
 80032fa:	d102      	bne.n	8003302 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80032fc:	4b25      	ldr	r3, [pc, #148]	; (8003394 <HAL_RCC_GetSysClockFreq+0x110>)
 80032fe:	61bb      	str	r3, [r7, #24]
 8003300:	e004      	b.n	800330c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	2b08      	cmp	r3, #8
 8003306:	d101      	bne.n	800330c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003308:	4b23      	ldr	r3, [pc, #140]	; (8003398 <HAL_RCC_GetSysClockFreq+0x114>)
 800330a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	2b0c      	cmp	r3, #12
 8003310:	d134      	bne.n	800337c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003312:	4b1e      	ldr	r3, [pc, #120]	; (800338c <HAL_RCC_GetSysClockFreq+0x108>)
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	f003 0303 	and.w	r3, r3, #3
 800331a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	2b02      	cmp	r3, #2
 8003320:	d003      	beq.n	800332a <HAL_RCC_GetSysClockFreq+0xa6>
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	2b03      	cmp	r3, #3
 8003326:	d003      	beq.n	8003330 <HAL_RCC_GetSysClockFreq+0xac>
 8003328:	e005      	b.n	8003336 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800332a:	4b1a      	ldr	r3, [pc, #104]	; (8003394 <HAL_RCC_GetSysClockFreq+0x110>)
 800332c:	617b      	str	r3, [r7, #20]
      break;
 800332e:	e005      	b.n	800333c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003330:	4b19      	ldr	r3, [pc, #100]	; (8003398 <HAL_RCC_GetSysClockFreq+0x114>)
 8003332:	617b      	str	r3, [r7, #20]
      break;
 8003334:	e002      	b.n	800333c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	617b      	str	r3, [r7, #20]
      break;
 800333a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800333c:	4b13      	ldr	r3, [pc, #76]	; (800338c <HAL_RCC_GetSysClockFreq+0x108>)
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	091b      	lsrs	r3, r3, #4
 8003342:	f003 0307 	and.w	r3, r3, #7
 8003346:	3301      	adds	r3, #1
 8003348:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800334a:	4b10      	ldr	r3, [pc, #64]	; (800338c <HAL_RCC_GetSysClockFreq+0x108>)
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	0a1b      	lsrs	r3, r3, #8
 8003350:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003354:	697a      	ldr	r2, [r7, #20]
 8003356:	fb03 f202 	mul.w	r2, r3, r2
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003360:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003362:	4b0a      	ldr	r3, [pc, #40]	; (800338c <HAL_RCC_GetSysClockFreq+0x108>)
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	0e5b      	lsrs	r3, r3, #25
 8003368:	f003 0303 	and.w	r3, r3, #3
 800336c:	3301      	adds	r3, #1
 800336e:	005b      	lsls	r3, r3, #1
 8003370:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003372:	697a      	ldr	r2, [r7, #20]
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	fbb2 f3f3 	udiv	r3, r2, r3
 800337a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800337c:	69bb      	ldr	r3, [r7, #24]
}
 800337e:	4618      	mov	r0, r3
 8003380:	3724      	adds	r7, #36	; 0x24
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop
 800338c:	40021000 	.word	0x40021000
 8003390:	08007e00 	.word	0x08007e00
 8003394:	00f42400 	.word	0x00f42400
 8003398:	016e3600 	.word	0x016e3600

0800339c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800339c:	b480      	push	{r7}
 800339e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033a0:	4b03      	ldr	r3, [pc, #12]	; (80033b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80033a2:	681b      	ldr	r3, [r3, #0]
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	20000004 	.word	0x20000004

080033b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80033b8:	f7ff fff0 	bl	800339c <HAL_RCC_GetHCLKFreq>
 80033bc:	4602      	mov	r2, r0
 80033be:	4b06      	ldr	r3, [pc, #24]	; (80033d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	0a1b      	lsrs	r3, r3, #8
 80033c4:	f003 0307 	and.w	r3, r3, #7
 80033c8:	4904      	ldr	r1, [pc, #16]	; (80033dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80033ca:	5ccb      	ldrb	r3, [r1, r3]
 80033cc:	f003 031f 	and.w	r3, r3, #31
 80033d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	40021000 	.word	0x40021000
 80033dc:	08007df8 	.word	0x08007df8

080033e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80033e4:	f7ff ffda 	bl	800339c <HAL_RCC_GetHCLKFreq>
 80033e8:	4602      	mov	r2, r0
 80033ea:	4b06      	ldr	r3, [pc, #24]	; (8003404 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	0adb      	lsrs	r3, r3, #11
 80033f0:	f003 0307 	and.w	r3, r3, #7
 80033f4:	4904      	ldr	r1, [pc, #16]	; (8003408 <HAL_RCC_GetPCLK2Freq+0x28>)
 80033f6:	5ccb      	ldrb	r3, [r1, r3]
 80033f8:	f003 031f 	and.w	r3, r3, #31
 80033fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003400:	4618      	mov	r0, r3
 8003402:	bd80      	pop	{r7, pc}
 8003404:	40021000 	.word	0x40021000
 8003408:	08007df8 	.word	0x08007df8

0800340c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b086      	sub	sp, #24
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003414:	2300      	movs	r3, #0
 8003416:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003418:	4b2a      	ldr	r3, [pc, #168]	; (80034c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800341a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800341c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d003      	beq.n	800342c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003424:	f7ff f9b0 	bl	8002788 <HAL_PWREx_GetVoltageRange>
 8003428:	6178      	str	r0, [r7, #20]
 800342a:	e014      	b.n	8003456 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800342c:	4b25      	ldr	r3, [pc, #148]	; (80034c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800342e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003430:	4a24      	ldr	r2, [pc, #144]	; (80034c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003432:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003436:	6593      	str	r3, [r2, #88]	; 0x58
 8003438:	4b22      	ldr	r3, [pc, #136]	; (80034c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800343a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800343c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003440:	60fb      	str	r3, [r7, #12]
 8003442:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003444:	f7ff f9a0 	bl	8002788 <HAL_PWREx_GetVoltageRange>
 8003448:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800344a:	4b1e      	ldr	r3, [pc, #120]	; (80034c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800344c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800344e:	4a1d      	ldr	r2, [pc, #116]	; (80034c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003450:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003454:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800345c:	d10b      	bne.n	8003476 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2b80      	cmp	r3, #128	; 0x80
 8003462:	d919      	bls.n	8003498 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2ba0      	cmp	r3, #160	; 0xa0
 8003468:	d902      	bls.n	8003470 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800346a:	2302      	movs	r3, #2
 800346c:	613b      	str	r3, [r7, #16]
 800346e:	e013      	b.n	8003498 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003470:	2301      	movs	r3, #1
 8003472:	613b      	str	r3, [r7, #16]
 8003474:	e010      	b.n	8003498 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2b80      	cmp	r3, #128	; 0x80
 800347a:	d902      	bls.n	8003482 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800347c:	2303      	movs	r3, #3
 800347e:	613b      	str	r3, [r7, #16]
 8003480:	e00a      	b.n	8003498 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2b80      	cmp	r3, #128	; 0x80
 8003486:	d102      	bne.n	800348e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003488:	2302      	movs	r3, #2
 800348a:	613b      	str	r3, [r7, #16]
 800348c:	e004      	b.n	8003498 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2b70      	cmp	r3, #112	; 0x70
 8003492:	d101      	bne.n	8003498 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003494:	2301      	movs	r3, #1
 8003496:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003498:	4b0b      	ldr	r3, [pc, #44]	; (80034c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f023 0207 	bic.w	r2, r3, #7
 80034a0:	4909      	ldr	r1, [pc, #36]	; (80034c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80034a8:	4b07      	ldr	r3, [pc, #28]	; (80034c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0307 	and.w	r3, r3, #7
 80034b0:	693a      	ldr	r2, [r7, #16]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d001      	beq.n	80034ba <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e000      	b.n	80034bc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80034ba:	2300      	movs	r3, #0
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3718      	adds	r7, #24
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	40021000 	.word	0x40021000
 80034c8:	40022000 	.word	0x40022000

080034cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b086      	sub	sp, #24
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80034d4:	2300      	movs	r3, #0
 80034d6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80034d8:	2300      	movs	r3, #0
 80034da:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d041      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034ec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80034f0:	d02a      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80034f2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80034f6:	d824      	bhi.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80034f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80034fc:	d008      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80034fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003502:	d81e      	bhi.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003504:	2b00      	cmp	r3, #0
 8003506:	d00a      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003508:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800350c:	d010      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800350e:	e018      	b.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003510:	4b86      	ldr	r3, [pc, #536]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	4a85      	ldr	r2, [pc, #532]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003516:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800351a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800351c:	e015      	b.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	3304      	adds	r3, #4
 8003522:	2100      	movs	r1, #0
 8003524:	4618      	mov	r0, r3
 8003526:	f000 facd 	bl	8003ac4 <RCCEx_PLLSAI1_Config>
 800352a:	4603      	mov	r3, r0
 800352c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800352e:	e00c      	b.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	3320      	adds	r3, #32
 8003534:	2100      	movs	r1, #0
 8003536:	4618      	mov	r0, r3
 8003538:	f000 fbb6 	bl	8003ca8 <RCCEx_PLLSAI2_Config>
 800353c:	4603      	mov	r3, r0
 800353e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003540:	e003      	b.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	74fb      	strb	r3, [r7, #19]
      break;
 8003546:	e000      	b.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003548:	bf00      	nop
    }

    if(ret == HAL_OK)
 800354a:	7cfb      	ldrb	r3, [r7, #19]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d10b      	bne.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003550:	4b76      	ldr	r3, [pc, #472]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003556:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800355e:	4973      	ldr	r1, [pc, #460]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003560:	4313      	orrs	r3, r2
 8003562:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003566:	e001      	b.n	800356c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003568:	7cfb      	ldrb	r3, [r7, #19]
 800356a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d041      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800357c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003580:	d02a      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003582:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003586:	d824      	bhi.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003588:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800358c:	d008      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800358e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003592:	d81e      	bhi.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003594:	2b00      	cmp	r3, #0
 8003596:	d00a      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003598:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800359c:	d010      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800359e:	e018      	b.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80035a0:	4b62      	ldr	r3, [pc, #392]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	4a61      	ldr	r2, [pc, #388]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035aa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80035ac:	e015      	b.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	3304      	adds	r3, #4
 80035b2:	2100      	movs	r1, #0
 80035b4:	4618      	mov	r0, r3
 80035b6:	f000 fa85 	bl	8003ac4 <RCCEx_PLLSAI1_Config>
 80035ba:	4603      	mov	r3, r0
 80035bc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80035be:	e00c      	b.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	3320      	adds	r3, #32
 80035c4:	2100      	movs	r1, #0
 80035c6:	4618      	mov	r0, r3
 80035c8:	f000 fb6e 	bl	8003ca8 <RCCEx_PLLSAI2_Config>
 80035cc:	4603      	mov	r3, r0
 80035ce:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80035d0:	e003      	b.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	74fb      	strb	r3, [r7, #19]
      break;
 80035d6:	e000      	b.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80035d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035da:	7cfb      	ldrb	r3, [r7, #19]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d10b      	bne.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80035e0:	4b52      	ldr	r3, [pc, #328]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035ee:	494f      	ldr	r1, [pc, #316]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035f0:	4313      	orrs	r3, r2
 80035f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80035f6:	e001      	b.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035f8:	7cfb      	ldrb	r3, [r7, #19]
 80035fa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003604:	2b00      	cmp	r3, #0
 8003606:	f000 80a0 	beq.w	800374a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800360a:	2300      	movs	r3, #0
 800360c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800360e:	4b47      	ldr	r3, [pc, #284]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d101      	bne.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800361a:	2301      	movs	r3, #1
 800361c:	e000      	b.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800361e:	2300      	movs	r3, #0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d00d      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003624:	4b41      	ldr	r3, [pc, #260]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003628:	4a40      	ldr	r2, [pc, #256]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800362a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800362e:	6593      	str	r3, [r2, #88]	; 0x58
 8003630:	4b3e      	ldr	r3, [pc, #248]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003638:	60bb      	str	r3, [r7, #8]
 800363a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800363c:	2301      	movs	r3, #1
 800363e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003640:	4b3b      	ldr	r3, [pc, #236]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a3a      	ldr	r2, [pc, #232]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003646:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800364a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800364c:	f7fe fb16 	bl	8001c7c <HAL_GetTick>
 8003650:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003652:	e009      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003654:	f7fe fb12 	bl	8001c7c <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	2b02      	cmp	r3, #2
 8003660:	d902      	bls.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	74fb      	strb	r3, [r7, #19]
        break;
 8003666:	e005      	b.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003668:	4b31      	ldr	r3, [pc, #196]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003670:	2b00      	cmp	r3, #0
 8003672:	d0ef      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003674:	7cfb      	ldrb	r3, [r7, #19]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d15c      	bne.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800367a:	4b2c      	ldr	r3, [pc, #176]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800367c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003680:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003684:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d01f      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003692:	697a      	ldr	r2, [r7, #20]
 8003694:	429a      	cmp	r2, r3
 8003696:	d019      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003698:	4b24      	ldr	r3, [pc, #144]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800369a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800369e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036a2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80036a4:	4b21      	ldr	r3, [pc, #132]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036aa:	4a20      	ldr	r2, [pc, #128]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80036b4:	4b1d      	ldr	r3, [pc, #116]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ba:	4a1c      	ldr	r2, [pc, #112]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80036c4:	4a19      	ldr	r2, [pc, #100]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	f003 0301 	and.w	r3, r3, #1
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d016      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d6:	f7fe fad1 	bl	8001c7c <HAL_GetTick>
 80036da:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036dc:	e00b      	b.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036de:	f7fe facd 	bl	8001c7c <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d902      	bls.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	74fb      	strb	r3, [r7, #19]
            break;
 80036f4:	e006      	b.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036f6:	4b0d      	ldr	r3, [pc, #52]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036fc:	f003 0302 	and.w	r3, r3, #2
 8003700:	2b00      	cmp	r3, #0
 8003702:	d0ec      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003704:	7cfb      	ldrb	r3, [r7, #19]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d10c      	bne.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800370a:	4b08      	ldr	r3, [pc, #32]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800370c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003710:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800371a:	4904      	ldr	r1, [pc, #16]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800371c:	4313      	orrs	r3, r2
 800371e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003722:	e009      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003724:	7cfb      	ldrb	r3, [r7, #19]
 8003726:	74bb      	strb	r3, [r7, #18]
 8003728:	e006      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800372a:	bf00      	nop
 800372c:	40021000 	.word	0x40021000
 8003730:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003734:	7cfb      	ldrb	r3, [r7, #19]
 8003736:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003738:	7c7b      	ldrb	r3, [r7, #17]
 800373a:	2b01      	cmp	r3, #1
 800373c:	d105      	bne.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800373e:	4ba6      	ldr	r3, [pc, #664]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003742:	4aa5      	ldr	r2, [pc, #660]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003744:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003748:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0301 	and.w	r3, r3, #1
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00a      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003756:	4ba0      	ldr	r3, [pc, #640]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800375c:	f023 0203 	bic.w	r2, r3, #3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003764:	499c      	ldr	r1, [pc, #624]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003766:	4313      	orrs	r3, r2
 8003768:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0302 	and.w	r3, r3, #2
 8003774:	2b00      	cmp	r3, #0
 8003776:	d00a      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003778:	4b97      	ldr	r3, [pc, #604]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800377a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800377e:	f023 020c 	bic.w	r2, r3, #12
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003786:	4994      	ldr	r1, [pc, #592]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003788:	4313      	orrs	r3, r2
 800378a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0304 	and.w	r3, r3, #4
 8003796:	2b00      	cmp	r3, #0
 8003798:	d00a      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800379a:	4b8f      	ldr	r3, [pc, #572]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800379c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037a0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a8:	498b      	ldr	r1, [pc, #556]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0308 	and.w	r3, r3, #8
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d00a      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80037bc:	4b86      	ldr	r3, [pc, #536]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80037be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037c2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ca:	4983      	ldr	r1, [pc, #524]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80037cc:	4313      	orrs	r3, r2
 80037ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0310 	and.w	r3, r3, #16
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d00a      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80037de:	4b7e      	ldr	r3, [pc, #504]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80037e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037ec:	497a      	ldr	r1, [pc, #488]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0320 	and.w	r3, r3, #32
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d00a      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003800:	4b75      	ldr	r3, [pc, #468]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003806:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800380e:	4972      	ldr	r1, [pc, #456]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003810:	4313      	orrs	r3, r2
 8003812:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800381e:	2b00      	cmp	r3, #0
 8003820:	d00a      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003822:	4b6d      	ldr	r3, [pc, #436]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003828:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003830:	4969      	ldr	r1, [pc, #420]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003832:	4313      	orrs	r3, r2
 8003834:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003840:	2b00      	cmp	r3, #0
 8003842:	d00a      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003844:	4b64      	ldr	r3, [pc, #400]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800384a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003852:	4961      	ldr	r1, [pc, #388]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003854:	4313      	orrs	r3, r2
 8003856:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00a      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003866:	4b5c      	ldr	r3, [pc, #368]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800386c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003874:	4958      	ldr	r1, [pc, #352]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003876:	4313      	orrs	r3, r2
 8003878:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00a      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003888:	4b53      	ldr	r3, [pc, #332]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800388a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800388e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003896:	4950      	ldr	r1, [pc, #320]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003898:	4313      	orrs	r3, r2
 800389a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00a      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80038aa:	4b4b      	ldr	r3, [pc, #300]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80038ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b8:	4947      	ldr	r1, [pc, #284]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d00a      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80038cc:	4b42      	ldr	r3, [pc, #264]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80038ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80038d2:	f023 0203 	bic.w	r2, r3, #3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038da:	493f      	ldr	r1, [pc, #252]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80038dc:	4313      	orrs	r3, r2
 80038de:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d028      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038ee:	4b3a      	ldr	r3, [pc, #232]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80038f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038f4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038fc:	4936      	ldr	r1, [pc, #216]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003908:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800390c:	d106      	bne.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800390e:	4b32      	ldr	r3, [pc, #200]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	4a31      	ldr	r2, [pc, #196]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003914:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003918:	60d3      	str	r3, [r2, #12]
 800391a:	e011      	b.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003920:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003924:	d10c      	bne.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	3304      	adds	r3, #4
 800392a:	2101      	movs	r1, #1
 800392c:	4618      	mov	r0, r3
 800392e:	f000 f8c9 	bl	8003ac4 <RCCEx_PLLSAI1_Config>
 8003932:	4603      	mov	r3, r0
 8003934:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003936:	7cfb      	ldrb	r3, [r7, #19]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d001      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 800393c:	7cfb      	ldrb	r3, [r7, #19]
 800393e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d028      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800394c:	4b22      	ldr	r3, [pc, #136]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800394e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003952:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800395a:	491f      	ldr	r1, [pc, #124]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800395c:	4313      	orrs	r3, r2
 800395e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003966:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800396a:	d106      	bne.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800396c:	4b1a      	ldr	r3, [pc, #104]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	4a19      	ldr	r2, [pc, #100]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003972:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003976:	60d3      	str	r3, [r2, #12]
 8003978:	e011      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800397e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003982:	d10c      	bne.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	3304      	adds	r3, #4
 8003988:	2101      	movs	r1, #1
 800398a:	4618      	mov	r0, r3
 800398c:	f000 f89a 	bl	8003ac4 <RCCEx_PLLSAI1_Config>
 8003990:	4603      	mov	r3, r0
 8003992:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003994:	7cfb      	ldrb	r3, [r7, #19]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d001      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 800399a:	7cfb      	ldrb	r3, [r7, #19]
 800399c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d02a      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80039aa:	4b0b      	ldr	r3, [pc, #44]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80039ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039b8:	4907      	ldr	r1, [pc, #28]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80039ba:	4313      	orrs	r3, r2
 80039bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039c8:	d108      	bne.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039ca:	4b03      	ldr	r3, [pc, #12]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	4a02      	ldr	r2, [pc, #8]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80039d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039d4:	60d3      	str	r3, [r2, #12]
 80039d6:	e013      	b.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x534>
 80039d8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039e4:	d10c      	bne.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	3304      	adds	r3, #4
 80039ea:	2101      	movs	r1, #1
 80039ec:	4618      	mov	r0, r3
 80039ee:	f000 f869 	bl	8003ac4 <RCCEx_PLLSAI1_Config>
 80039f2:	4603      	mov	r3, r0
 80039f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039f6:	7cfb      	ldrb	r3, [r7, #19]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d001      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 80039fc:	7cfb      	ldrb	r3, [r7, #19]
 80039fe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d02f      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a0c:	4b2c      	ldr	r3, [pc, #176]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a12:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a1a:	4929      	ldr	r1, [pc, #164]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a2a:	d10d      	bne.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	3304      	adds	r3, #4
 8003a30:	2102      	movs	r1, #2
 8003a32:	4618      	mov	r0, r3
 8003a34:	f000 f846 	bl	8003ac4 <RCCEx_PLLSAI1_Config>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a3c:	7cfb      	ldrb	r3, [r7, #19]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d014      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8003a42:	7cfb      	ldrb	r3, [r7, #19]
 8003a44:	74bb      	strb	r3, [r7, #18]
 8003a46:	e011      	b.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a50:	d10c      	bne.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	3320      	adds	r3, #32
 8003a56:	2102      	movs	r1, #2
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f000 f925 	bl	8003ca8 <RCCEx_PLLSAI2_Config>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a62:	7cfb      	ldrb	r3, [r7, #19]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d001      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8003a68:	7cfb      	ldrb	r3, [r7, #19]
 8003a6a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d00b      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003a78:	4b11      	ldr	r3, [pc, #68]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a7e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a88:	490d      	ldr	r1, [pc, #52]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d00b      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003a9c:	4b08      	ldr	r3, [pc, #32]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aa2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003aac:	4904      	ldr	r1, [pc, #16]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003ab4:	7cbb      	ldrb	r3, [r7, #18]
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3718      	adds	r7, #24
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	40021000 	.word	0x40021000

08003ac4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003ad2:	4b74      	ldr	r3, [pc, #464]	; (8003ca4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	f003 0303 	and.w	r3, r3, #3
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d018      	beq.n	8003b10 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003ade:	4b71      	ldr	r3, [pc, #452]	; (8003ca4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	f003 0203 	and.w	r2, r3, #3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d10d      	bne.n	8003b0a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
       ||
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d009      	beq.n	8003b0a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003af6:	4b6b      	ldr	r3, [pc, #428]	; (8003ca4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	091b      	lsrs	r3, r3, #4
 8003afc:	f003 0307 	and.w	r3, r3, #7
 8003b00:	1c5a      	adds	r2, r3, #1
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
       ||
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d047      	beq.n	8003b9a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	73fb      	strb	r3, [r7, #15]
 8003b0e:	e044      	b.n	8003b9a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2b03      	cmp	r3, #3
 8003b16:	d018      	beq.n	8003b4a <RCCEx_PLLSAI1_Config+0x86>
 8003b18:	2b03      	cmp	r3, #3
 8003b1a:	d825      	bhi.n	8003b68 <RCCEx_PLLSAI1_Config+0xa4>
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d002      	beq.n	8003b26 <RCCEx_PLLSAI1_Config+0x62>
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d009      	beq.n	8003b38 <RCCEx_PLLSAI1_Config+0x74>
 8003b24:	e020      	b.n	8003b68 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b26:	4b5f      	ldr	r3, [pc, #380]	; (8003ca4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0302 	and.w	r3, r3, #2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d11d      	bne.n	8003b6e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b36:	e01a      	b.n	8003b6e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b38:	4b5a      	ldr	r3, [pc, #360]	; (8003ca4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d116      	bne.n	8003b72 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b48:	e013      	b.n	8003b72 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b4a:	4b56      	ldr	r3, [pc, #344]	; (8003ca4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d10f      	bne.n	8003b76 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003b56:	4b53      	ldr	r3, [pc, #332]	; (8003ca4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d109      	bne.n	8003b76 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b66:	e006      	b.n	8003b76 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	73fb      	strb	r3, [r7, #15]
      break;
 8003b6c:	e004      	b.n	8003b78 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b6e:	bf00      	nop
 8003b70:	e002      	b.n	8003b78 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b72:	bf00      	nop
 8003b74:	e000      	b.n	8003b78 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b76:	bf00      	nop
    }

    if(status == HAL_OK)
 8003b78:	7bfb      	ldrb	r3, [r7, #15]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d10d      	bne.n	8003b9a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003b7e:	4b49      	ldr	r3, [pc, #292]	; (8003ca4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6819      	ldr	r1, [r3, #0]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	3b01      	subs	r3, #1
 8003b90:	011b      	lsls	r3, r3, #4
 8003b92:	430b      	orrs	r3, r1
 8003b94:	4943      	ldr	r1, [pc, #268]	; (8003ca4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003b9a:	7bfb      	ldrb	r3, [r7, #15]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d17c      	bne.n	8003c9a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003ba0:	4b40      	ldr	r3, [pc, #256]	; (8003ca4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a3f      	ldr	r2, [pc, #252]	; (8003ca4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ba6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003baa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bac:	f7fe f866 	bl	8001c7c <HAL_GetTick>
 8003bb0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003bb2:	e009      	b.n	8003bc8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003bb4:	f7fe f862 	bl	8001c7c <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d902      	bls.n	8003bc8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	73fb      	strb	r3, [r7, #15]
        break;
 8003bc6:	e005      	b.n	8003bd4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003bc8:	4b36      	ldr	r3, [pc, #216]	; (8003ca4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d1ef      	bne.n	8003bb4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003bd4:	7bfb      	ldrb	r3, [r7, #15]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d15f      	bne.n	8003c9a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d110      	bne.n	8003c02 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003be0:	4b30      	ldr	r3, [pc, #192]	; (8003ca4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003be2:	691b      	ldr	r3, [r3, #16]
 8003be4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003be8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	6892      	ldr	r2, [r2, #8]
 8003bf0:	0211      	lsls	r1, r2, #8
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	68d2      	ldr	r2, [r2, #12]
 8003bf6:	06d2      	lsls	r2, r2, #27
 8003bf8:	430a      	orrs	r2, r1
 8003bfa:	492a      	ldr	r1, [pc, #168]	; (8003ca4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	610b      	str	r3, [r1, #16]
 8003c00:	e027      	b.n	8003c52 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d112      	bne.n	8003c2e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c08:	4b26      	ldr	r3, [pc, #152]	; (8003ca4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003c10:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	6892      	ldr	r2, [r2, #8]
 8003c18:	0211      	lsls	r1, r2, #8
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	6912      	ldr	r2, [r2, #16]
 8003c1e:	0852      	lsrs	r2, r2, #1
 8003c20:	3a01      	subs	r2, #1
 8003c22:	0552      	lsls	r2, r2, #21
 8003c24:	430a      	orrs	r2, r1
 8003c26:	491f      	ldr	r1, [pc, #124]	; (8003ca4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	610b      	str	r3, [r1, #16]
 8003c2c:	e011      	b.n	8003c52 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c2e:	4b1d      	ldr	r3, [pc, #116]	; (8003ca4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003c36:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	6892      	ldr	r2, [r2, #8]
 8003c3e:	0211      	lsls	r1, r2, #8
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	6952      	ldr	r2, [r2, #20]
 8003c44:	0852      	lsrs	r2, r2, #1
 8003c46:	3a01      	subs	r2, #1
 8003c48:	0652      	lsls	r2, r2, #25
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	4915      	ldr	r1, [pc, #84]	; (8003ca4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003c52:	4b14      	ldr	r3, [pc, #80]	; (8003ca4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a13      	ldr	r2, [pc, #76]	; (8003ca4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c58:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c5c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c5e:	f7fe f80d 	bl	8001c7c <HAL_GetTick>
 8003c62:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c64:	e009      	b.n	8003c7a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c66:	f7fe f809 	bl	8001c7c <HAL_GetTick>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d902      	bls.n	8003c7a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	73fb      	strb	r3, [r7, #15]
          break;
 8003c78:	e005      	b.n	8003c86 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c7a:	4b0a      	ldr	r3, [pc, #40]	; (8003ca4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d0ef      	beq.n	8003c66 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003c86:	7bfb      	ldrb	r3, [r7, #15]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d106      	bne.n	8003c9a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003c8c:	4b05      	ldr	r3, [pc, #20]	; (8003ca4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c8e:	691a      	ldr	r2, [r3, #16]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	699b      	ldr	r3, [r3, #24]
 8003c94:	4903      	ldr	r1, [pc, #12]	; (8003ca4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003c9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3710      	adds	r7, #16
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	40021000 	.word	0x40021000

08003ca8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003cb6:	4b69      	ldr	r3, [pc, #420]	; (8003e5c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	f003 0303 	and.w	r3, r3, #3
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d018      	beq.n	8003cf4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003cc2:	4b66      	ldr	r3, [pc, #408]	; (8003e5c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	f003 0203 	and.w	r2, r3, #3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d10d      	bne.n	8003cee <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
       ||
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d009      	beq.n	8003cee <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003cda:	4b60      	ldr	r3, [pc, #384]	; (8003e5c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	091b      	lsrs	r3, r3, #4
 8003ce0:	f003 0307 	and.w	r3, r3, #7
 8003ce4:	1c5a      	adds	r2, r3, #1
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	685b      	ldr	r3, [r3, #4]
       ||
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d047      	beq.n	8003d7e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	73fb      	strb	r3, [r7, #15]
 8003cf2:	e044      	b.n	8003d7e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2b03      	cmp	r3, #3
 8003cfa:	d018      	beq.n	8003d2e <RCCEx_PLLSAI2_Config+0x86>
 8003cfc:	2b03      	cmp	r3, #3
 8003cfe:	d825      	bhi.n	8003d4c <RCCEx_PLLSAI2_Config+0xa4>
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d002      	beq.n	8003d0a <RCCEx_PLLSAI2_Config+0x62>
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	d009      	beq.n	8003d1c <RCCEx_PLLSAI2_Config+0x74>
 8003d08:	e020      	b.n	8003d4c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003d0a:	4b54      	ldr	r3, [pc, #336]	; (8003e5c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0302 	and.w	r3, r3, #2
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d11d      	bne.n	8003d52 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d1a:	e01a      	b.n	8003d52 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003d1c:	4b4f      	ldr	r3, [pc, #316]	; (8003e5c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d116      	bne.n	8003d56 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d2c:	e013      	b.n	8003d56 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003d2e:	4b4b      	ldr	r3, [pc, #300]	; (8003e5c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d10f      	bne.n	8003d5a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d3a:	4b48      	ldr	r3, [pc, #288]	; (8003e5c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d109      	bne.n	8003d5a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003d4a:	e006      	b.n	8003d5a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	73fb      	strb	r3, [r7, #15]
      break;
 8003d50:	e004      	b.n	8003d5c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003d52:	bf00      	nop
 8003d54:	e002      	b.n	8003d5c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003d56:	bf00      	nop
 8003d58:	e000      	b.n	8003d5c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003d5a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003d5c:	7bfb      	ldrb	r3, [r7, #15]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d10d      	bne.n	8003d7e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003d62:	4b3e      	ldr	r3, [pc, #248]	; (8003e5c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6819      	ldr	r1, [r3, #0]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	3b01      	subs	r3, #1
 8003d74:	011b      	lsls	r3, r3, #4
 8003d76:	430b      	orrs	r3, r1
 8003d78:	4938      	ldr	r1, [pc, #224]	; (8003e5c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003d7e:	7bfb      	ldrb	r3, [r7, #15]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d166      	bne.n	8003e52 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003d84:	4b35      	ldr	r3, [pc, #212]	; (8003e5c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a34      	ldr	r2, [pc, #208]	; (8003e5c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003d8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d90:	f7fd ff74 	bl	8001c7c <HAL_GetTick>
 8003d94:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003d96:	e009      	b.n	8003dac <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003d98:	f7fd ff70 	bl	8001c7c <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d902      	bls.n	8003dac <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	73fb      	strb	r3, [r7, #15]
        break;
 8003daa:	e005      	b.n	8003db8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003dac:	4b2b      	ldr	r3, [pc, #172]	; (8003e5c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d1ef      	bne.n	8003d98 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003db8:	7bfb      	ldrb	r3, [r7, #15]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d149      	bne.n	8003e52 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d110      	bne.n	8003de6 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003dc4:	4b25      	ldr	r3, [pc, #148]	; (8003e5c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003dc6:	695b      	ldr	r3, [r3, #20]
 8003dc8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003dcc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	6892      	ldr	r2, [r2, #8]
 8003dd4:	0211      	lsls	r1, r2, #8
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	68d2      	ldr	r2, [r2, #12]
 8003dda:	06d2      	lsls	r2, r2, #27
 8003ddc:	430a      	orrs	r2, r1
 8003dde:	491f      	ldr	r1, [pc, #124]	; (8003e5c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003de0:	4313      	orrs	r3, r2
 8003de2:	614b      	str	r3, [r1, #20]
 8003de4:	e011      	b.n	8003e0a <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003de6:	4b1d      	ldr	r3, [pc, #116]	; (8003e5c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003de8:	695b      	ldr	r3, [r3, #20]
 8003dea:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003dee:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	6892      	ldr	r2, [r2, #8]
 8003df6:	0211      	lsls	r1, r2, #8
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	6912      	ldr	r2, [r2, #16]
 8003dfc:	0852      	lsrs	r2, r2, #1
 8003dfe:	3a01      	subs	r2, #1
 8003e00:	0652      	lsls	r2, r2, #25
 8003e02:	430a      	orrs	r2, r1
 8003e04:	4915      	ldr	r1, [pc, #84]	; (8003e5c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e06:	4313      	orrs	r3, r2
 8003e08:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003e0a:	4b14      	ldr	r3, [pc, #80]	; (8003e5c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a13      	ldr	r2, [pc, #76]	; (8003e5c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e14:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e16:	f7fd ff31 	bl	8001c7c <HAL_GetTick>
 8003e1a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003e1c:	e009      	b.n	8003e32 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003e1e:	f7fd ff2d 	bl	8001c7c <HAL_GetTick>
 8003e22:	4602      	mov	r2, r0
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	d902      	bls.n	8003e32 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	73fb      	strb	r3, [r7, #15]
          break;
 8003e30:	e005      	b.n	8003e3e <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003e32:	4b0a      	ldr	r3, [pc, #40]	; (8003e5c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d0ef      	beq.n	8003e1e <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8003e3e:	7bfb      	ldrb	r3, [r7, #15]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d106      	bne.n	8003e52 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003e44:	4b05      	ldr	r3, [pc, #20]	; (8003e5c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e46:	695a      	ldr	r2, [r3, #20]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	695b      	ldr	r3, [r3, #20]
 8003e4c:	4903      	ldr	r1, [pc, #12]	; (8003e5c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3710      	adds	r7, #16
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	40021000 	.word	0x40021000

08003e60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d101      	bne.n	8003e72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e095      	b.n	8003f9e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d108      	bne.n	8003e8c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e82:	d009      	beq.n	8003e98 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	61da      	str	r2, [r3, #28]
 8003e8a:	e005      	b.n	8003e98 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d106      	bne.n	8003eb8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f7fd fab4 	bl	8001420 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2202      	movs	r2, #2
 8003ebc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ece:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ed8:	d902      	bls.n	8003ee0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003eda:	2300      	movs	r3, #0
 8003edc:	60fb      	str	r3, [r7, #12]
 8003ede:	e002      	b.n	8003ee6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003ee0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ee4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003eee:	d007      	beq.n	8003f00 <HAL_SPI_Init+0xa0>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ef8:	d002      	beq.n	8003f00 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003f10:	431a      	orrs	r2, r3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	f003 0302 	and.w	r3, r3, #2
 8003f1a:	431a      	orrs	r2, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	695b      	ldr	r3, [r3, #20]
 8003f20:	f003 0301 	and.w	r3, r3, #1
 8003f24:	431a      	orrs	r2, r3
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	699b      	ldr	r3, [r3, #24]
 8003f2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f2e:	431a      	orrs	r2, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	69db      	ldr	r3, [r3, #28]
 8003f34:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f38:	431a      	orrs	r2, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a1b      	ldr	r3, [r3, #32]
 8003f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f42:	ea42 0103 	orr.w	r1, r2, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f4a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	430a      	orrs	r2, r1
 8003f54:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	699b      	ldr	r3, [r3, #24]
 8003f5a:	0c1b      	lsrs	r3, r3, #16
 8003f5c:	f003 0204 	and.w	r2, r3, #4
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f64:	f003 0310 	and.w	r3, r3, #16
 8003f68:	431a      	orrs	r2, r3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f6e:	f003 0308 	and.w	r3, r3, #8
 8003f72:	431a      	orrs	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003f7c:	ea42 0103 	orr.w	r1, r2, r3
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	430a      	orrs	r2, r1
 8003f8c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003f9c:	2300      	movs	r3, #0
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3710      	adds	r7, #16
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}

08003fa6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fa6:	b580      	push	{r7, lr}
 8003fa8:	b088      	sub	sp, #32
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	60f8      	str	r0, [r7, #12]
 8003fae:	60b9      	str	r1, [r7, #8]
 8003fb0:	603b      	str	r3, [r7, #0]
 8003fb2:	4613      	mov	r3, r2
 8003fb4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d101      	bne.n	8003fc8 <HAL_SPI_Transmit+0x22>
 8003fc4:	2302      	movs	r3, #2
 8003fc6:	e158      	b.n	800427a <HAL_SPI_Transmit+0x2d4>
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003fd0:	f7fd fe54 	bl	8001c7c <HAL_GetTick>
 8003fd4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003fd6:	88fb      	ldrh	r3, [r7, #6]
 8003fd8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d002      	beq.n	8003fec <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003fe6:	2302      	movs	r3, #2
 8003fe8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003fea:	e13d      	b.n	8004268 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d002      	beq.n	8003ff8 <HAL_SPI_Transmit+0x52>
 8003ff2:	88fb      	ldrh	r3, [r7, #6]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d102      	bne.n	8003ffe <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003ffc:	e134      	b.n	8004268 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2203      	movs	r2, #3
 8004002:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2200      	movs	r2, #0
 800400a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	68ba      	ldr	r2, [r7, #8]
 8004010:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	88fa      	ldrh	r2, [r7, #6]
 8004016:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	88fa      	ldrh	r2, [r7, #6]
 800401c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2200      	movs	r2, #0
 8004022:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2200      	movs	r2, #0
 8004028:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2200      	movs	r2, #0
 8004030:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2200      	movs	r2, #0
 8004038:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2200      	movs	r2, #0
 800403e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004048:	d10f      	bne.n	800406a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004058:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004068:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004074:	2b40      	cmp	r3, #64	; 0x40
 8004076:	d007      	beq.n	8004088 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004086:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004090:	d94b      	bls.n	800412a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d002      	beq.n	80040a0 <HAL_SPI_Transmit+0xfa>
 800409a:	8afb      	ldrh	r3, [r7, #22]
 800409c:	2b01      	cmp	r3, #1
 800409e:	d13e      	bne.n	800411e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a4:	881a      	ldrh	r2, [r3, #0]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b0:	1c9a      	adds	r2, r3, #2
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	3b01      	subs	r3, #1
 80040be:	b29a      	uxth	r2, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80040c4:	e02b      	b.n	800411e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	f003 0302 	and.w	r3, r3, #2
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	d112      	bne.n	80040fa <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d8:	881a      	ldrh	r2, [r3, #0]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e4:	1c9a      	adds	r2, r3, #2
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	3b01      	subs	r3, #1
 80040f2:	b29a      	uxth	r2, r3
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80040f8:	e011      	b.n	800411e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040fa:	f7fd fdbf 	bl	8001c7c <HAL_GetTick>
 80040fe:	4602      	mov	r2, r0
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	683a      	ldr	r2, [r7, #0]
 8004106:	429a      	cmp	r2, r3
 8004108:	d803      	bhi.n	8004112 <HAL_SPI_Transmit+0x16c>
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004110:	d102      	bne.n	8004118 <HAL_SPI_Transmit+0x172>
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d102      	bne.n	800411e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800411c:	e0a4      	b.n	8004268 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004122:	b29b      	uxth	r3, r3
 8004124:	2b00      	cmp	r3, #0
 8004126:	d1ce      	bne.n	80040c6 <HAL_SPI_Transmit+0x120>
 8004128:	e07c      	b.n	8004224 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d002      	beq.n	8004138 <HAL_SPI_Transmit+0x192>
 8004132:	8afb      	ldrh	r3, [r7, #22]
 8004134:	2b01      	cmp	r3, #1
 8004136:	d170      	bne.n	800421a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800413c:	b29b      	uxth	r3, r3
 800413e:	2b01      	cmp	r3, #1
 8004140:	d912      	bls.n	8004168 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004146:	881a      	ldrh	r2, [r3, #0]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004152:	1c9a      	adds	r2, r3, #2
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800415c:	b29b      	uxth	r3, r3
 800415e:	3b02      	subs	r3, #2
 8004160:	b29a      	uxth	r2, r3
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004166:	e058      	b.n	800421a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	330c      	adds	r3, #12
 8004172:	7812      	ldrb	r2, [r2, #0]
 8004174:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800417a:	1c5a      	adds	r2, r3, #1
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004184:	b29b      	uxth	r3, r3
 8004186:	3b01      	subs	r3, #1
 8004188:	b29a      	uxth	r2, r3
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800418e:	e044      	b.n	800421a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f003 0302 	and.w	r3, r3, #2
 800419a:	2b02      	cmp	r3, #2
 800419c:	d12b      	bne.n	80041f6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d912      	bls.n	80041ce <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ac:	881a      	ldrh	r2, [r3, #0]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b8:	1c9a      	adds	r2, r3, #2
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	3b02      	subs	r3, #2
 80041c6:	b29a      	uxth	r2, r3
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 80041cc:	e025      	b.n	800421a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	330c      	adds	r3, #12
 80041d8:	7812      	ldrb	r2, [r2, #0]
 80041da:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e0:	1c5a      	adds	r2, r3, #1
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	3b01      	subs	r3, #1
 80041ee:	b29a      	uxth	r2, r3
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80041f4:	e011      	b.n	800421a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041f6:	f7fd fd41 	bl	8001c7c <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	69bb      	ldr	r3, [r7, #24]
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	683a      	ldr	r2, [r7, #0]
 8004202:	429a      	cmp	r2, r3
 8004204:	d803      	bhi.n	800420e <HAL_SPI_Transmit+0x268>
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800420c:	d102      	bne.n	8004214 <HAL_SPI_Transmit+0x26e>
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d102      	bne.n	800421a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004218:	e026      	b.n	8004268 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800421e:	b29b      	uxth	r3, r3
 8004220:	2b00      	cmp	r3, #0
 8004222:	d1b5      	bne.n	8004190 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004224:	69ba      	ldr	r2, [r7, #24]
 8004226:	6839      	ldr	r1, [r7, #0]
 8004228:	68f8      	ldr	r0, [r7, #12]
 800422a:	f000 fcf1 	bl	8004c10 <SPI_EndRxTxTransaction>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d002      	beq.n	800423a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2220      	movs	r2, #32
 8004238:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d10a      	bne.n	8004258 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004242:	2300      	movs	r3, #0
 8004244:	613b      	str	r3, [r7, #16]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	613b      	str	r3, [r7, #16]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	613b      	str	r3, [r7, #16]
 8004256:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800425c:	2b00      	cmp	r3, #0
 800425e:	d002      	beq.n	8004266 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	77fb      	strb	r3, [r7, #31]
 8004264:	e000      	b.n	8004268 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004266:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2200      	movs	r2, #0
 8004274:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004278:	7ffb      	ldrb	r3, [r7, #31]
}
 800427a:	4618      	mov	r0, r3
 800427c:	3720      	adds	r7, #32
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}

08004282 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004282:	b580      	push	{r7, lr}
 8004284:	b088      	sub	sp, #32
 8004286:	af02      	add	r7, sp, #8
 8004288:	60f8      	str	r0, [r7, #12]
 800428a:	60b9      	str	r1, [r7, #8]
 800428c:	603b      	str	r3, [r7, #0]
 800428e:	4613      	mov	r3, r2
 8004290:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004292:	2300      	movs	r3, #0
 8004294:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800429e:	d112      	bne.n	80042c6 <HAL_SPI_Receive+0x44>
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d10e      	bne.n	80042c6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2204      	movs	r2, #4
 80042ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80042b0:	88fa      	ldrh	r2, [r7, #6]
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	9300      	str	r3, [sp, #0]
 80042b6:	4613      	mov	r3, r2
 80042b8:	68ba      	ldr	r2, [r7, #8]
 80042ba:	68b9      	ldr	r1, [r7, #8]
 80042bc:	68f8      	ldr	r0, [r7, #12]
 80042be:	f000 f910 	bl	80044e2 <HAL_SPI_TransmitReceive>
 80042c2:	4603      	mov	r3, r0
 80042c4:	e109      	b.n	80044da <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d101      	bne.n	80042d4 <HAL_SPI_Receive+0x52>
 80042d0:	2302      	movs	r3, #2
 80042d2:	e102      	b.n	80044da <HAL_SPI_Receive+0x258>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042dc:	f7fd fcce 	bl	8001c7c <HAL_GetTick>
 80042e0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d002      	beq.n	80042f4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80042ee:	2302      	movs	r3, #2
 80042f0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80042f2:	e0e9      	b.n	80044c8 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d002      	beq.n	8004300 <HAL_SPI_Receive+0x7e>
 80042fa:	88fb      	ldrh	r3, [r7, #6]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d102      	bne.n	8004306 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004304:	e0e0      	b.n	80044c8 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2204      	movs	r2, #4
 800430a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2200      	movs	r2, #0
 8004312:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	68ba      	ldr	r2, [r7, #8]
 8004318:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	88fa      	ldrh	r2, [r7, #6]
 800431e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	88fa      	ldrh	r2, [r7, #6]
 8004326:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2200      	movs	r2, #0
 800432e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2200      	movs	r2, #0
 8004334:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2200      	movs	r2, #0
 800433a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2200      	movs	r2, #0
 8004340:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2200      	movs	r2, #0
 8004346:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004350:	d908      	bls.n	8004364 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	685a      	ldr	r2, [r3, #4]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004360:	605a      	str	r2, [r3, #4]
 8004362:	e007      	b.n	8004374 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	685a      	ldr	r2, [r3, #4]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004372:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800437c:	d10f      	bne.n	800439e <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800438c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800439c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043a8:	2b40      	cmp	r3, #64	; 0x40
 80043aa:	d007      	beq.n	80043bc <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043ba:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80043c4:	d867      	bhi.n	8004496 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80043c6:	e030      	b.n	800442a <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f003 0301 	and.w	r3, r3, #1
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d117      	bne.n	8004406 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f103 020c 	add.w	r2, r3, #12
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e2:	7812      	ldrb	r2, [r2, #0]
 80043e4:	b2d2      	uxtb	r2, r2
 80043e6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ec:	1c5a      	adds	r2, r3, #1
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	3b01      	subs	r3, #1
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004404:	e011      	b.n	800442a <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004406:	f7fd fc39 	bl	8001c7c <HAL_GetTick>
 800440a:	4602      	mov	r2, r0
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	683a      	ldr	r2, [r7, #0]
 8004412:	429a      	cmp	r2, r3
 8004414:	d803      	bhi.n	800441e <HAL_SPI_Receive+0x19c>
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800441c:	d102      	bne.n	8004424 <HAL_SPI_Receive+0x1a2>
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d102      	bne.n	800442a <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8004424:	2303      	movs	r3, #3
 8004426:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004428:	e04e      	b.n	80044c8 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004430:	b29b      	uxth	r3, r3
 8004432:	2b00      	cmp	r3, #0
 8004434:	d1c8      	bne.n	80043c8 <HAL_SPI_Receive+0x146>
 8004436:	e034      	b.n	80044a2 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	f003 0301 	and.w	r3, r3, #1
 8004442:	2b01      	cmp	r3, #1
 8004444:	d115      	bne.n	8004472 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	68da      	ldr	r2, [r3, #12]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004450:	b292      	uxth	r2, r2
 8004452:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004458:	1c9a      	adds	r2, r3, #2
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004464:	b29b      	uxth	r3, r3
 8004466:	3b01      	subs	r3, #1
 8004468:	b29a      	uxth	r2, r3
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004470:	e011      	b.n	8004496 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004472:	f7fd fc03 	bl	8001c7c <HAL_GetTick>
 8004476:	4602      	mov	r2, r0
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	683a      	ldr	r2, [r7, #0]
 800447e:	429a      	cmp	r2, r3
 8004480:	d803      	bhi.n	800448a <HAL_SPI_Receive+0x208>
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004488:	d102      	bne.n	8004490 <HAL_SPI_Receive+0x20e>
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d102      	bne.n	8004496 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004494:	e018      	b.n	80044c8 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800449c:	b29b      	uxth	r3, r3
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1ca      	bne.n	8004438 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80044a2:	693a      	ldr	r2, [r7, #16]
 80044a4:	6839      	ldr	r1, [r7, #0]
 80044a6:	68f8      	ldr	r0, [r7, #12]
 80044a8:	f000 fb5a 	bl	8004b60 <SPI_EndRxTransaction>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d002      	beq.n	80044b8 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2220      	movs	r2, #32
 80044b6:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d002      	beq.n	80044c6 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	75fb      	strb	r3, [r7, #23]
 80044c4:	e000      	b.n	80044c8 <HAL_SPI_Receive+0x246>
  }

error :
 80044c6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80044d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3718      	adds	r7, #24
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}

080044e2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80044e2:	b580      	push	{r7, lr}
 80044e4:	b08a      	sub	sp, #40	; 0x28
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	60f8      	str	r0, [r7, #12]
 80044ea:	60b9      	str	r1, [r7, #8]
 80044ec:	607a      	str	r2, [r7, #4]
 80044ee:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80044f0:	2301      	movs	r3, #1
 80044f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80044f4:	2300      	movs	r3, #0
 80044f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004500:	2b01      	cmp	r3, #1
 8004502:	d101      	bne.n	8004508 <HAL_SPI_TransmitReceive+0x26>
 8004504:	2302      	movs	r3, #2
 8004506:	e1fb      	b.n	8004900 <HAL_SPI_TransmitReceive+0x41e>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004510:	f7fd fbb4 	bl	8001c7c <HAL_GetTick>
 8004514:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800451c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004524:	887b      	ldrh	r3, [r7, #2]
 8004526:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004528:	887b      	ldrh	r3, [r7, #2]
 800452a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800452c:	7efb      	ldrb	r3, [r7, #27]
 800452e:	2b01      	cmp	r3, #1
 8004530:	d00e      	beq.n	8004550 <HAL_SPI_TransmitReceive+0x6e>
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004538:	d106      	bne.n	8004548 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d102      	bne.n	8004548 <HAL_SPI_TransmitReceive+0x66>
 8004542:	7efb      	ldrb	r3, [r7, #27]
 8004544:	2b04      	cmp	r3, #4
 8004546:	d003      	beq.n	8004550 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004548:	2302      	movs	r3, #2
 800454a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800454e:	e1cd      	b.n	80048ec <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d005      	beq.n	8004562 <HAL_SPI_TransmitReceive+0x80>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d002      	beq.n	8004562 <HAL_SPI_TransmitReceive+0x80>
 800455c:	887b      	ldrh	r3, [r7, #2]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d103      	bne.n	800456a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004568:	e1c0      	b.n	80048ec <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004570:	b2db      	uxtb	r3, r3
 8004572:	2b04      	cmp	r3, #4
 8004574:	d003      	beq.n	800457e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2205      	movs	r2, #5
 800457a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2200      	movs	r2, #0
 8004582:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	887a      	ldrh	r2, [r7, #2]
 800458e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	887a      	ldrh	r2, [r7, #2]
 8004596:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	68ba      	ldr	r2, [r7, #8]
 800459e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	887a      	ldrh	r2, [r7, #2]
 80045a4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	887a      	ldrh	r2, [r7, #2]
 80045aa:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2200      	movs	r2, #0
 80045b0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2200      	movs	r2, #0
 80045b6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80045c0:	d802      	bhi.n	80045c8 <HAL_SPI_TransmitReceive+0xe6>
 80045c2:	8a3b      	ldrh	r3, [r7, #16]
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d908      	bls.n	80045da <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	685a      	ldr	r2, [r3, #4]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80045d6:	605a      	str	r2, [r3, #4]
 80045d8:	e007      	b.n	80045ea <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	685a      	ldr	r2, [r3, #4]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80045e8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045f4:	2b40      	cmp	r3, #64	; 0x40
 80045f6:	d007      	beq.n	8004608 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004606:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004610:	d97c      	bls.n	800470c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d002      	beq.n	8004620 <HAL_SPI_TransmitReceive+0x13e>
 800461a:	8a7b      	ldrh	r3, [r7, #18]
 800461c:	2b01      	cmp	r3, #1
 800461e:	d169      	bne.n	80046f4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004624:	881a      	ldrh	r2, [r3, #0]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004630:	1c9a      	adds	r2, r3, #2
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800463a:	b29b      	uxth	r3, r3
 800463c:	3b01      	subs	r3, #1
 800463e:	b29a      	uxth	r2, r3
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004644:	e056      	b.n	80046f4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	f003 0302 	and.w	r3, r3, #2
 8004650:	2b02      	cmp	r3, #2
 8004652:	d11b      	bne.n	800468c <HAL_SPI_TransmitReceive+0x1aa>
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004658:	b29b      	uxth	r3, r3
 800465a:	2b00      	cmp	r3, #0
 800465c:	d016      	beq.n	800468c <HAL_SPI_TransmitReceive+0x1aa>
 800465e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004660:	2b01      	cmp	r3, #1
 8004662:	d113      	bne.n	800468c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004668:	881a      	ldrh	r2, [r3, #0]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004674:	1c9a      	adds	r2, r3, #2
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800467e:	b29b      	uxth	r3, r3
 8004680:	3b01      	subs	r3, #1
 8004682:	b29a      	uxth	r2, r3
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004688:	2300      	movs	r3, #0
 800468a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f003 0301 	and.w	r3, r3, #1
 8004696:	2b01      	cmp	r3, #1
 8004698:	d11c      	bne.n	80046d4 <HAL_SPI_TransmitReceive+0x1f2>
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d016      	beq.n	80046d4 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	68da      	ldr	r2, [r3, #12]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b0:	b292      	uxth	r2, r2
 80046b2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b8:	1c9a      	adds	r2, r3, #2
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	3b01      	subs	r3, #1
 80046c8:	b29a      	uxth	r2, r3
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80046d0:	2301      	movs	r3, #1
 80046d2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80046d4:	f7fd fad2 	bl	8001c7c <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d807      	bhi.n	80046f4 <HAL_SPI_TransmitReceive+0x212>
 80046e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ea:	d003      	beq.n	80046f4 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80046f2:	e0fb      	b.n	80048ec <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d1a3      	bne.n	8004646 <HAL_SPI_TransmitReceive+0x164>
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004704:	b29b      	uxth	r3, r3
 8004706:	2b00      	cmp	r3, #0
 8004708:	d19d      	bne.n	8004646 <HAL_SPI_TransmitReceive+0x164>
 800470a:	e0df      	b.n	80048cc <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d003      	beq.n	800471c <HAL_SPI_TransmitReceive+0x23a>
 8004714:	8a7b      	ldrh	r3, [r7, #18]
 8004716:	2b01      	cmp	r3, #1
 8004718:	f040 80cb 	bne.w	80048b2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004720:	b29b      	uxth	r3, r3
 8004722:	2b01      	cmp	r3, #1
 8004724:	d912      	bls.n	800474c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800472a:	881a      	ldrh	r2, [r3, #0]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004736:	1c9a      	adds	r2, r3, #2
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004740:	b29b      	uxth	r3, r3
 8004742:	3b02      	subs	r3, #2
 8004744:	b29a      	uxth	r2, r3
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	87da      	strh	r2, [r3, #62]	; 0x3e
 800474a:	e0b2      	b.n	80048b2 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	330c      	adds	r3, #12
 8004756:	7812      	ldrb	r2, [r2, #0]
 8004758:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800475e:	1c5a      	adds	r2, r3, #1
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004768:	b29b      	uxth	r3, r3
 800476a:	3b01      	subs	r3, #1
 800476c:	b29a      	uxth	r2, r3
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004772:	e09e      	b.n	80048b2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	f003 0302 	and.w	r3, r3, #2
 800477e:	2b02      	cmp	r3, #2
 8004780:	d134      	bne.n	80047ec <HAL_SPI_TransmitReceive+0x30a>
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004786:	b29b      	uxth	r3, r3
 8004788:	2b00      	cmp	r3, #0
 800478a:	d02f      	beq.n	80047ec <HAL_SPI_TransmitReceive+0x30a>
 800478c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478e:	2b01      	cmp	r3, #1
 8004790:	d12c      	bne.n	80047ec <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004796:	b29b      	uxth	r3, r3
 8004798:	2b01      	cmp	r3, #1
 800479a:	d912      	bls.n	80047c2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a0:	881a      	ldrh	r2, [r3, #0]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ac:	1c9a      	adds	r2, r3, #2
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	3b02      	subs	r3, #2
 80047ba:	b29a      	uxth	r2, r3
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	87da      	strh	r2, [r3, #62]	; 0x3e
 80047c0:	e012      	b.n	80047e8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	330c      	adds	r3, #12
 80047cc:	7812      	ldrb	r2, [r2, #0]
 80047ce:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d4:	1c5a      	adds	r2, r3, #1
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047de:	b29b      	uxth	r3, r3
 80047e0:	3b01      	subs	r3, #1
 80047e2:	b29a      	uxth	r2, r3
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80047e8:	2300      	movs	r3, #0
 80047ea:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	f003 0301 	and.w	r3, r3, #1
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d148      	bne.n	800488c <HAL_SPI_TransmitReceive+0x3aa>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004800:	b29b      	uxth	r3, r3
 8004802:	2b00      	cmp	r3, #0
 8004804:	d042      	beq.n	800488c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800480c:	b29b      	uxth	r3, r3
 800480e:	2b01      	cmp	r3, #1
 8004810:	d923      	bls.n	800485a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	68da      	ldr	r2, [r3, #12]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481c:	b292      	uxth	r2, r2
 800481e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004824:	1c9a      	adds	r2, r3, #2
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004830:	b29b      	uxth	r3, r3
 8004832:	3b02      	subs	r3, #2
 8004834:	b29a      	uxth	r2, r3
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004842:	b29b      	uxth	r3, r3
 8004844:	2b01      	cmp	r3, #1
 8004846:	d81f      	bhi.n	8004888 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	685a      	ldr	r2, [r3, #4]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004856:	605a      	str	r2, [r3, #4]
 8004858:	e016      	b.n	8004888 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f103 020c 	add.w	r2, r3, #12
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004866:	7812      	ldrb	r2, [r2, #0]
 8004868:	b2d2      	uxtb	r2, r2
 800486a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004870:	1c5a      	adds	r2, r3, #1
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800487c:	b29b      	uxth	r3, r3
 800487e:	3b01      	subs	r3, #1
 8004880:	b29a      	uxth	r2, r3
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004888:	2301      	movs	r3, #1
 800488a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800488c:	f7fd f9f6 	bl	8001c7c <HAL_GetTick>
 8004890:	4602      	mov	r2, r0
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004898:	429a      	cmp	r2, r3
 800489a:	d803      	bhi.n	80048a4 <HAL_SPI_TransmitReceive+0x3c2>
 800489c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800489e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048a2:	d102      	bne.n	80048aa <HAL_SPI_TransmitReceive+0x3c8>
 80048a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d103      	bne.n	80048b2 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80048b0:	e01c      	b.n	80048ec <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	f47f af5b 	bne.w	8004774 <HAL_SPI_TransmitReceive+0x292>
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	f47f af54 	bne.w	8004774 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80048cc:	69fa      	ldr	r2, [r7, #28]
 80048ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80048d0:	68f8      	ldr	r0, [r7, #12]
 80048d2:	f000 f99d 	bl	8004c10 <SPI_EndRxTxTransaction>
 80048d6:	4603      	mov	r3, r0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d006      	beq.n	80048ea <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2220      	movs	r2, #32
 80048e6:	661a      	str	r2, [r3, #96]	; 0x60
 80048e8:	e000      	b.n	80048ec <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80048ea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80048fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004900:	4618      	mov	r0, r3
 8004902:	3728      	adds	r7, #40	; 0x28
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004916:	b2db      	uxtb	r3, r3
}
 8004918:	4618      	mov	r0, r3
 800491a:	370c      	adds	r7, #12
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr

08004924 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b088      	sub	sp, #32
 8004928:	af00      	add	r7, sp, #0
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	60b9      	str	r1, [r7, #8]
 800492e:	603b      	str	r3, [r7, #0]
 8004930:	4613      	mov	r3, r2
 8004932:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004934:	f7fd f9a2 	bl	8001c7c <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800493c:	1a9b      	subs	r3, r3, r2
 800493e:	683a      	ldr	r2, [r7, #0]
 8004940:	4413      	add	r3, r2
 8004942:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004944:	f7fd f99a 	bl	8001c7c <HAL_GetTick>
 8004948:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800494a:	4b39      	ldr	r3, [pc, #228]	; (8004a30 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	015b      	lsls	r3, r3, #5
 8004950:	0d1b      	lsrs	r3, r3, #20
 8004952:	69fa      	ldr	r2, [r7, #28]
 8004954:	fb02 f303 	mul.w	r3, r2, r3
 8004958:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800495a:	e054      	b.n	8004a06 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004962:	d050      	beq.n	8004a06 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004964:	f7fd f98a 	bl	8001c7c <HAL_GetTick>
 8004968:	4602      	mov	r2, r0
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	69fa      	ldr	r2, [r7, #28]
 8004970:	429a      	cmp	r2, r3
 8004972:	d902      	bls.n	800497a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d13d      	bne.n	80049f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	685a      	ldr	r2, [r3, #4]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004988:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004992:	d111      	bne.n	80049b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800499c:	d004      	beq.n	80049a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049a6:	d107      	bne.n	80049b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049c0:	d10f      	bne.n	80049e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049d0:	601a      	str	r2, [r3, #0]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2201      	movs	r2, #1
 80049e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2200      	movs	r2, #0
 80049ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	e017      	b.n	8004a26 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d101      	bne.n	8004a00 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80049fc:	2300      	movs	r3, #0
 80049fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	3b01      	subs	r3, #1
 8004a04:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	689a      	ldr	r2, [r3, #8]
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	4013      	ands	r3, r2
 8004a10:	68ba      	ldr	r2, [r7, #8]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	bf0c      	ite	eq
 8004a16:	2301      	moveq	r3, #1
 8004a18:	2300      	movne	r3, #0
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	79fb      	ldrb	r3, [r7, #7]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d19b      	bne.n	800495c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004a24:	2300      	movs	r3, #0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3720      	adds	r7, #32
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	20000004 	.word	0x20000004

08004a34 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b08a      	sub	sp, #40	; 0x28
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	60b9      	str	r1, [r7, #8]
 8004a3e:	607a      	str	r2, [r7, #4]
 8004a40:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004a42:	2300      	movs	r3, #0
 8004a44:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004a46:	f7fd f919 	bl	8001c7c <HAL_GetTick>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a4e:	1a9b      	subs	r3, r3, r2
 8004a50:	683a      	ldr	r2, [r7, #0]
 8004a52:	4413      	add	r3, r2
 8004a54:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004a56:	f7fd f911 	bl	8001c7c <HAL_GetTick>
 8004a5a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	330c      	adds	r3, #12
 8004a62:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004a64:	4b3d      	ldr	r3, [pc, #244]	; (8004b5c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	4613      	mov	r3, r2
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	4413      	add	r3, r2
 8004a6e:	00da      	lsls	r2, r3, #3
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	0d1b      	lsrs	r3, r3, #20
 8004a74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a76:	fb02 f303 	mul.w	r3, r2, r3
 8004a7a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004a7c:	e060      	b.n	8004b40 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004a84:	d107      	bne.n	8004a96 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d104      	bne.n	8004a96 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	781b      	ldrb	r3, [r3, #0]
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004a94:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a9c:	d050      	beq.n	8004b40 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004a9e:	f7fd f8ed 	bl	8001c7c <HAL_GetTick>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	6a3b      	ldr	r3, [r7, #32]
 8004aa6:	1ad3      	subs	r3, r2, r3
 8004aa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d902      	bls.n	8004ab4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d13d      	bne.n	8004b30 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	685a      	ldr	r2, [r3, #4]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004ac2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004acc:	d111      	bne.n	8004af2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ad6:	d004      	beq.n	8004ae2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ae0:	d107      	bne.n	8004af2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004af0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004afa:	d10f      	bne.n	8004b1c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b0a:	601a      	str	r2, [r3, #0]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b1a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	e010      	b.n	8004b52 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d101      	bne.n	8004b3a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004b36:	2300      	movs	r3, #0
 8004b38:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	3b01      	subs	r3, #1
 8004b3e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	689a      	ldr	r2, [r3, #8]
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	4013      	ands	r3, r2
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d196      	bne.n	8004a7e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004b50:	2300      	movs	r3, #0
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3728      	adds	r7, #40	; 0x28
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	20000004 	.word	0x20000004

08004b60 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b086      	sub	sp, #24
 8004b64:	af02      	add	r7, sp, #8
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b74:	d111      	bne.n	8004b9a <SPI_EndRxTransaction+0x3a>
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b7e:	d004      	beq.n	8004b8a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b88:	d107      	bne.n	8004b9a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b98:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	9300      	str	r3, [sp, #0]
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	2180      	movs	r1, #128	; 0x80
 8004ba4:	68f8      	ldr	r0, [r7, #12]
 8004ba6:	f7ff febd 	bl	8004924 <SPI_WaitFlagStateUntilTimeout>
 8004baa:	4603      	mov	r3, r0
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d007      	beq.n	8004bc0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bb4:	f043 0220 	orr.w	r2, r3, #32
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004bbc:	2303      	movs	r3, #3
 8004bbe:	e023      	b.n	8004c08 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bc8:	d11d      	bne.n	8004c06 <SPI_EndRxTransaction+0xa6>
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bd2:	d004      	beq.n	8004bde <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bdc:	d113      	bne.n	8004c06 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	9300      	str	r3, [sp, #0]
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004bea:	68f8      	ldr	r0, [r7, #12]
 8004bec:	f7ff ff22 	bl	8004a34 <SPI_WaitFifoStateUntilTimeout>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d007      	beq.n	8004c06 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bfa:	f043 0220 	orr.w	r2, r3, #32
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004c02:	2303      	movs	r3, #3
 8004c04:	e000      	b.n	8004c08 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004c06:	2300      	movs	r3, #0
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3710      	adds	r7, #16
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}

08004c10 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b086      	sub	sp, #24
 8004c14:	af02      	add	r7, sp, #8
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	60b9      	str	r1, [r7, #8]
 8004c1a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	9300      	str	r3, [sp, #0]
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	2200      	movs	r2, #0
 8004c24:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004c28:	68f8      	ldr	r0, [r7, #12]
 8004c2a:	f7ff ff03 	bl	8004a34 <SPI_WaitFifoStateUntilTimeout>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d007      	beq.n	8004c44 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c38:	f043 0220 	orr.w	r2, r3, #32
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004c40:	2303      	movs	r3, #3
 8004c42:	e027      	b.n	8004c94 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	9300      	str	r3, [sp, #0]
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	2180      	movs	r1, #128	; 0x80
 8004c4e:	68f8      	ldr	r0, [r7, #12]
 8004c50:	f7ff fe68 	bl	8004924 <SPI_WaitFlagStateUntilTimeout>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d007      	beq.n	8004c6a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c5e:	f043 0220 	orr.w	r2, r3, #32
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004c66:	2303      	movs	r3, #3
 8004c68:	e014      	b.n	8004c94 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	9300      	str	r3, [sp, #0]
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004c76:	68f8      	ldr	r0, [r7, #12]
 8004c78:	f7ff fedc 	bl	8004a34 <SPI_WaitFifoStateUntilTimeout>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d007      	beq.n	8004c92 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c86:	f043 0220 	orr.w	r2, r3, #32
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e000      	b.n	8004c94 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004c92:	2300      	movs	r3, #0
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3710      	adds	r7, #16
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b082      	sub	sp, #8
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d101      	bne.n	8004cae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e049      	b.n	8004d42 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d106      	bne.n	8004cc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f7fc fdac 	bl	8001820 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2202      	movs	r2, #2
 8004ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	3304      	adds	r3, #4
 8004cd8:	4619      	mov	r1, r3
 8004cda:	4610      	mov	r0, r2
 8004cdc:	f000 fa50 	bl	8005180 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3708      	adds	r7, #8
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}

08004d4a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d4a:	b580      	push	{r7, lr}
 8004d4c:	b082      	sub	sp, #8
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	691b      	ldr	r3, [r3, #16]
 8004d58:	f003 0302 	and.w	r3, r3, #2
 8004d5c:	2b02      	cmp	r3, #2
 8004d5e:	d122      	bne.n	8004da6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	f003 0302 	and.w	r3, r3, #2
 8004d6a:	2b02      	cmp	r3, #2
 8004d6c:	d11b      	bne.n	8004da6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f06f 0202 	mvn.w	r2, #2
 8004d76:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	699b      	ldr	r3, [r3, #24]
 8004d84:	f003 0303 	and.w	r3, r3, #3
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d003      	beq.n	8004d94 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f000 f9d8 	bl	8005142 <HAL_TIM_IC_CaptureCallback>
 8004d92:	e005      	b.n	8004da0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f000 f9ca 	bl	800512e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f000 f9db 	bl	8005156 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	691b      	ldr	r3, [r3, #16]
 8004dac:	f003 0304 	and.w	r3, r3, #4
 8004db0:	2b04      	cmp	r3, #4
 8004db2:	d122      	bne.n	8004dfa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	f003 0304 	and.w	r3, r3, #4
 8004dbe:	2b04      	cmp	r3, #4
 8004dc0:	d11b      	bne.n	8004dfa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f06f 0204 	mvn.w	r2, #4
 8004dca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2202      	movs	r2, #2
 8004dd0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	699b      	ldr	r3, [r3, #24]
 8004dd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d003      	beq.n	8004de8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f000 f9ae 	bl	8005142 <HAL_TIM_IC_CaptureCallback>
 8004de6:	e005      	b.n	8004df4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f000 f9a0 	bl	800512e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f000 f9b1 	bl	8005156 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	691b      	ldr	r3, [r3, #16]
 8004e00:	f003 0308 	and.w	r3, r3, #8
 8004e04:	2b08      	cmp	r3, #8
 8004e06:	d122      	bne.n	8004e4e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	f003 0308 	and.w	r3, r3, #8
 8004e12:	2b08      	cmp	r3, #8
 8004e14:	d11b      	bne.n	8004e4e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f06f 0208 	mvn.w	r2, #8
 8004e1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2204      	movs	r2, #4
 8004e24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	69db      	ldr	r3, [r3, #28]
 8004e2c:	f003 0303 	and.w	r3, r3, #3
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d003      	beq.n	8004e3c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f000 f984 	bl	8005142 <HAL_TIM_IC_CaptureCallback>
 8004e3a:	e005      	b.n	8004e48 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f000 f976 	bl	800512e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f000 f987 	bl	8005156 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	691b      	ldr	r3, [r3, #16]
 8004e54:	f003 0310 	and.w	r3, r3, #16
 8004e58:	2b10      	cmp	r3, #16
 8004e5a:	d122      	bne.n	8004ea2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	f003 0310 	and.w	r3, r3, #16
 8004e66:	2b10      	cmp	r3, #16
 8004e68:	d11b      	bne.n	8004ea2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f06f 0210 	mvn.w	r2, #16
 8004e72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2208      	movs	r2, #8
 8004e78:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	69db      	ldr	r3, [r3, #28]
 8004e80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d003      	beq.n	8004e90 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f000 f95a 	bl	8005142 <HAL_TIM_IC_CaptureCallback>
 8004e8e:	e005      	b.n	8004e9c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f000 f94c 	bl	800512e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f000 f95d 	bl	8005156 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	691b      	ldr	r3, [r3, #16]
 8004ea8:	f003 0301 	and.w	r3, r3, #1
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d10e      	bne.n	8004ece <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	f003 0301 	and.w	r3, r3, #1
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d107      	bne.n	8004ece <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f06f 0201 	mvn.w	r2, #1
 8004ec6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f000 f926 	bl	800511a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	691b      	ldr	r3, [r3, #16]
 8004ed4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ed8:	2b80      	cmp	r3, #128	; 0x80
 8004eda:	d10e      	bne.n	8004efa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ee6:	2b80      	cmp	r3, #128	; 0x80
 8004ee8:	d107      	bne.n	8004efa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ef2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f000 fb09 	bl	800550c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	691b      	ldr	r3, [r3, #16]
 8004f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f08:	d10e      	bne.n	8004f28 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f14:	2b80      	cmp	r3, #128	; 0x80
 8004f16:	d107      	bne.n	8004f28 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004f20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 fafc 	bl	8005520 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	691b      	ldr	r3, [r3, #16]
 8004f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f32:	2b40      	cmp	r3, #64	; 0x40
 8004f34:	d10e      	bne.n	8004f54 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f40:	2b40      	cmp	r3, #64	; 0x40
 8004f42:	d107      	bne.n	8004f54 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f000 f90b 	bl	800516a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	f003 0320 	and.w	r3, r3, #32
 8004f5e:	2b20      	cmp	r3, #32
 8004f60:	d10e      	bne.n	8004f80 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	f003 0320 	and.w	r3, r3, #32
 8004f6c:	2b20      	cmp	r3, #32
 8004f6e:	d107      	bne.n	8004f80 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f06f 0220 	mvn.w	r2, #32
 8004f78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f000 fabc 	bl	80054f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f80:	bf00      	nop
 8004f82:	3708      	adds	r7, #8
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f92:	2300      	movs	r3, #0
 8004f94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d101      	bne.n	8004fa4 <HAL_TIM_ConfigClockSource+0x1c>
 8004fa0:	2302      	movs	r3, #2
 8004fa2:	e0b6      	b.n	8005112 <HAL_TIM_ConfigClockSource+0x18a>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2202      	movs	r2, #2
 8004fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fc2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004fc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68ba      	ldr	r2, [r7, #8]
 8004fd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fe0:	d03e      	beq.n	8005060 <HAL_TIM_ConfigClockSource+0xd8>
 8004fe2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fe6:	f200 8087 	bhi.w	80050f8 <HAL_TIM_ConfigClockSource+0x170>
 8004fea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fee:	f000 8086 	beq.w	80050fe <HAL_TIM_ConfigClockSource+0x176>
 8004ff2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ff6:	d87f      	bhi.n	80050f8 <HAL_TIM_ConfigClockSource+0x170>
 8004ff8:	2b70      	cmp	r3, #112	; 0x70
 8004ffa:	d01a      	beq.n	8005032 <HAL_TIM_ConfigClockSource+0xaa>
 8004ffc:	2b70      	cmp	r3, #112	; 0x70
 8004ffe:	d87b      	bhi.n	80050f8 <HAL_TIM_ConfigClockSource+0x170>
 8005000:	2b60      	cmp	r3, #96	; 0x60
 8005002:	d050      	beq.n	80050a6 <HAL_TIM_ConfigClockSource+0x11e>
 8005004:	2b60      	cmp	r3, #96	; 0x60
 8005006:	d877      	bhi.n	80050f8 <HAL_TIM_ConfigClockSource+0x170>
 8005008:	2b50      	cmp	r3, #80	; 0x50
 800500a:	d03c      	beq.n	8005086 <HAL_TIM_ConfigClockSource+0xfe>
 800500c:	2b50      	cmp	r3, #80	; 0x50
 800500e:	d873      	bhi.n	80050f8 <HAL_TIM_ConfigClockSource+0x170>
 8005010:	2b40      	cmp	r3, #64	; 0x40
 8005012:	d058      	beq.n	80050c6 <HAL_TIM_ConfigClockSource+0x13e>
 8005014:	2b40      	cmp	r3, #64	; 0x40
 8005016:	d86f      	bhi.n	80050f8 <HAL_TIM_ConfigClockSource+0x170>
 8005018:	2b30      	cmp	r3, #48	; 0x30
 800501a:	d064      	beq.n	80050e6 <HAL_TIM_ConfigClockSource+0x15e>
 800501c:	2b30      	cmp	r3, #48	; 0x30
 800501e:	d86b      	bhi.n	80050f8 <HAL_TIM_ConfigClockSource+0x170>
 8005020:	2b20      	cmp	r3, #32
 8005022:	d060      	beq.n	80050e6 <HAL_TIM_ConfigClockSource+0x15e>
 8005024:	2b20      	cmp	r3, #32
 8005026:	d867      	bhi.n	80050f8 <HAL_TIM_ConfigClockSource+0x170>
 8005028:	2b00      	cmp	r3, #0
 800502a:	d05c      	beq.n	80050e6 <HAL_TIM_ConfigClockSource+0x15e>
 800502c:	2b10      	cmp	r3, #16
 800502e:	d05a      	beq.n	80050e6 <HAL_TIM_ConfigClockSource+0x15e>
 8005030:	e062      	b.n	80050f8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6818      	ldr	r0, [r3, #0]
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	6899      	ldr	r1, [r3, #8]
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	685a      	ldr	r2, [r3, #4]
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	f000 f9b1 	bl	80053a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005054:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68ba      	ldr	r2, [r7, #8]
 800505c:	609a      	str	r2, [r3, #8]
      break;
 800505e:	e04f      	b.n	8005100 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6818      	ldr	r0, [r3, #0]
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	6899      	ldr	r1, [r3, #8]
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	685a      	ldr	r2, [r3, #4]
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	68db      	ldr	r3, [r3, #12]
 8005070:	f000 f99a 	bl	80053a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	689a      	ldr	r2, [r3, #8]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005082:	609a      	str	r2, [r3, #8]
      break;
 8005084:	e03c      	b.n	8005100 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6818      	ldr	r0, [r3, #0]
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	6859      	ldr	r1, [r3, #4]
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	461a      	mov	r2, r3
 8005094:	f000 f90e 	bl	80052b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	2150      	movs	r1, #80	; 0x50
 800509e:	4618      	mov	r0, r3
 80050a0:	f000 f967 	bl	8005372 <TIM_ITRx_SetConfig>
      break;
 80050a4:	e02c      	b.n	8005100 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6818      	ldr	r0, [r3, #0]
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	6859      	ldr	r1, [r3, #4]
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	461a      	mov	r2, r3
 80050b4:	f000 f92d 	bl	8005312 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2160      	movs	r1, #96	; 0x60
 80050be:	4618      	mov	r0, r3
 80050c0:	f000 f957 	bl	8005372 <TIM_ITRx_SetConfig>
      break;
 80050c4:	e01c      	b.n	8005100 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6818      	ldr	r0, [r3, #0]
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	6859      	ldr	r1, [r3, #4]
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	461a      	mov	r2, r3
 80050d4:	f000 f8ee 	bl	80052b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	2140      	movs	r1, #64	; 0x40
 80050de:	4618      	mov	r0, r3
 80050e0:	f000 f947 	bl	8005372 <TIM_ITRx_SetConfig>
      break;
 80050e4:	e00c      	b.n	8005100 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4619      	mov	r1, r3
 80050f0:	4610      	mov	r0, r2
 80050f2:	f000 f93e 	bl	8005372 <TIM_ITRx_SetConfig>
      break;
 80050f6:	e003      	b.n	8005100 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	73fb      	strb	r3, [r7, #15]
      break;
 80050fc:	e000      	b.n	8005100 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80050fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005110:	7bfb      	ldrb	r3, [r7, #15]
}
 8005112:	4618      	mov	r0, r3
 8005114:	3710      	adds	r7, #16
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}

0800511a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800511a:	b480      	push	{r7}
 800511c:	b083      	sub	sp, #12
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005122:	bf00      	nop
 8005124:	370c      	adds	r7, #12
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr

0800512e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800512e:	b480      	push	{r7}
 8005130:	b083      	sub	sp, #12
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005136:	bf00      	nop
 8005138:	370c      	adds	r7, #12
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr

08005142 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005142:	b480      	push	{r7}
 8005144:	b083      	sub	sp, #12
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800514a:	bf00      	nop
 800514c:	370c      	adds	r7, #12
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr

08005156 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005156:	b480      	push	{r7}
 8005158:	b083      	sub	sp, #12
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800515e:	bf00      	nop
 8005160:	370c      	adds	r7, #12
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr

0800516a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800516a:	b480      	push	{r7}
 800516c:	b083      	sub	sp, #12
 800516e:	af00      	add	r7, sp, #0
 8005170:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005172:	bf00      	nop
 8005174:	370c      	adds	r7, #12
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr
	...

08005180 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005180:	b480      	push	{r7}
 8005182:	b085      	sub	sp, #20
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	4a40      	ldr	r2, [pc, #256]	; (8005294 <TIM_Base_SetConfig+0x114>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d013      	beq.n	80051c0 <TIM_Base_SetConfig+0x40>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800519e:	d00f      	beq.n	80051c0 <TIM_Base_SetConfig+0x40>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	4a3d      	ldr	r2, [pc, #244]	; (8005298 <TIM_Base_SetConfig+0x118>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d00b      	beq.n	80051c0 <TIM_Base_SetConfig+0x40>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	4a3c      	ldr	r2, [pc, #240]	; (800529c <TIM_Base_SetConfig+0x11c>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d007      	beq.n	80051c0 <TIM_Base_SetConfig+0x40>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	4a3b      	ldr	r2, [pc, #236]	; (80052a0 <TIM_Base_SetConfig+0x120>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d003      	beq.n	80051c0 <TIM_Base_SetConfig+0x40>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	4a3a      	ldr	r2, [pc, #232]	; (80052a4 <TIM_Base_SetConfig+0x124>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d108      	bne.n	80051d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	68fa      	ldr	r2, [r7, #12]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4a2f      	ldr	r2, [pc, #188]	; (8005294 <TIM_Base_SetConfig+0x114>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d01f      	beq.n	800521a <TIM_Base_SetConfig+0x9a>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051e0:	d01b      	beq.n	800521a <TIM_Base_SetConfig+0x9a>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a2c      	ldr	r2, [pc, #176]	; (8005298 <TIM_Base_SetConfig+0x118>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d017      	beq.n	800521a <TIM_Base_SetConfig+0x9a>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4a2b      	ldr	r2, [pc, #172]	; (800529c <TIM_Base_SetConfig+0x11c>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d013      	beq.n	800521a <TIM_Base_SetConfig+0x9a>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4a2a      	ldr	r2, [pc, #168]	; (80052a0 <TIM_Base_SetConfig+0x120>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d00f      	beq.n	800521a <TIM_Base_SetConfig+0x9a>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4a29      	ldr	r2, [pc, #164]	; (80052a4 <TIM_Base_SetConfig+0x124>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d00b      	beq.n	800521a <TIM_Base_SetConfig+0x9a>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a28      	ldr	r2, [pc, #160]	; (80052a8 <TIM_Base_SetConfig+0x128>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d007      	beq.n	800521a <TIM_Base_SetConfig+0x9a>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4a27      	ldr	r2, [pc, #156]	; (80052ac <TIM_Base_SetConfig+0x12c>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d003      	beq.n	800521a <TIM_Base_SetConfig+0x9a>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a26      	ldr	r2, [pc, #152]	; (80052b0 <TIM_Base_SetConfig+0x130>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d108      	bne.n	800522c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005220:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	68fa      	ldr	r2, [r7, #12]
 8005228:	4313      	orrs	r3, r2
 800522a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	695b      	ldr	r3, [r3, #20]
 8005236:	4313      	orrs	r3, r2
 8005238:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	68fa      	ldr	r2, [r7, #12]
 800523e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	689a      	ldr	r2, [r3, #8]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	4a10      	ldr	r2, [pc, #64]	; (8005294 <TIM_Base_SetConfig+0x114>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d00f      	beq.n	8005278 <TIM_Base_SetConfig+0xf8>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	4a12      	ldr	r2, [pc, #72]	; (80052a4 <TIM_Base_SetConfig+0x124>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d00b      	beq.n	8005278 <TIM_Base_SetConfig+0xf8>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	4a11      	ldr	r2, [pc, #68]	; (80052a8 <TIM_Base_SetConfig+0x128>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d007      	beq.n	8005278 <TIM_Base_SetConfig+0xf8>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	4a10      	ldr	r2, [pc, #64]	; (80052ac <TIM_Base_SetConfig+0x12c>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d003      	beq.n	8005278 <TIM_Base_SetConfig+0xf8>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4a0f      	ldr	r2, [pc, #60]	; (80052b0 <TIM_Base_SetConfig+0x130>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d103      	bne.n	8005280 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	691a      	ldr	r2, [r3, #16]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	615a      	str	r2, [r3, #20]
}
 8005286:	bf00      	nop
 8005288:	3714      	adds	r7, #20
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr
 8005292:	bf00      	nop
 8005294:	40012c00 	.word	0x40012c00
 8005298:	40000400 	.word	0x40000400
 800529c:	40000800 	.word	0x40000800
 80052a0:	40000c00 	.word	0x40000c00
 80052a4:	40013400 	.word	0x40013400
 80052a8:	40014000 	.word	0x40014000
 80052ac:	40014400 	.word	0x40014400
 80052b0:	40014800 	.word	0x40014800

080052b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b087      	sub	sp, #28
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	60f8      	str	r0, [r7, #12]
 80052bc:	60b9      	str	r1, [r7, #8]
 80052be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	6a1b      	ldr	r3, [r3, #32]
 80052c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	6a1b      	ldr	r3, [r3, #32]
 80052ca:	f023 0201 	bic.w	r2, r3, #1
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	699b      	ldr	r3, [r3, #24]
 80052d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	011b      	lsls	r3, r3, #4
 80052e4:	693a      	ldr	r2, [r7, #16]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	f023 030a 	bic.w	r3, r3, #10
 80052f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80052f2:	697a      	ldr	r2, [r7, #20]
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	693a      	ldr	r2, [r7, #16]
 80052fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	697a      	ldr	r2, [r7, #20]
 8005304:	621a      	str	r2, [r3, #32]
}
 8005306:	bf00      	nop
 8005308:	371c      	adds	r7, #28
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr

08005312 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005312:	b480      	push	{r7}
 8005314:	b087      	sub	sp, #28
 8005316:	af00      	add	r7, sp, #0
 8005318:	60f8      	str	r0, [r7, #12]
 800531a:	60b9      	str	r1, [r7, #8]
 800531c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	6a1b      	ldr	r3, [r3, #32]
 8005322:	f023 0210 	bic.w	r2, r3, #16
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	699b      	ldr	r3, [r3, #24]
 800532e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	6a1b      	ldr	r3, [r3, #32]
 8005334:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800533c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	031b      	lsls	r3, r3, #12
 8005342:	697a      	ldr	r2, [r7, #20]
 8005344:	4313      	orrs	r3, r2
 8005346:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800534e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	011b      	lsls	r3, r3, #4
 8005354:	693a      	ldr	r2, [r7, #16]
 8005356:	4313      	orrs	r3, r2
 8005358:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	697a      	ldr	r2, [r7, #20]
 800535e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	693a      	ldr	r2, [r7, #16]
 8005364:	621a      	str	r2, [r3, #32]
}
 8005366:	bf00      	nop
 8005368:	371c      	adds	r7, #28
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr

08005372 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005372:	b480      	push	{r7}
 8005374:	b085      	sub	sp, #20
 8005376:	af00      	add	r7, sp, #0
 8005378:	6078      	str	r0, [r7, #4]
 800537a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005388:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800538a:	683a      	ldr	r2, [r7, #0]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	4313      	orrs	r3, r2
 8005390:	f043 0307 	orr.w	r3, r3, #7
 8005394:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	68fa      	ldr	r2, [r7, #12]
 800539a:	609a      	str	r2, [r3, #8]
}
 800539c:	bf00      	nop
 800539e:	3714      	adds	r7, #20
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr

080053a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b087      	sub	sp, #28
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	60b9      	str	r1, [r7, #8]
 80053b2:	607a      	str	r2, [r7, #4]
 80053b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	021a      	lsls	r2, r3, #8
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	431a      	orrs	r2, r3
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	697a      	ldr	r2, [r7, #20]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	697a      	ldr	r2, [r7, #20]
 80053da:	609a      	str	r2, [r3, #8]
}
 80053dc:	bf00      	nop
 80053de:	371c      	adds	r7, #28
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b085      	sub	sp, #20
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d101      	bne.n	8005400 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053fc:	2302      	movs	r3, #2
 80053fe:	e068      	b.n	80054d2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2202      	movs	r2, #2
 800540c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a2e      	ldr	r2, [pc, #184]	; (80054e0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d004      	beq.n	8005434 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a2d      	ldr	r2, [pc, #180]	; (80054e4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d108      	bne.n	8005446 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800543a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	68fa      	ldr	r2, [r7, #12]
 8005442:	4313      	orrs	r3, r2
 8005444:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800544c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	4313      	orrs	r3, r2
 8005456:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	68fa      	ldr	r2, [r7, #12]
 800545e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a1e      	ldr	r2, [pc, #120]	; (80054e0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d01d      	beq.n	80054a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005472:	d018      	beq.n	80054a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a1b      	ldr	r2, [pc, #108]	; (80054e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d013      	beq.n	80054a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a1a      	ldr	r2, [pc, #104]	; (80054ec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d00e      	beq.n	80054a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a18      	ldr	r2, [pc, #96]	; (80054f0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d009      	beq.n	80054a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a13      	ldr	r2, [pc, #76]	; (80054e4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d004      	beq.n	80054a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a14      	ldr	r2, [pc, #80]	; (80054f4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d10c      	bne.n	80054c0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	68ba      	ldr	r2, [r7, #8]
 80054b4:	4313      	orrs	r3, r2
 80054b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	68ba      	ldr	r2, [r7, #8]
 80054be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2201      	movs	r2, #1
 80054c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2200      	movs	r2, #0
 80054cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3714      	adds	r7, #20
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr
 80054de:	bf00      	nop
 80054e0:	40012c00 	.word	0x40012c00
 80054e4:	40013400 	.word	0x40013400
 80054e8:	40000400 	.word	0x40000400
 80054ec:	40000800 	.word	0x40000800
 80054f0:	40000c00 	.word	0x40000c00
 80054f4:	40014000 	.word	0x40014000

080054f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005500:	bf00      	nop
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005514:	bf00      	nop
 8005516:	370c      	adds	r7, #12
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005528:	bf00      	nop
 800552a:	370c      	adds	r7, #12
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b082      	sub	sp, #8
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d101      	bne.n	8005546 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	e040      	b.n	80055c8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800554a:	2b00      	cmp	r3, #0
 800554c:	d106      	bne.n	800555c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f7fc f9e6 	bl	8001928 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2224      	movs	r2, #36	; 0x24
 8005560:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f022 0201 	bic.w	r2, r2, #1
 8005570:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f000 fcbe 	bl	8005ef4 <UART_SetConfig>
 8005578:	4603      	mov	r3, r0
 800557a:	2b01      	cmp	r3, #1
 800557c:	d101      	bne.n	8005582 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	e022      	b.n	80055c8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005586:	2b00      	cmp	r3, #0
 8005588:	d002      	beq.n	8005590 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f000 ff6a 	bl	8006464 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	685a      	ldr	r2, [r3, #4]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800559e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	689a      	ldr	r2, [r3, #8]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f042 0201 	orr.w	r2, r2, #1
 80055be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f000 fff1 	bl	80065a8 <UART_CheckIdleState>
 80055c6:	4603      	mov	r3, r0
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3708      	adds	r7, #8
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}

080055d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b08a      	sub	sp, #40	; 0x28
 80055d4:	af02      	add	r7, sp, #8
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	60b9      	str	r1, [r7, #8]
 80055da:	603b      	str	r3, [r7, #0]
 80055dc:	4613      	mov	r3, r2
 80055de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055e4:	2b20      	cmp	r3, #32
 80055e6:	f040 8082 	bne.w	80056ee <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d002      	beq.n	80055f6 <HAL_UART_Transmit+0x26>
 80055f0:	88fb      	ldrh	r3, [r7, #6]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d101      	bne.n	80055fa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e07a      	b.n	80056f0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005600:	2b01      	cmp	r3, #1
 8005602:	d101      	bne.n	8005608 <HAL_UART_Transmit+0x38>
 8005604:	2302      	movs	r3, #2
 8005606:	e073      	b.n	80056f0 <HAL_UART_Transmit+0x120>
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2200      	movs	r2, #0
 8005614:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2221      	movs	r2, #33	; 0x21
 800561c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800561e:	f7fc fb2d 	bl	8001c7c <HAL_GetTick>
 8005622:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	88fa      	ldrh	r2, [r7, #6]
 8005628:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	88fa      	ldrh	r2, [r7, #6]
 8005630:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800563c:	d108      	bne.n	8005650 <HAL_UART_Transmit+0x80>
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d104      	bne.n	8005650 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005646:	2300      	movs	r3, #0
 8005648:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	61bb      	str	r3, [r7, #24]
 800564e:	e003      	b.n	8005658 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005654:	2300      	movs	r3, #0
 8005656:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2200      	movs	r2, #0
 800565c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005660:	e02d      	b.n	80056be <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	9300      	str	r3, [sp, #0]
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	2200      	movs	r2, #0
 800566a:	2180      	movs	r1, #128	; 0x80
 800566c:	68f8      	ldr	r0, [r7, #12]
 800566e:	f000 ffe4 	bl	800663a <UART_WaitOnFlagUntilTimeout>
 8005672:	4603      	mov	r3, r0
 8005674:	2b00      	cmp	r3, #0
 8005676:	d001      	beq.n	800567c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005678:	2303      	movs	r3, #3
 800567a:	e039      	b.n	80056f0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d10b      	bne.n	800569a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005682:	69bb      	ldr	r3, [r7, #24]
 8005684:	881a      	ldrh	r2, [r3, #0]
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800568e:	b292      	uxth	r2, r2
 8005690:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005692:	69bb      	ldr	r3, [r7, #24]
 8005694:	3302      	adds	r3, #2
 8005696:	61bb      	str	r3, [r7, #24]
 8005698:	e008      	b.n	80056ac <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800569a:	69fb      	ldr	r3, [r7, #28]
 800569c:	781a      	ldrb	r2, [r3, #0]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	b292      	uxth	r2, r2
 80056a4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	3301      	adds	r3, #1
 80056aa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	3b01      	subs	r3, #1
 80056b6:	b29a      	uxth	r2, r3
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d1cb      	bne.n	8005662 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	9300      	str	r3, [sp, #0]
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	2200      	movs	r2, #0
 80056d2:	2140      	movs	r1, #64	; 0x40
 80056d4:	68f8      	ldr	r0, [r7, #12]
 80056d6:	f000 ffb0 	bl	800663a <UART_WaitOnFlagUntilTimeout>
 80056da:	4603      	mov	r3, r0
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d001      	beq.n	80056e4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80056e0:	2303      	movs	r3, #3
 80056e2:	e005      	b.n	80056f0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2220      	movs	r2, #32
 80056e8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80056ea:	2300      	movs	r3, #0
 80056ec:	e000      	b.n	80056f0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80056ee:	2302      	movs	r3, #2
  }
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3720      	adds	r7, #32
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b08a      	sub	sp, #40	; 0x28
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	4613      	mov	r3, r2
 8005704:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800570a:	2b20      	cmp	r3, #32
 800570c:	d142      	bne.n	8005794 <HAL_UART_Receive_DMA+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d002      	beq.n	800571a <HAL_UART_Receive_DMA+0x22>
 8005714:	88fb      	ldrh	r3, [r7, #6]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d101      	bne.n	800571e <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e03b      	b.n	8005796 <HAL_UART_Receive_DMA+0x9e>
    }

    __HAL_LOCK(huart);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005724:	2b01      	cmp	r3, #1
 8005726:	d101      	bne.n	800572c <HAL_UART_Receive_DMA+0x34>
 8005728:	2302      	movs	r3, #2
 800572a:	e034      	b.n	8005796 <HAL_UART_Receive_DMA+0x9e>
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2201      	movs	r2, #1
 8005730:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2200      	movs	r2, #0
 8005738:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a18      	ldr	r2, [pc, #96]	; (80057a0 <HAL_UART_Receive_DMA+0xa8>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d01f      	beq.n	8005784 <HAL_UART_Receive_DMA+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800574e:	2b00      	cmp	r3, #0
 8005750:	d018      	beq.n	8005784 <HAL_UART_Receive_DMA+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	e853 3f00 	ldrex	r3, [r3]
 800575e:	613b      	str	r3, [r7, #16]
   return(result);
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005766:	627b      	str	r3, [r7, #36]	; 0x24
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	461a      	mov	r2, r3
 800576e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005770:	623b      	str	r3, [r7, #32]
 8005772:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005774:	69f9      	ldr	r1, [r7, #28]
 8005776:	6a3a      	ldr	r2, [r7, #32]
 8005778:	e841 2300 	strex	r3, r2, [r1]
 800577c:	61bb      	str	r3, [r7, #24]
   return(result);
 800577e:	69bb      	ldr	r3, [r7, #24]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d1e6      	bne.n	8005752 <HAL_UART_Receive_DMA+0x5a>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005784:	88fb      	ldrh	r3, [r7, #6]
 8005786:	461a      	mov	r2, r3
 8005788:	68b9      	ldr	r1, [r7, #8]
 800578a:	68f8      	ldr	r0, [r7, #12]
 800578c:	f001 f81a 	bl	80067c4 <UART_Start_Receive_DMA>
 8005790:	4603      	mov	r3, r0
 8005792:	e000      	b.n	8005796 <HAL_UART_Receive_DMA+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005794:	2302      	movs	r3, #2
  }
}
 8005796:	4618      	mov	r0, r3
 8005798:	3728      	adds	r7, #40	; 0x28
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}
 800579e:	bf00      	nop
 80057a0:	40008000 	.word	0x40008000

080057a4 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b090      	sub	sp, #64	; 0x40
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057b6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057c2:	2b80      	cmp	r3, #128	; 0x80
 80057c4:	d139      	bne.n	800583a <HAL_UART_DMAStop+0x96>
 80057c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057c8:	2b21      	cmp	r3, #33	; 0x21
 80057ca:	d136      	bne.n	800583a <HAL_UART_DMAStop+0x96>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	3308      	adds	r3, #8
 80057d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d4:	6a3b      	ldr	r3, [r7, #32]
 80057d6:	e853 3f00 	ldrex	r3, [r3]
 80057da:	61fb      	str	r3, [r7, #28]
   return(result);
 80057dc:	69fb      	ldr	r3, [r7, #28]
 80057de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057e2:	637b      	str	r3, [r7, #52]	; 0x34
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	3308      	adds	r3, #8
 80057ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80057ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80057f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057f4:	e841 2300 	strex	r3, r2, [r1]
 80057f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80057fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d1e5      	bne.n	80057cc <HAL_UART_DMAStop+0x28>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005804:	2b00      	cmp	r3, #0
 8005806:	d015      	beq.n	8005834 <HAL_UART_DMAStop+0x90>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800580c:	4618      	mov	r0, r3
 800580e:	f7fc fc8f 	bl	8002130 <HAL_DMA_Abort>
 8005812:	4603      	mov	r3, r0
 8005814:	2b00      	cmp	r3, #0
 8005816:	d00d      	beq.n	8005834 <HAL_UART_DMAStop+0x90>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800581c:	4618      	mov	r0, r3
 800581e:	f7fc fdb5 	bl	800238c <HAL_DMA_GetError>
 8005822:	4603      	mov	r3, r0
 8005824:	2b20      	cmp	r3, #32
 8005826:	d105      	bne.n	8005834 <HAL_UART_DMAStop+0x90>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2210      	movs	r2, #16
 800582c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005830:	2303      	movs	r3, #3
 8005832:	e044      	b.n	80058be <HAL_UART_DMAStop+0x11a>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f001 f86b 	bl	8006910 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005844:	2b40      	cmp	r3, #64	; 0x40
 8005846:	d139      	bne.n	80058bc <HAL_UART_DMAStop+0x118>
 8005848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800584a:	2b22      	cmp	r3, #34	; 0x22
 800584c:	d136      	bne.n	80058bc <HAL_UART_DMAStop+0x118>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	3308      	adds	r3, #8
 8005854:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	e853 3f00 	ldrex	r3, [r3]
 800585c:	60bb      	str	r3, [r7, #8]
   return(result);
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005864:	633b      	str	r3, [r7, #48]	; 0x30
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	3308      	adds	r3, #8
 800586c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800586e:	61ba      	str	r2, [r7, #24]
 8005870:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005872:	6979      	ldr	r1, [r7, #20]
 8005874:	69ba      	ldr	r2, [r7, #24]
 8005876:	e841 2300 	strex	r3, r2, [r1]
 800587a:	613b      	str	r3, [r7, #16]
   return(result);
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d1e5      	bne.n	800584e <HAL_UART_DMAStop+0xaa>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005886:	2b00      	cmp	r3, #0
 8005888:	d015      	beq.n	80058b6 <HAL_UART_DMAStop+0x112>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800588e:	4618      	mov	r0, r3
 8005890:	f7fc fc4e 	bl	8002130 <HAL_DMA_Abort>
 8005894:	4603      	mov	r3, r0
 8005896:	2b00      	cmp	r3, #0
 8005898:	d00d      	beq.n	80058b6 <HAL_UART_DMAStop+0x112>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800589e:	4618      	mov	r0, r3
 80058a0:	f7fc fd74 	bl	800238c <HAL_DMA_GetError>
 80058a4:	4603      	mov	r3, r0
 80058a6:	2b20      	cmp	r3, #32
 80058a8:	d105      	bne.n	80058b6 <HAL_UART_DMAStop+0x112>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2210      	movs	r2, #16
 80058ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80058b2:	2303      	movs	r3, #3
 80058b4:	e003      	b.n	80058be <HAL_UART_DMAStop+0x11a>
        }
      }
    }

    UART_EndRxTransfer(huart);
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f001 f850 	bl	800695c <UART_EndRxTransfer>
  }

  return HAL_OK;
 80058bc:	2300      	movs	r3, #0
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3740      	adds	r7, #64	; 0x40
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
	...

080058c8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b0ba      	sub	sp, #232	; 0xe8
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	69db      	ldr	r3, [r3, #28]
 80058d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80058ee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80058f2:	f640 030f 	movw	r3, #2063	; 0x80f
 80058f6:	4013      	ands	r3, r2
 80058f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80058fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005900:	2b00      	cmp	r3, #0
 8005902:	d115      	bne.n	8005930 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005904:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005908:	f003 0320 	and.w	r3, r3, #32
 800590c:	2b00      	cmp	r3, #0
 800590e:	d00f      	beq.n	8005930 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005910:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005914:	f003 0320 	and.w	r3, r3, #32
 8005918:	2b00      	cmp	r3, #0
 800591a:	d009      	beq.n	8005930 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005920:	2b00      	cmp	r3, #0
 8005922:	f000 82a6 	beq.w	8005e72 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	4798      	blx	r3
      }
      return;
 800592e:	e2a0      	b.n	8005e72 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005930:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005934:	2b00      	cmp	r3, #0
 8005936:	f000 8117 	beq.w	8005b68 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800593a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800593e:	f003 0301 	and.w	r3, r3, #1
 8005942:	2b00      	cmp	r3, #0
 8005944:	d106      	bne.n	8005954 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005946:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800594a:	4b85      	ldr	r3, [pc, #532]	; (8005b60 <HAL_UART_IRQHandler+0x298>)
 800594c:	4013      	ands	r3, r2
 800594e:	2b00      	cmp	r3, #0
 8005950:	f000 810a 	beq.w	8005b68 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005954:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005958:	f003 0301 	and.w	r3, r3, #1
 800595c:	2b00      	cmp	r3, #0
 800595e:	d011      	beq.n	8005984 <HAL_UART_IRQHandler+0xbc>
 8005960:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005968:	2b00      	cmp	r3, #0
 800596a:	d00b      	beq.n	8005984 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	2201      	movs	r2, #1
 8005972:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800597a:	f043 0201 	orr.w	r2, r3, #1
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005984:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005988:	f003 0302 	and.w	r3, r3, #2
 800598c:	2b00      	cmp	r3, #0
 800598e:	d011      	beq.n	80059b4 <HAL_UART_IRQHandler+0xec>
 8005990:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005994:	f003 0301 	and.w	r3, r3, #1
 8005998:	2b00      	cmp	r3, #0
 800599a:	d00b      	beq.n	80059b4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	2202      	movs	r2, #2
 80059a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059aa:	f043 0204 	orr.w	r2, r3, #4
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80059b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059b8:	f003 0304 	and.w	r3, r3, #4
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d011      	beq.n	80059e4 <HAL_UART_IRQHandler+0x11c>
 80059c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059c4:	f003 0301 	and.w	r3, r3, #1
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d00b      	beq.n	80059e4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	2204      	movs	r2, #4
 80059d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059da:	f043 0202 	orr.w	r2, r3, #2
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80059e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059e8:	f003 0308 	and.w	r3, r3, #8
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d017      	beq.n	8005a20 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80059f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059f4:	f003 0320 	and.w	r3, r3, #32
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d105      	bne.n	8005a08 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80059fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a00:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d00b      	beq.n	8005a20 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2208      	movs	r2, #8
 8005a0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a16:	f043 0208 	orr.w	r2, r3, #8
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005a20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d012      	beq.n	8005a52 <HAL_UART_IRQHandler+0x18a>
 8005a2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a30:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d00c      	beq.n	8005a52 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a40:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a48:	f043 0220 	orr.w	r2, r3, #32
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	f000 820c 	beq.w	8005e76 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005a5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a62:	f003 0320 	and.w	r3, r3, #32
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d00d      	beq.n	8005a86 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005a6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a6e:	f003 0320 	and.w	r3, r3, #32
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d007      	beq.n	8005a86 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d003      	beq.n	8005a86 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a8c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a9a:	2b40      	cmp	r3, #64	; 0x40
 8005a9c:	d005      	beq.n	8005aaa <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005a9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005aa2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d04f      	beq.n	8005b4a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 ff56 	bl	800695c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aba:	2b40      	cmp	r3, #64	; 0x40
 8005abc:	d141      	bne.n	8005b42 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	3308      	adds	r3, #8
 8005ac4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005acc:	e853 3f00 	ldrex	r3, [r3]
 8005ad0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005ad4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ad8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005adc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	3308      	adds	r3, #8
 8005ae6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005aea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005aee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005af6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005afa:	e841 2300 	strex	r3, r2, [r1]
 8005afe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005b02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d1d9      	bne.n	8005abe <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d013      	beq.n	8005b3a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b16:	4a13      	ldr	r2, [pc, #76]	; (8005b64 <HAL_UART_IRQHandler+0x29c>)
 8005b18:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f7fc fb44 	bl	80021ac <HAL_DMA_Abort_IT>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d017      	beq.n	8005b5a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b30:	687a      	ldr	r2, [r7, #4]
 8005b32:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005b34:	4610      	mov	r0, r2
 8005b36:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b38:	e00f      	b.n	8005b5a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 f9c4 	bl	8005ec8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b40:	e00b      	b.n	8005b5a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 f9c0 	bl	8005ec8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b48:	e007      	b.n	8005b5a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 f9bc 	bl	8005ec8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005b58:	e18d      	b.n	8005e76 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b5a:	bf00      	nop
    return;
 8005b5c:	e18b      	b.n	8005e76 <HAL_UART_IRQHandler+0x5ae>
 8005b5e:	bf00      	nop
 8005b60:	04000120 	.word	0x04000120
 8005b64:	08006bfb 	.word	0x08006bfb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	f040 8146 	bne.w	8005dfe <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005b72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b76:	f003 0310 	and.w	r3, r3, #16
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	f000 813f 	beq.w	8005dfe <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005b80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b84:	f003 0310 	and.w	r3, r3, #16
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	f000 8138 	beq.w	8005dfe <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	2210      	movs	r2, #16
 8005b94:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ba0:	2b40      	cmp	r3, #64	; 0x40
 8005ba2:	f040 80b4 	bne.w	8005d0e <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005bb2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	f000 815f 	beq.w	8005e7a <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005bc2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	f080 8157 	bcs.w	8005e7a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005bd2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 0320 	and.w	r3, r3, #32
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	f040 8085 	bne.w	8005cf2 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005bf4:	e853 3f00 	ldrex	r3, [r3]
 8005bf8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005bfc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c04:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005c12:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005c16:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c1a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005c1e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005c22:	e841 2300 	strex	r3, r2, [r1]
 8005c26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005c2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d1da      	bne.n	8005be8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	3308      	adds	r3, #8
 8005c38:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c3c:	e853 3f00 	ldrex	r3, [r3]
 8005c40:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005c42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c44:	f023 0301 	bic.w	r3, r3, #1
 8005c48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	3308      	adds	r3, #8
 8005c52:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005c56:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005c5a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c5c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005c5e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005c62:	e841 2300 	strex	r3, r2, [r1]
 8005c66:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005c68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d1e1      	bne.n	8005c32 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	3308      	adds	r3, #8
 8005c74:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c78:	e853 3f00 	ldrex	r3, [r3]
 8005c7c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005c7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	3308      	adds	r3, #8
 8005c8e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005c92:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005c94:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c96:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005c98:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005c9a:	e841 2300 	strex	r3, r2, [r1]
 8005c9e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005ca0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d1e3      	bne.n	8005c6e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2220      	movs	r2, #32
 8005caa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cba:	e853 3f00 	ldrex	r3, [r3]
 8005cbe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005cc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cc2:	f023 0310 	bic.w	r3, r3, #16
 8005cc6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	461a      	mov	r2, r3
 8005cd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005cd4:	65bb      	str	r3, [r7, #88]	; 0x58
 8005cd6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005cda:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005cdc:	e841 2300 	strex	r3, r2, [r1]
 8005ce0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005ce2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d1e4      	bne.n	8005cb2 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cec:	4618      	mov	r0, r3
 8005cee:	f7fc fa1f 	bl	8002130 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	1ad3      	subs	r3, r2, r3
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	4619      	mov	r1, r3
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f000 f8e8 	bl	8005edc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005d0c:	e0b5      	b.n	8005e7a <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	1ad3      	subs	r3, r2, r3
 8005d1e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	f000 80a7 	beq.w	8005e7e <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8005d30:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	f000 80a2 	beq.w	8005e7e <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d42:	e853 3f00 	ldrex	r3, [r3]
 8005d46:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d4a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d4e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	461a      	mov	r2, r3
 8005d58:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d5c:	647b      	str	r3, [r7, #68]	; 0x44
 8005d5e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d60:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d64:	e841 2300 	strex	r3, r2, [r1]
 8005d68:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005d6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d1e4      	bne.n	8005d3a <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	3308      	adds	r3, #8
 8005d76:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7a:	e853 3f00 	ldrex	r3, [r3]
 8005d7e:	623b      	str	r3, [r7, #32]
   return(result);
 8005d80:	6a3b      	ldr	r3, [r7, #32]
 8005d82:	f023 0301 	bic.w	r3, r3, #1
 8005d86:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	3308      	adds	r3, #8
 8005d90:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005d94:	633a      	str	r2, [r7, #48]	; 0x30
 8005d96:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d98:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d9c:	e841 2300 	strex	r3, r2, [r1]
 8005da0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d1e3      	bne.n	8005d70 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2220      	movs	r2, #32
 8005dac:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	e853 3f00 	ldrex	r3, [r3]
 8005dc6:	60fb      	str	r3, [r7, #12]
   return(result);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f023 0310 	bic.w	r3, r3, #16
 8005dce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005ddc:	61fb      	str	r3, [r7, #28]
 8005dde:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de0:	69b9      	ldr	r1, [r7, #24]
 8005de2:	69fa      	ldr	r2, [r7, #28]
 8005de4:	e841 2300 	strex	r3, r2, [r1]
 8005de8:	617b      	str	r3, [r7, #20]
   return(result);
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d1e4      	bne.n	8005dba <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005df0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005df4:	4619      	mov	r1, r3
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f000 f870 	bl	8005edc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005dfc:	e03f      	b.n	8005e7e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005dfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d00e      	beq.n	8005e28 <HAL_UART_IRQHandler+0x560>
 8005e0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d008      	beq.n	8005e28 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005e1e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f000 ff2a 	bl	8006c7a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005e26:	e02d      	b.n	8005e84 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005e28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d00e      	beq.n	8005e52 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005e34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d008      	beq.n	8005e52 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d01c      	beq.n	8005e82 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	4798      	blx	r3
    }
    return;
 8005e50:	e017      	b.n	8005e82 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005e52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d012      	beq.n	8005e84 <HAL_UART_IRQHandler+0x5bc>
 8005e5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d00c      	beq.n	8005e84 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f000 fedb 	bl	8006c26 <UART_EndTransmit_IT>
    return;
 8005e70:	e008      	b.n	8005e84 <HAL_UART_IRQHandler+0x5bc>
      return;
 8005e72:	bf00      	nop
 8005e74:	e006      	b.n	8005e84 <HAL_UART_IRQHandler+0x5bc>
    return;
 8005e76:	bf00      	nop
 8005e78:	e004      	b.n	8005e84 <HAL_UART_IRQHandler+0x5bc>
      return;
 8005e7a:	bf00      	nop
 8005e7c:	e002      	b.n	8005e84 <HAL_UART_IRQHandler+0x5bc>
      return;
 8005e7e:	bf00      	nop
 8005e80:	e000      	b.n	8005e84 <HAL_UART_IRQHandler+0x5bc>
    return;
 8005e82:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005e84:	37e8      	adds	r7, #232	; 0xe8
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
 8005e8a:	bf00      	nop

08005e8c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005e94:	bf00      	nop
 8005e96:	370c      	adds	r7, #12
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr

08005ea0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005ea8:	bf00      	nop
 8005eaa:	370c      	adds	r7, #12
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr

08005eb4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005ebc:	bf00      	nop
 8005ebe:	370c      	adds	r7, #12
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr

08005ec8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b083      	sub	sp, #12
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005ed0:	bf00      	nop
 8005ed2:	370c      	adds	r7, #12
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr

08005edc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b083      	sub	sp, #12
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	460b      	mov	r3, r1
 8005ee6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005ee8:	bf00      	nop
 8005eea:	370c      	adds	r7, #12
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr

08005ef4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ef4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ef8:	b08a      	sub	sp, #40	; 0x28
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005efe:	2300      	movs	r3, #0
 8005f00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	689a      	ldr	r2, [r3, #8]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	691b      	ldr	r3, [r3, #16]
 8005f0c:	431a      	orrs	r2, r3
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	695b      	ldr	r3, [r3, #20]
 8005f12:	431a      	orrs	r2, r3
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	69db      	ldr	r3, [r3, #28]
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	4ba4      	ldr	r3, [pc, #656]	; (80061b4 <UART_SetConfig+0x2c0>)
 8005f24:	4013      	ands	r3, r2
 8005f26:	68fa      	ldr	r2, [r7, #12]
 8005f28:	6812      	ldr	r2, [r2, #0]
 8005f2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005f2c:	430b      	orrs	r3, r1
 8005f2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	68da      	ldr	r2, [r3, #12]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	430a      	orrs	r2, r1
 8005f44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	699b      	ldr	r3, [r3, #24]
 8005f4a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a99      	ldr	r2, [pc, #612]	; (80061b8 <UART_SetConfig+0x2c4>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d004      	beq.n	8005f60 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	6a1b      	ldr	r3, [r3, #32]
 8005f5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f70:	430a      	orrs	r2, r1
 8005f72:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a90      	ldr	r2, [pc, #576]	; (80061bc <UART_SetConfig+0x2c8>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d126      	bne.n	8005fcc <UART_SetConfig+0xd8>
 8005f7e:	4b90      	ldr	r3, [pc, #576]	; (80061c0 <UART_SetConfig+0x2cc>)
 8005f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f84:	f003 0303 	and.w	r3, r3, #3
 8005f88:	2b03      	cmp	r3, #3
 8005f8a:	d81b      	bhi.n	8005fc4 <UART_SetConfig+0xd0>
 8005f8c:	a201      	add	r2, pc, #4	; (adr r2, 8005f94 <UART_SetConfig+0xa0>)
 8005f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f92:	bf00      	nop
 8005f94:	08005fa5 	.word	0x08005fa5
 8005f98:	08005fb5 	.word	0x08005fb5
 8005f9c:	08005fad 	.word	0x08005fad
 8005fa0:	08005fbd 	.word	0x08005fbd
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005faa:	e116      	b.n	80061da <UART_SetConfig+0x2e6>
 8005fac:	2302      	movs	r3, #2
 8005fae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fb2:	e112      	b.n	80061da <UART_SetConfig+0x2e6>
 8005fb4:	2304      	movs	r3, #4
 8005fb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fba:	e10e      	b.n	80061da <UART_SetConfig+0x2e6>
 8005fbc:	2308      	movs	r3, #8
 8005fbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fc2:	e10a      	b.n	80061da <UART_SetConfig+0x2e6>
 8005fc4:	2310      	movs	r3, #16
 8005fc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fca:	e106      	b.n	80061da <UART_SetConfig+0x2e6>
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a7c      	ldr	r2, [pc, #496]	; (80061c4 <UART_SetConfig+0x2d0>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d138      	bne.n	8006048 <UART_SetConfig+0x154>
 8005fd6:	4b7a      	ldr	r3, [pc, #488]	; (80061c0 <UART_SetConfig+0x2cc>)
 8005fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fdc:	f003 030c 	and.w	r3, r3, #12
 8005fe0:	2b0c      	cmp	r3, #12
 8005fe2:	d82d      	bhi.n	8006040 <UART_SetConfig+0x14c>
 8005fe4:	a201      	add	r2, pc, #4	; (adr r2, 8005fec <UART_SetConfig+0xf8>)
 8005fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fea:	bf00      	nop
 8005fec:	08006021 	.word	0x08006021
 8005ff0:	08006041 	.word	0x08006041
 8005ff4:	08006041 	.word	0x08006041
 8005ff8:	08006041 	.word	0x08006041
 8005ffc:	08006031 	.word	0x08006031
 8006000:	08006041 	.word	0x08006041
 8006004:	08006041 	.word	0x08006041
 8006008:	08006041 	.word	0x08006041
 800600c:	08006029 	.word	0x08006029
 8006010:	08006041 	.word	0x08006041
 8006014:	08006041 	.word	0x08006041
 8006018:	08006041 	.word	0x08006041
 800601c:	08006039 	.word	0x08006039
 8006020:	2300      	movs	r3, #0
 8006022:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006026:	e0d8      	b.n	80061da <UART_SetConfig+0x2e6>
 8006028:	2302      	movs	r3, #2
 800602a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800602e:	e0d4      	b.n	80061da <UART_SetConfig+0x2e6>
 8006030:	2304      	movs	r3, #4
 8006032:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006036:	e0d0      	b.n	80061da <UART_SetConfig+0x2e6>
 8006038:	2308      	movs	r3, #8
 800603a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800603e:	e0cc      	b.n	80061da <UART_SetConfig+0x2e6>
 8006040:	2310      	movs	r3, #16
 8006042:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006046:	e0c8      	b.n	80061da <UART_SetConfig+0x2e6>
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a5e      	ldr	r2, [pc, #376]	; (80061c8 <UART_SetConfig+0x2d4>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d125      	bne.n	800609e <UART_SetConfig+0x1aa>
 8006052:	4b5b      	ldr	r3, [pc, #364]	; (80061c0 <UART_SetConfig+0x2cc>)
 8006054:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006058:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800605c:	2b30      	cmp	r3, #48	; 0x30
 800605e:	d016      	beq.n	800608e <UART_SetConfig+0x19a>
 8006060:	2b30      	cmp	r3, #48	; 0x30
 8006062:	d818      	bhi.n	8006096 <UART_SetConfig+0x1a2>
 8006064:	2b20      	cmp	r3, #32
 8006066:	d00a      	beq.n	800607e <UART_SetConfig+0x18a>
 8006068:	2b20      	cmp	r3, #32
 800606a:	d814      	bhi.n	8006096 <UART_SetConfig+0x1a2>
 800606c:	2b00      	cmp	r3, #0
 800606e:	d002      	beq.n	8006076 <UART_SetConfig+0x182>
 8006070:	2b10      	cmp	r3, #16
 8006072:	d008      	beq.n	8006086 <UART_SetConfig+0x192>
 8006074:	e00f      	b.n	8006096 <UART_SetConfig+0x1a2>
 8006076:	2300      	movs	r3, #0
 8006078:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800607c:	e0ad      	b.n	80061da <UART_SetConfig+0x2e6>
 800607e:	2302      	movs	r3, #2
 8006080:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006084:	e0a9      	b.n	80061da <UART_SetConfig+0x2e6>
 8006086:	2304      	movs	r3, #4
 8006088:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800608c:	e0a5      	b.n	80061da <UART_SetConfig+0x2e6>
 800608e:	2308      	movs	r3, #8
 8006090:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006094:	e0a1      	b.n	80061da <UART_SetConfig+0x2e6>
 8006096:	2310      	movs	r3, #16
 8006098:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800609c:	e09d      	b.n	80061da <UART_SetConfig+0x2e6>
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a4a      	ldr	r2, [pc, #296]	; (80061cc <UART_SetConfig+0x2d8>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d125      	bne.n	80060f4 <UART_SetConfig+0x200>
 80060a8:	4b45      	ldr	r3, [pc, #276]	; (80061c0 <UART_SetConfig+0x2cc>)
 80060aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80060b2:	2bc0      	cmp	r3, #192	; 0xc0
 80060b4:	d016      	beq.n	80060e4 <UART_SetConfig+0x1f0>
 80060b6:	2bc0      	cmp	r3, #192	; 0xc0
 80060b8:	d818      	bhi.n	80060ec <UART_SetConfig+0x1f8>
 80060ba:	2b80      	cmp	r3, #128	; 0x80
 80060bc:	d00a      	beq.n	80060d4 <UART_SetConfig+0x1e0>
 80060be:	2b80      	cmp	r3, #128	; 0x80
 80060c0:	d814      	bhi.n	80060ec <UART_SetConfig+0x1f8>
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d002      	beq.n	80060cc <UART_SetConfig+0x1d8>
 80060c6:	2b40      	cmp	r3, #64	; 0x40
 80060c8:	d008      	beq.n	80060dc <UART_SetConfig+0x1e8>
 80060ca:	e00f      	b.n	80060ec <UART_SetConfig+0x1f8>
 80060cc:	2300      	movs	r3, #0
 80060ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060d2:	e082      	b.n	80061da <UART_SetConfig+0x2e6>
 80060d4:	2302      	movs	r3, #2
 80060d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060da:	e07e      	b.n	80061da <UART_SetConfig+0x2e6>
 80060dc:	2304      	movs	r3, #4
 80060de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060e2:	e07a      	b.n	80061da <UART_SetConfig+0x2e6>
 80060e4:	2308      	movs	r3, #8
 80060e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060ea:	e076      	b.n	80061da <UART_SetConfig+0x2e6>
 80060ec:	2310      	movs	r3, #16
 80060ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060f2:	e072      	b.n	80061da <UART_SetConfig+0x2e6>
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a35      	ldr	r2, [pc, #212]	; (80061d0 <UART_SetConfig+0x2dc>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d12a      	bne.n	8006154 <UART_SetConfig+0x260>
 80060fe:	4b30      	ldr	r3, [pc, #192]	; (80061c0 <UART_SetConfig+0x2cc>)
 8006100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006104:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006108:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800610c:	d01a      	beq.n	8006144 <UART_SetConfig+0x250>
 800610e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006112:	d81b      	bhi.n	800614c <UART_SetConfig+0x258>
 8006114:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006118:	d00c      	beq.n	8006134 <UART_SetConfig+0x240>
 800611a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800611e:	d815      	bhi.n	800614c <UART_SetConfig+0x258>
 8006120:	2b00      	cmp	r3, #0
 8006122:	d003      	beq.n	800612c <UART_SetConfig+0x238>
 8006124:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006128:	d008      	beq.n	800613c <UART_SetConfig+0x248>
 800612a:	e00f      	b.n	800614c <UART_SetConfig+0x258>
 800612c:	2300      	movs	r3, #0
 800612e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006132:	e052      	b.n	80061da <UART_SetConfig+0x2e6>
 8006134:	2302      	movs	r3, #2
 8006136:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800613a:	e04e      	b.n	80061da <UART_SetConfig+0x2e6>
 800613c:	2304      	movs	r3, #4
 800613e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006142:	e04a      	b.n	80061da <UART_SetConfig+0x2e6>
 8006144:	2308      	movs	r3, #8
 8006146:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800614a:	e046      	b.n	80061da <UART_SetConfig+0x2e6>
 800614c:	2310      	movs	r3, #16
 800614e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006152:	e042      	b.n	80061da <UART_SetConfig+0x2e6>
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a17      	ldr	r2, [pc, #92]	; (80061b8 <UART_SetConfig+0x2c4>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d13a      	bne.n	80061d4 <UART_SetConfig+0x2e0>
 800615e:	4b18      	ldr	r3, [pc, #96]	; (80061c0 <UART_SetConfig+0x2cc>)
 8006160:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006164:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006168:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800616c:	d01a      	beq.n	80061a4 <UART_SetConfig+0x2b0>
 800616e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006172:	d81b      	bhi.n	80061ac <UART_SetConfig+0x2b8>
 8006174:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006178:	d00c      	beq.n	8006194 <UART_SetConfig+0x2a0>
 800617a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800617e:	d815      	bhi.n	80061ac <UART_SetConfig+0x2b8>
 8006180:	2b00      	cmp	r3, #0
 8006182:	d003      	beq.n	800618c <UART_SetConfig+0x298>
 8006184:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006188:	d008      	beq.n	800619c <UART_SetConfig+0x2a8>
 800618a:	e00f      	b.n	80061ac <UART_SetConfig+0x2b8>
 800618c:	2300      	movs	r3, #0
 800618e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006192:	e022      	b.n	80061da <UART_SetConfig+0x2e6>
 8006194:	2302      	movs	r3, #2
 8006196:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800619a:	e01e      	b.n	80061da <UART_SetConfig+0x2e6>
 800619c:	2304      	movs	r3, #4
 800619e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061a2:	e01a      	b.n	80061da <UART_SetConfig+0x2e6>
 80061a4:	2308      	movs	r3, #8
 80061a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061aa:	e016      	b.n	80061da <UART_SetConfig+0x2e6>
 80061ac:	2310      	movs	r3, #16
 80061ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061b2:	e012      	b.n	80061da <UART_SetConfig+0x2e6>
 80061b4:	efff69f3 	.word	0xefff69f3
 80061b8:	40008000 	.word	0x40008000
 80061bc:	40013800 	.word	0x40013800
 80061c0:	40021000 	.word	0x40021000
 80061c4:	40004400 	.word	0x40004400
 80061c8:	40004800 	.word	0x40004800
 80061cc:	40004c00 	.word	0x40004c00
 80061d0:	40005000 	.word	0x40005000
 80061d4:	2310      	movs	r3, #16
 80061d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a9f      	ldr	r2, [pc, #636]	; (800645c <UART_SetConfig+0x568>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d17a      	bne.n	80062da <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80061e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80061e8:	2b08      	cmp	r3, #8
 80061ea:	d824      	bhi.n	8006236 <UART_SetConfig+0x342>
 80061ec:	a201      	add	r2, pc, #4	; (adr r2, 80061f4 <UART_SetConfig+0x300>)
 80061ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061f2:	bf00      	nop
 80061f4:	08006219 	.word	0x08006219
 80061f8:	08006237 	.word	0x08006237
 80061fc:	08006221 	.word	0x08006221
 8006200:	08006237 	.word	0x08006237
 8006204:	08006227 	.word	0x08006227
 8006208:	08006237 	.word	0x08006237
 800620c:	08006237 	.word	0x08006237
 8006210:	08006237 	.word	0x08006237
 8006214:	0800622f 	.word	0x0800622f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006218:	f7fd f8cc 	bl	80033b4 <HAL_RCC_GetPCLK1Freq>
 800621c:	61f8      	str	r0, [r7, #28]
        break;
 800621e:	e010      	b.n	8006242 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006220:	4b8f      	ldr	r3, [pc, #572]	; (8006460 <UART_SetConfig+0x56c>)
 8006222:	61fb      	str	r3, [r7, #28]
        break;
 8006224:	e00d      	b.n	8006242 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006226:	f7fd f82d 	bl	8003284 <HAL_RCC_GetSysClockFreq>
 800622a:	61f8      	str	r0, [r7, #28]
        break;
 800622c:	e009      	b.n	8006242 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800622e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006232:	61fb      	str	r3, [r7, #28]
        break;
 8006234:	e005      	b.n	8006242 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006236:	2300      	movs	r3, #0
 8006238:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006240:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	2b00      	cmp	r3, #0
 8006246:	f000 80fb 	beq.w	8006440 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	685a      	ldr	r2, [r3, #4]
 800624e:	4613      	mov	r3, r2
 8006250:	005b      	lsls	r3, r3, #1
 8006252:	4413      	add	r3, r2
 8006254:	69fa      	ldr	r2, [r7, #28]
 8006256:	429a      	cmp	r2, r3
 8006258:	d305      	bcc.n	8006266 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006260:	69fa      	ldr	r2, [r7, #28]
 8006262:	429a      	cmp	r2, r3
 8006264:	d903      	bls.n	800626e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006266:	2301      	movs	r3, #1
 8006268:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800626c:	e0e8      	b.n	8006440 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	2200      	movs	r2, #0
 8006272:	461c      	mov	r4, r3
 8006274:	4615      	mov	r5, r2
 8006276:	f04f 0200 	mov.w	r2, #0
 800627a:	f04f 0300 	mov.w	r3, #0
 800627e:	022b      	lsls	r3, r5, #8
 8006280:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006284:	0222      	lsls	r2, r4, #8
 8006286:	68f9      	ldr	r1, [r7, #12]
 8006288:	6849      	ldr	r1, [r1, #4]
 800628a:	0849      	lsrs	r1, r1, #1
 800628c:	2000      	movs	r0, #0
 800628e:	4688      	mov	r8, r1
 8006290:	4681      	mov	r9, r0
 8006292:	eb12 0a08 	adds.w	sl, r2, r8
 8006296:	eb43 0b09 	adc.w	fp, r3, r9
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	603b      	str	r3, [r7, #0]
 80062a2:	607a      	str	r2, [r7, #4]
 80062a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062a8:	4650      	mov	r0, sl
 80062aa:	4659      	mov	r1, fp
 80062ac:	f7f9 fff0 	bl	8000290 <__aeabi_uldivmod>
 80062b0:	4602      	mov	r2, r0
 80062b2:	460b      	mov	r3, r1
 80062b4:	4613      	mov	r3, r2
 80062b6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80062b8:	69bb      	ldr	r3, [r7, #24]
 80062ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062be:	d308      	bcc.n	80062d2 <UART_SetConfig+0x3de>
 80062c0:	69bb      	ldr	r3, [r7, #24]
 80062c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062c6:	d204      	bcs.n	80062d2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	69ba      	ldr	r2, [r7, #24]
 80062ce:	60da      	str	r2, [r3, #12]
 80062d0:	e0b6      	b.n	8006440 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80062d8:	e0b2      	b.n	8006440 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	69db      	ldr	r3, [r3, #28]
 80062de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062e2:	d15e      	bne.n	80063a2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80062e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80062e8:	2b08      	cmp	r3, #8
 80062ea:	d828      	bhi.n	800633e <UART_SetConfig+0x44a>
 80062ec:	a201      	add	r2, pc, #4	; (adr r2, 80062f4 <UART_SetConfig+0x400>)
 80062ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062f2:	bf00      	nop
 80062f4:	08006319 	.word	0x08006319
 80062f8:	08006321 	.word	0x08006321
 80062fc:	08006329 	.word	0x08006329
 8006300:	0800633f 	.word	0x0800633f
 8006304:	0800632f 	.word	0x0800632f
 8006308:	0800633f 	.word	0x0800633f
 800630c:	0800633f 	.word	0x0800633f
 8006310:	0800633f 	.word	0x0800633f
 8006314:	08006337 	.word	0x08006337
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006318:	f7fd f84c 	bl	80033b4 <HAL_RCC_GetPCLK1Freq>
 800631c:	61f8      	str	r0, [r7, #28]
        break;
 800631e:	e014      	b.n	800634a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006320:	f7fd f85e 	bl	80033e0 <HAL_RCC_GetPCLK2Freq>
 8006324:	61f8      	str	r0, [r7, #28]
        break;
 8006326:	e010      	b.n	800634a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006328:	4b4d      	ldr	r3, [pc, #308]	; (8006460 <UART_SetConfig+0x56c>)
 800632a:	61fb      	str	r3, [r7, #28]
        break;
 800632c:	e00d      	b.n	800634a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800632e:	f7fc ffa9 	bl	8003284 <HAL_RCC_GetSysClockFreq>
 8006332:	61f8      	str	r0, [r7, #28]
        break;
 8006334:	e009      	b.n	800634a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006336:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800633a:	61fb      	str	r3, [r7, #28]
        break;
 800633c:	e005      	b.n	800634a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800633e:	2300      	movs	r3, #0
 8006340:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006348:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800634a:	69fb      	ldr	r3, [r7, #28]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d077      	beq.n	8006440 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006350:	69fb      	ldr	r3, [r7, #28]
 8006352:	005a      	lsls	r2, r3, #1
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	085b      	lsrs	r3, r3, #1
 800635a:	441a      	add	r2, r3
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	fbb2 f3f3 	udiv	r3, r2, r3
 8006364:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006366:	69bb      	ldr	r3, [r7, #24]
 8006368:	2b0f      	cmp	r3, #15
 800636a:	d916      	bls.n	800639a <UART_SetConfig+0x4a6>
 800636c:	69bb      	ldr	r3, [r7, #24]
 800636e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006372:	d212      	bcs.n	800639a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006374:	69bb      	ldr	r3, [r7, #24]
 8006376:	b29b      	uxth	r3, r3
 8006378:	f023 030f 	bic.w	r3, r3, #15
 800637c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800637e:	69bb      	ldr	r3, [r7, #24]
 8006380:	085b      	lsrs	r3, r3, #1
 8006382:	b29b      	uxth	r3, r3
 8006384:	f003 0307 	and.w	r3, r3, #7
 8006388:	b29a      	uxth	r2, r3
 800638a:	8afb      	ldrh	r3, [r7, #22]
 800638c:	4313      	orrs	r3, r2
 800638e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	8afa      	ldrh	r2, [r7, #22]
 8006396:	60da      	str	r2, [r3, #12]
 8006398:	e052      	b.n	8006440 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80063a0:	e04e      	b.n	8006440 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80063a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80063a6:	2b08      	cmp	r3, #8
 80063a8:	d827      	bhi.n	80063fa <UART_SetConfig+0x506>
 80063aa:	a201      	add	r2, pc, #4	; (adr r2, 80063b0 <UART_SetConfig+0x4bc>)
 80063ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063b0:	080063d5 	.word	0x080063d5
 80063b4:	080063dd 	.word	0x080063dd
 80063b8:	080063e5 	.word	0x080063e5
 80063bc:	080063fb 	.word	0x080063fb
 80063c0:	080063eb 	.word	0x080063eb
 80063c4:	080063fb 	.word	0x080063fb
 80063c8:	080063fb 	.word	0x080063fb
 80063cc:	080063fb 	.word	0x080063fb
 80063d0:	080063f3 	.word	0x080063f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063d4:	f7fc ffee 	bl	80033b4 <HAL_RCC_GetPCLK1Freq>
 80063d8:	61f8      	str	r0, [r7, #28]
        break;
 80063da:	e014      	b.n	8006406 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063dc:	f7fd f800 	bl	80033e0 <HAL_RCC_GetPCLK2Freq>
 80063e0:	61f8      	str	r0, [r7, #28]
        break;
 80063e2:	e010      	b.n	8006406 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063e4:	4b1e      	ldr	r3, [pc, #120]	; (8006460 <UART_SetConfig+0x56c>)
 80063e6:	61fb      	str	r3, [r7, #28]
        break;
 80063e8:	e00d      	b.n	8006406 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063ea:	f7fc ff4b 	bl	8003284 <HAL_RCC_GetSysClockFreq>
 80063ee:	61f8      	str	r0, [r7, #28]
        break;
 80063f0:	e009      	b.n	8006406 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063f6:	61fb      	str	r3, [r7, #28]
        break;
 80063f8:	e005      	b.n	8006406 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80063fa:	2300      	movs	r3, #0
 80063fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80063fe:	2301      	movs	r3, #1
 8006400:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006404:	bf00      	nop
    }

    if (pclk != 0U)
 8006406:	69fb      	ldr	r3, [r7, #28]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d019      	beq.n	8006440 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	085a      	lsrs	r2, r3, #1
 8006412:	69fb      	ldr	r3, [r7, #28]
 8006414:	441a      	add	r2, r3
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	fbb2 f3f3 	udiv	r3, r2, r3
 800641e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006420:	69bb      	ldr	r3, [r7, #24]
 8006422:	2b0f      	cmp	r3, #15
 8006424:	d909      	bls.n	800643a <UART_SetConfig+0x546>
 8006426:	69bb      	ldr	r3, [r7, #24]
 8006428:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800642c:	d205      	bcs.n	800643a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800642e:	69bb      	ldr	r3, [r7, #24]
 8006430:	b29a      	uxth	r2, r3
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	60da      	str	r2, [r3, #12]
 8006438:	e002      	b.n	8006440 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800643a:	2301      	movs	r3, #1
 800643c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2200      	movs	r2, #0
 8006444:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2200      	movs	r2, #0
 800644a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800644c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006450:	4618      	mov	r0, r3
 8006452:	3728      	adds	r7, #40	; 0x28
 8006454:	46bd      	mov	sp, r7
 8006456:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800645a:	bf00      	nop
 800645c:	40008000 	.word	0x40008000
 8006460:	00f42400 	.word	0x00f42400

08006464 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006464:	b480      	push	{r7}
 8006466:	b083      	sub	sp, #12
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006470:	f003 0301 	and.w	r3, r3, #1
 8006474:	2b00      	cmp	r3, #0
 8006476:	d00a      	beq.n	800648e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	430a      	orrs	r2, r1
 800648c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006492:	f003 0302 	and.w	r3, r3, #2
 8006496:	2b00      	cmp	r3, #0
 8006498:	d00a      	beq.n	80064b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	430a      	orrs	r2, r1
 80064ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b4:	f003 0304 	and.w	r3, r3, #4
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d00a      	beq.n	80064d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	430a      	orrs	r2, r1
 80064d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d6:	f003 0308 	and.w	r3, r3, #8
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d00a      	beq.n	80064f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	430a      	orrs	r2, r1
 80064f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f8:	f003 0310 	and.w	r3, r3, #16
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d00a      	beq.n	8006516 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	430a      	orrs	r2, r1
 8006514:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800651a:	f003 0320 	and.w	r3, r3, #32
 800651e:	2b00      	cmp	r3, #0
 8006520:	d00a      	beq.n	8006538 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	430a      	orrs	r2, r1
 8006536:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800653c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006540:	2b00      	cmp	r3, #0
 8006542:	d01a      	beq.n	800657a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	430a      	orrs	r2, r1
 8006558:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800655e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006562:	d10a      	bne.n	800657a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	430a      	orrs	r2, r1
 8006578:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800657e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006582:	2b00      	cmp	r3, #0
 8006584:	d00a      	beq.n	800659c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	430a      	orrs	r2, r1
 800659a:	605a      	str	r2, [r3, #4]
  }
}
 800659c:	bf00      	nop
 800659e:	370c      	adds	r7, #12
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr

080065a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b086      	sub	sp, #24
 80065ac:	af02      	add	r7, sp, #8
 80065ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2200      	movs	r2, #0
 80065b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80065b8:	f7fb fb60 	bl	8001c7c <HAL_GetTick>
 80065bc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f003 0308 	and.w	r3, r3, #8
 80065c8:	2b08      	cmp	r3, #8
 80065ca:	d10e      	bne.n	80065ea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80065d0:	9300      	str	r3, [sp, #0]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2200      	movs	r2, #0
 80065d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f000 f82d 	bl	800663a <UART_WaitOnFlagUntilTimeout>
 80065e0:	4603      	mov	r3, r0
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d001      	beq.n	80065ea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065e6:	2303      	movs	r3, #3
 80065e8:	e023      	b.n	8006632 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f003 0304 	and.w	r3, r3, #4
 80065f4:	2b04      	cmp	r3, #4
 80065f6:	d10e      	bne.n	8006616 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80065fc:	9300      	str	r3, [sp, #0]
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2200      	movs	r2, #0
 8006602:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 f817 	bl	800663a <UART_WaitOnFlagUntilTimeout>
 800660c:	4603      	mov	r3, r0
 800660e:	2b00      	cmp	r3, #0
 8006610:	d001      	beq.n	8006616 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006612:	2303      	movs	r3, #3
 8006614:	e00d      	b.n	8006632 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2220      	movs	r2, #32
 800661a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2220      	movs	r2, #32
 8006620:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2200      	movs	r2, #0
 8006626:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006630:	2300      	movs	r3, #0
}
 8006632:	4618      	mov	r0, r3
 8006634:	3710      	adds	r7, #16
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}

0800663a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800663a:	b580      	push	{r7, lr}
 800663c:	b09c      	sub	sp, #112	; 0x70
 800663e:	af00      	add	r7, sp, #0
 8006640:	60f8      	str	r0, [r7, #12]
 8006642:	60b9      	str	r1, [r7, #8]
 8006644:	603b      	str	r3, [r7, #0]
 8006646:	4613      	mov	r3, r2
 8006648:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800664a:	e0a5      	b.n	8006798 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800664c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800664e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006652:	f000 80a1 	beq.w	8006798 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006656:	f7fb fb11 	bl	8001c7c <HAL_GetTick>
 800665a:	4602      	mov	r2, r0
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	1ad3      	subs	r3, r2, r3
 8006660:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006662:	429a      	cmp	r2, r3
 8006664:	d302      	bcc.n	800666c <UART_WaitOnFlagUntilTimeout+0x32>
 8006666:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006668:	2b00      	cmp	r3, #0
 800666a:	d13e      	bne.n	80066ea <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006672:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006674:	e853 3f00 	ldrex	r3, [r3]
 8006678:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800667a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800667c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006680:	667b      	str	r3, [r7, #100]	; 0x64
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	461a      	mov	r2, r3
 8006688:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800668a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800668c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800668e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006690:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006692:	e841 2300 	strex	r3, r2, [r1]
 8006696:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006698:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800669a:	2b00      	cmp	r3, #0
 800669c:	d1e6      	bne.n	800666c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	3308      	adds	r3, #8
 80066a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066a8:	e853 3f00 	ldrex	r3, [r3]
 80066ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80066ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066b0:	f023 0301 	bic.w	r3, r3, #1
 80066b4:	663b      	str	r3, [r7, #96]	; 0x60
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	3308      	adds	r3, #8
 80066bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80066be:	64ba      	str	r2, [r7, #72]	; 0x48
 80066c0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80066c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066c6:	e841 2300 	strex	r3, r2, [r1]
 80066ca:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80066cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d1e5      	bne.n	800669e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2220      	movs	r2, #32
 80066d6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2220      	movs	r2, #32
 80066dc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2200      	movs	r2, #0
 80066e2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80066e6:	2303      	movs	r3, #3
 80066e8:	e067      	b.n	80067ba <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f003 0304 	and.w	r3, r3, #4
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d04f      	beq.n	8006798 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	69db      	ldr	r3, [r3, #28]
 80066fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006702:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006706:	d147      	bne.n	8006798 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006710:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800671a:	e853 3f00 	ldrex	r3, [r3]
 800671e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006722:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006726:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	461a      	mov	r2, r3
 800672e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006730:	637b      	str	r3, [r7, #52]	; 0x34
 8006732:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006734:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006736:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006738:	e841 2300 	strex	r3, r2, [r1]
 800673c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800673e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006740:	2b00      	cmp	r3, #0
 8006742:	d1e6      	bne.n	8006712 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	3308      	adds	r3, #8
 800674a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	e853 3f00 	ldrex	r3, [r3]
 8006752:	613b      	str	r3, [r7, #16]
   return(result);
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	f023 0301 	bic.w	r3, r3, #1
 800675a:	66bb      	str	r3, [r7, #104]	; 0x68
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	3308      	adds	r3, #8
 8006762:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006764:	623a      	str	r2, [r7, #32]
 8006766:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006768:	69f9      	ldr	r1, [r7, #28]
 800676a:	6a3a      	ldr	r2, [r7, #32]
 800676c:	e841 2300 	strex	r3, r2, [r1]
 8006770:	61bb      	str	r3, [r7, #24]
   return(result);
 8006772:	69bb      	ldr	r3, [r7, #24]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d1e5      	bne.n	8006744 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2220      	movs	r2, #32
 800677c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2220      	movs	r2, #32
 8006782:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2220      	movs	r2, #32
 8006788:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2200      	movs	r2, #0
 8006790:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006794:	2303      	movs	r3, #3
 8006796:	e010      	b.n	80067ba <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	69da      	ldr	r2, [r3, #28]
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	4013      	ands	r3, r2
 80067a2:	68ba      	ldr	r2, [r7, #8]
 80067a4:	429a      	cmp	r2, r3
 80067a6:	bf0c      	ite	eq
 80067a8:	2301      	moveq	r3, #1
 80067aa:	2300      	movne	r3, #0
 80067ac:	b2db      	uxtb	r3, r3
 80067ae:	461a      	mov	r2, r3
 80067b0:	79fb      	ldrb	r3, [r7, #7]
 80067b2:	429a      	cmp	r2, r3
 80067b4:	f43f af4a 	beq.w	800664c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80067b8:	2300      	movs	r3, #0
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3770      	adds	r7, #112	; 0x70
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}
	...

080067c4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b096      	sub	sp, #88	; 0x58
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	60f8      	str	r0, [r7, #12]
 80067cc:	60b9      	str	r1, [r7, #8]
 80067ce:	4613      	mov	r3, r2
 80067d0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	68ba      	ldr	r2, [r7, #8]
 80067d6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	88fa      	ldrh	r2, [r7, #6]
 80067dc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2200      	movs	r2, #0
 80067e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2222      	movs	r2, #34	; 0x22
 80067ec:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d02b      	beq.n	800684e <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067fa:	4a42      	ldr	r2, [pc, #264]	; (8006904 <UART_Start_Receive_DMA+0x140>)
 80067fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006802:	4a41      	ldr	r2, [pc, #260]	; (8006908 <UART_Start_Receive_DMA+0x144>)
 8006804:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800680a:	4a40      	ldr	r2, [pc, #256]	; (800690c <UART_Start_Receive_DMA+0x148>)
 800680c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006812:	2200      	movs	r2, #0
 8006814:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	3324      	adds	r3, #36	; 0x24
 8006820:	4619      	mov	r1, r3
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006826:	461a      	mov	r2, r3
 8006828:	88fb      	ldrh	r3, [r7, #6]
 800682a:	f7fb fc21 	bl	8002070 <HAL_DMA_Start_IT>
 800682e:	4603      	mov	r3, r0
 8006830:	2b00      	cmp	r3, #0
 8006832:	d00c      	beq.n	800684e <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2210      	movs	r2, #16
 8006838:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2200      	movs	r2, #0
 8006840:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2220      	movs	r2, #32
 8006848:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 800684a:	2301      	movs	r3, #1
 800684c:	e055      	b.n	80068fa <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2200      	movs	r2, #0
 8006852:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	691b      	ldr	r3, [r3, #16]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d018      	beq.n	8006890 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006866:	e853 3f00 	ldrex	r3, [r3]
 800686a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800686c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800686e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006872:	657b      	str	r3, [r7, #84]	; 0x54
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	461a      	mov	r2, r3
 800687a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800687c:	64bb      	str	r3, [r7, #72]	; 0x48
 800687e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006880:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006882:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006884:	e841 2300 	strex	r3, r2, [r1]
 8006888:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800688a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800688c:	2b00      	cmp	r3, #0
 800688e:	d1e6      	bne.n	800685e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	3308      	adds	r3, #8
 8006896:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800689a:	e853 3f00 	ldrex	r3, [r3]
 800689e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80068a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a2:	f043 0301 	orr.w	r3, r3, #1
 80068a6:	653b      	str	r3, [r7, #80]	; 0x50
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	3308      	adds	r3, #8
 80068ae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80068b0:	637a      	str	r2, [r7, #52]	; 0x34
 80068b2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80068b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80068b8:	e841 2300 	strex	r3, r2, [r1]
 80068bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80068be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d1e5      	bne.n	8006890 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	3308      	adds	r3, #8
 80068ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	e853 3f00 	ldrex	r3, [r3]
 80068d2:	613b      	str	r3, [r7, #16]
   return(result);
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	3308      	adds	r3, #8
 80068e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80068e4:	623a      	str	r2, [r7, #32]
 80068e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e8:	69f9      	ldr	r1, [r7, #28]
 80068ea:	6a3a      	ldr	r2, [r7, #32]
 80068ec:	e841 2300 	strex	r3, r2, [r1]
 80068f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80068f2:	69bb      	ldr	r3, [r7, #24]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d1e5      	bne.n	80068c4 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80068f8:	2300      	movs	r3, #0
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3758      	adds	r7, #88	; 0x58
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}
 8006902:	bf00      	nop
 8006904:	08006a23 	.word	0x08006a23
 8006908:	08006b47 	.word	0x08006b47
 800690c:	08006b7f 	.word	0x08006b7f

08006910 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006910:	b480      	push	{r7}
 8006912:	b089      	sub	sp, #36	; 0x24
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	e853 3f00 	ldrex	r3, [r3]
 8006924:	60bb      	str	r3, [r7, #8]
   return(result);
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800692c:	61fb      	str	r3, [r7, #28]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	461a      	mov	r2, r3
 8006934:	69fb      	ldr	r3, [r7, #28]
 8006936:	61bb      	str	r3, [r7, #24]
 8006938:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800693a:	6979      	ldr	r1, [r7, #20]
 800693c:	69ba      	ldr	r2, [r7, #24]
 800693e:	e841 2300 	strex	r3, r2, [r1]
 8006942:	613b      	str	r3, [r7, #16]
   return(result);
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d1e6      	bne.n	8006918 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2220      	movs	r2, #32
 800694e:	679a      	str	r2, [r3, #120]	; 0x78
}
 8006950:	bf00      	nop
 8006952:	3724      	adds	r7, #36	; 0x24
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr

0800695c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800695c:	b480      	push	{r7}
 800695e:	b095      	sub	sp, #84	; 0x54
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800696a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800696c:	e853 3f00 	ldrex	r3, [r3]
 8006970:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006974:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006978:	64fb      	str	r3, [r7, #76]	; 0x4c
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	461a      	mov	r2, r3
 8006980:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006982:	643b      	str	r3, [r7, #64]	; 0x40
 8006984:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006986:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006988:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800698a:	e841 2300 	strex	r3, r2, [r1]
 800698e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006992:	2b00      	cmp	r3, #0
 8006994:	d1e6      	bne.n	8006964 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	3308      	adds	r3, #8
 800699c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800699e:	6a3b      	ldr	r3, [r7, #32]
 80069a0:	e853 3f00 	ldrex	r3, [r3]
 80069a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80069a6:	69fb      	ldr	r3, [r7, #28]
 80069a8:	f023 0301 	bic.w	r3, r3, #1
 80069ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	3308      	adds	r3, #8
 80069b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80069b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80069b8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80069bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069be:	e841 2300 	strex	r3, r2, [r1]
 80069c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80069c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d1e5      	bne.n	8006996 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d118      	bne.n	8006a04 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	e853 3f00 	ldrex	r3, [r3]
 80069de:	60bb      	str	r3, [r7, #8]
   return(result);
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	f023 0310 	bic.w	r3, r3, #16
 80069e6:	647b      	str	r3, [r7, #68]	; 0x44
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	461a      	mov	r2, r3
 80069ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069f0:	61bb      	str	r3, [r7, #24]
 80069f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f4:	6979      	ldr	r1, [r7, #20]
 80069f6:	69ba      	ldr	r2, [r7, #24]
 80069f8:	e841 2300 	strex	r3, r2, [r1]
 80069fc:	613b      	str	r3, [r7, #16]
   return(result);
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d1e6      	bne.n	80069d2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2220      	movs	r2, #32
 8006a08:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2200      	movs	r2, #0
 8006a14:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006a16:	bf00      	nop
 8006a18:	3754      	adds	r7, #84	; 0x54
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr

08006a22 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006a22:	b580      	push	{r7, lr}
 8006a24:	b09c      	sub	sp, #112	; 0x70
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a2e:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f003 0320 	and.w	r3, r3, #32
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d170      	bne.n	8006b20 <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 8006a3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a40:	2200      	movs	r2, #0
 8006a42:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a4e:	e853 3f00 	ldrex	r3, [r3]
 8006a52:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006a54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a5a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	461a      	mov	r2, r3
 8006a62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006a64:	65bb      	str	r3, [r7, #88]	; 0x58
 8006a66:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a68:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006a6a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006a6c:	e841 2300 	strex	r3, r2, [r1]
 8006a70:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006a72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d1e6      	bne.n	8006a46 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	3308      	adds	r3, #8
 8006a7e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a82:	e853 3f00 	ldrex	r3, [r3]
 8006a86:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a8a:	f023 0301 	bic.w	r3, r3, #1
 8006a8e:	667b      	str	r3, [r7, #100]	; 0x64
 8006a90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	3308      	adds	r3, #8
 8006a96:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006a98:	647a      	str	r2, [r7, #68]	; 0x44
 8006a9a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a9c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006a9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006aa0:	e841 2300 	strex	r3, r2, [r1]
 8006aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006aa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d1e5      	bne.n	8006a78 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006aac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	3308      	adds	r3, #8
 8006ab2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab6:	e853 3f00 	ldrex	r3, [r3]
 8006aba:	623b      	str	r3, [r7, #32]
   return(result);
 8006abc:	6a3b      	ldr	r3, [r7, #32]
 8006abe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ac2:	663b      	str	r3, [r7, #96]	; 0x60
 8006ac4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	3308      	adds	r3, #8
 8006aca:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006acc:	633a      	str	r2, [r7, #48]	; 0x30
 8006ace:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ad2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ad4:	e841 2300 	strex	r3, r2, [r1]
 8006ad8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d1e5      	bne.n	8006aac <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006ae0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ae2:	2220      	movs	r2, #32
 8006ae4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ae6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ae8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006aea:	2b01      	cmp	r3, #1
 8006aec:	d118      	bne.n	8006b20 <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006aee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	e853 3f00 	ldrex	r3, [r3]
 8006afa:	60fb      	str	r3, [r7, #12]
   return(result);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f023 0310 	bic.w	r3, r3, #16
 8006b02:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	461a      	mov	r2, r3
 8006b0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b0c:	61fb      	str	r3, [r7, #28]
 8006b0e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b10:	69b9      	ldr	r1, [r7, #24]
 8006b12:	69fa      	ldr	r2, [r7, #28]
 8006b14:	e841 2300 	strex	r3, r2, [r1]
 8006b18:	617b      	str	r3, [r7, #20]
   return(result);
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d1e6      	bne.n	8006aee <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	d107      	bne.n	8006b38 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b2a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006b2e:	4619      	mov	r1, r3
 8006b30:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006b32:	f7ff f9d3 	bl	8005edc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006b36:	e002      	b.n	8006b3e <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 8006b38:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006b3a:	f7ff f9b1 	bl	8005ea0 <HAL_UART_RxCpltCallback>
}
 8006b3e:	bf00      	nop
 8006b40:	3770      	adds	r7, #112	; 0x70
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}

08006b46 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006b46:	b580      	push	{r7, lr}
 8006b48:	b084      	sub	sp, #16
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b52:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d109      	bne.n	8006b70 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006b62:	085b      	lsrs	r3, r3, #1
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	4619      	mov	r1, r3
 8006b68:	68f8      	ldr	r0, [r7, #12]
 8006b6a:	f7ff f9b7 	bl	8005edc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006b6e:	e002      	b.n	8006b76 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8006b70:	68f8      	ldr	r0, [r7, #12]
 8006b72:	f7ff f99f 	bl	8005eb4 <HAL_UART_RxHalfCpltCallback>
}
 8006b76:	bf00      	nop
 8006b78:	3710      	adds	r7, #16
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}

08006b7e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006b7e:	b580      	push	{r7, lr}
 8006b80:	b086      	sub	sp, #24
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b8a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b90:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b96:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ba2:	2b80      	cmp	r3, #128	; 0x80
 8006ba4:	d109      	bne.n	8006bba <UART_DMAError+0x3c>
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	2b21      	cmp	r3, #33	; 0x21
 8006baa:	d106      	bne.n	8006bba <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8006bb4:	6978      	ldr	r0, [r7, #20]
 8006bb6:	f7ff feab 	bl	8006910 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bc4:	2b40      	cmp	r3, #64	; 0x40
 8006bc6:	d109      	bne.n	8006bdc <UART_DMAError+0x5e>
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2b22      	cmp	r3, #34	; 0x22
 8006bcc:	d106      	bne.n	8006bdc <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8006bd6:	6978      	ldr	r0, [r7, #20]
 8006bd8:	f7ff fec0 	bl	800695c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006be2:	f043 0210 	orr.w	r2, r3, #16
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006bec:	6978      	ldr	r0, [r7, #20]
 8006bee:	f7ff f96b 	bl	8005ec8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006bf2:	bf00      	nop
 8006bf4:	3718      	adds	r7, #24
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}

08006bfa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006bfa:	b580      	push	{r7, lr}
 8006bfc:	b084      	sub	sp, #16
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c06:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2200      	movs	r2, #0
 8006c14:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c18:	68f8      	ldr	r0, [r7, #12]
 8006c1a:	f7ff f955 	bl	8005ec8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c1e:	bf00      	nop
 8006c20:	3710      	adds	r7, #16
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}

08006c26 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006c26:	b580      	push	{r7, lr}
 8006c28:	b088      	sub	sp, #32
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	e853 3f00 	ldrex	r3, [r3]
 8006c3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c42:	61fb      	str	r3, [r7, #28]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	461a      	mov	r2, r3
 8006c4a:	69fb      	ldr	r3, [r7, #28]
 8006c4c:	61bb      	str	r3, [r7, #24]
 8006c4e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c50:	6979      	ldr	r1, [r7, #20]
 8006c52:	69ba      	ldr	r2, [r7, #24]
 8006c54:	e841 2300 	strex	r3, r2, [r1]
 8006c58:	613b      	str	r3, [r7, #16]
   return(result);
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d1e6      	bne.n	8006c2e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2220      	movs	r2, #32
 8006c64:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f7ff f90d 	bl	8005e8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c72:	bf00      	nop
 8006c74:	3720      	adds	r7, #32
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}

08006c7a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006c7a:	b480      	push	{r7}
 8006c7c:	b083      	sub	sp, #12
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006c82:	bf00      	nop
 8006c84:	370c      	adds	r7, #12
 8006c86:	46bd      	mov	sp, r7
 8006c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8c:	4770      	bx	lr
	...

08006c90 <__errno>:
 8006c90:	4b01      	ldr	r3, [pc, #4]	; (8006c98 <__errno+0x8>)
 8006c92:	6818      	ldr	r0, [r3, #0]
 8006c94:	4770      	bx	lr
 8006c96:	bf00      	nop
 8006c98:	20000010 	.word	0x20000010

08006c9c <__libc_init_array>:
 8006c9c:	b570      	push	{r4, r5, r6, lr}
 8006c9e:	4d0d      	ldr	r5, [pc, #52]	; (8006cd4 <__libc_init_array+0x38>)
 8006ca0:	4c0d      	ldr	r4, [pc, #52]	; (8006cd8 <__libc_init_array+0x3c>)
 8006ca2:	1b64      	subs	r4, r4, r5
 8006ca4:	10a4      	asrs	r4, r4, #2
 8006ca6:	2600      	movs	r6, #0
 8006ca8:	42a6      	cmp	r6, r4
 8006caa:	d109      	bne.n	8006cc0 <__libc_init_array+0x24>
 8006cac:	4d0b      	ldr	r5, [pc, #44]	; (8006cdc <__libc_init_array+0x40>)
 8006cae:	4c0c      	ldr	r4, [pc, #48]	; (8006ce0 <__libc_init_array+0x44>)
 8006cb0:	f001 f824 	bl	8007cfc <_init>
 8006cb4:	1b64      	subs	r4, r4, r5
 8006cb6:	10a4      	asrs	r4, r4, #2
 8006cb8:	2600      	movs	r6, #0
 8006cba:	42a6      	cmp	r6, r4
 8006cbc:	d105      	bne.n	8006cca <__libc_init_array+0x2e>
 8006cbe:	bd70      	pop	{r4, r5, r6, pc}
 8006cc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cc4:	4798      	blx	r3
 8006cc6:	3601      	adds	r6, #1
 8006cc8:	e7ee      	b.n	8006ca8 <__libc_init_array+0xc>
 8006cca:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cce:	4798      	blx	r3
 8006cd0:	3601      	adds	r6, #1
 8006cd2:	e7f2      	b.n	8006cba <__libc_init_array+0x1e>
 8006cd4:	08007ed0 	.word	0x08007ed0
 8006cd8:	08007ed0 	.word	0x08007ed0
 8006cdc:	08007ed0 	.word	0x08007ed0
 8006ce0:	08007ed4 	.word	0x08007ed4

08006ce4 <memset>:
 8006ce4:	4402      	add	r2, r0
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d100      	bne.n	8006cee <memset+0xa>
 8006cec:	4770      	bx	lr
 8006cee:	f803 1b01 	strb.w	r1, [r3], #1
 8006cf2:	e7f9      	b.n	8006ce8 <memset+0x4>

08006cf4 <iprintf>:
 8006cf4:	b40f      	push	{r0, r1, r2, r3}
 8006cf6:	4b0a      	ldr	r3, [pc, #40]	; (8006d20 <iprintf+0x2c>)
 8006cf8:	b513      	push	{r0, r1, r4, lr}
 8006cfa:	681c      	ldr	r4, [r3, #0]
 8006cfc:	b124      	cbz	r4, 8006d08 <iprintf+0x14>
 8006cfe:	69a3      	ldr	r3, [r4, #24]
 8006d00:	b913      	cbnz	r3, 8006d08 <iprintf+0x14>
 8006d02:	4620      	mov	r0, r4
 8006d04:	f000 fa5e 	bl	80071c4 <__sinit>
 8006d08:	ab05      	add	r3, sp, #20
 8006d0a:	9a04      	ldr	r2, [sp, #16]
 8006d0c:	68a1      	ldr	r1, [r4, #8]
 8006d0e:	9301      	str	r3, [sp, #4]
 8006d10:	4620      	mov	r0, r4
 8006d12:	f000 fc67 	bl	80075e4 <_vfiprintf_r>
 8006d16:	b002      	add	sp, #8
 8006d18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d1c:	b004      	add	sp, #16
 8006d1e:	4770      	bx	lr
 8006d20:	20000010 	.word	0x20000010

08006d24 <_puts_r>:
 8006d24:	b570      	push	{r4, r5, r6, lr}
 8006d26:	460e      	mov	r6, r1
 8006d28:	4605      	mov	r5, r0
 8006d2a:	b118      	cbz	r0, 8006d34 <_puts_r+0x10>
 8006d2c:	6983      	ldr	r3, [r0, #24]
 8006d2e:	b90b      	cbnz	r3, 8006d34 <_puts_r+0x10>
 8006d30:	f000 fa48 	bl	80071c4 <__sinit>
 8006d34:	69ab      	ldr	r3, [r5, #24]
 8006d36:	68ac      	ldr	r4, [r5, #8]
 8006d38:	b913      	cbnz	r3, 8006d40 <_puts_r+0x1c>
 8006d3a:	4628      	mov	r0, r5
 8006d3c:	f000 fa42 	bl	80071c4 <__sinit>
 8006d40:	4b2c      	ldr	r3, [pc, #176]	; (8006df4 <_puts_r+0xd0>)
 8006d42:	429c      	cmp	r4, r3
 8006d44:	d120      	bne.n	8006d88 <_puts_r+0x64>
 8006d46:	686c      	ldr	r4, [r5, #4]
 8006d48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d4a:	07db      	lsls	r3, r3, #31
 8006d4c:	d405      	bmi.n	8006d5a <_puts_r+0x36>
 8006d4e:	89a3      	ldrh	r3, [r4, #12]
 8006d50:	0598      	lsls	r0, r3, #22
 8006d52:	d402      	bmi.n	8006d5a <_puts_r+0x36>
 8006d54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d56:	f000 fad3 	bl	8007300 <__retarget_lock_acquire_recursive>
 8006d5a:	89a3      	ldrh	r3, [r4, #12]
 8006d5c:	0719      	lsls	r1, r3, #28
 8006d5e:	d51d      	bpl.n	8006d9c <_puts_r+0x78>
 8006d60:	6923      	ldr	r3, [r4, #16]
 8006d62:	b1db      	cbz	r3, 8006d9c <_puts_r+0x78>
 8006d64:	3e01      	subs	r6, #1
 8006d66:	68a3      	ldr	r3, [r4, #8]
 8006d68:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006d6c:	3b01      	subs	r3, #1
 8006d6e:	60a3      	str	r3, [r4, #8]
 8006d70:	bb39      	cbnz	r1, 8006dc2 <_puts_r+0x9e>
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	da38      	bge.n	8006de8 <_puts_r+0xc4>
 8006d76:	4622      	mov	r2, r4
 8006d78:	210a      	movs	r1, #10
 8006d7a:	4628      	mov	r0, r5
 8006d7c:	f000 f848 	bl	8006e10 <__swbuf_r>
 8006d80:	3001      	adds	r0, #1
 8006d82:	d011      	beq.n	8006da8 <_puts_r+0x84>
 8006d84:	250a      	movs	r5, #10
 8006d86:	e011      	b.n	8006dac <_puts_r+0x88>
 8006d88:	4b1b      	ldr	r3, [pc, #108]	; (8006df8 <_puts_r+0xd4>)
 8006d8a:	429c      	cmp	r4, r3
 8006d8c:	d101      	bne.n	8006d92 <_puts_r+0x6e>
 8006d8e:	68ac      	ldr	r4, [r5, #8]
 8006d90:	e7da      	b.n	8006d48 <_puts_r+0x24>
 8006d92:	4b1a      	ldr	r3, [pc, #104]	; (8006dfc <_puts_r+0xd8>)
 8006d94:	429c      	cmp	r4, r3
 8006d96:	bf08      	it	eq
 8006d98:	68ec      	ldreq	r4, [r5, #12]
 8006d9a:	e7d5      	b.n	8006d48 <_puts_r+0x24>
 8006d9c:	4621      	mov	r1, r4
 8006d9e:	4628      	mov	r0, r5
 8006da0:	f000 f888 	bl	8006eb4 <__swsetup_r>
 8006da4:	2800      	cmp	r0, #0
 8006da6:	d0dd      	beq.n	8006d64 <_puts_r+0x40>
 8006da8:	f04f 35ff 	mov.w	r5, #4294967295
 8006dac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006dae:	07da      	lsls	r2, r3, #31
 8006db0:	d405      	bmi.n	8006dbe <_puts_r+0x9a>
 8006db2:	89a3      	ldrh	r3, [r4, #12]
 8006db4:	059b      	lsls	r3, r3, #22
 8006db6:	d402      	bmi.n	8006dbe <_puts_r+0x9a>
 8006db8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006dba:	f000 faa2 	bl	8007302 <__retarget_lock_release_recursive>
 8006dbe:	4628      	mov	r0, r5
 8006dc0:	bd70      	pop	{r4, r5, r6, pc}
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	da04      	bge.n	8006dd0 <_puts_r+0xac>
 8006dc6:	69a2      	ldr	r2, [r4, #24]
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	dc06      	bgt.n	8006dda <_puts_r+0xb6>
 8006dcc:	290a      	cmp	r1, #10
 8006dce:	d004      	beq.n	8006dda <_puts_r+0xb6>
 8006dd0:	6823      	ldr	r3, [r4, #0]
 8006dd2:	1c5a      	adds	r2, r3, #1
 8006dd4:	6022      	str	r2, [r4, #0]
 8006dd6:	7019      	strb	r1, [r3, #0]
 8006dd8:	e7c5      	b.n	8006d66 <_puts_r+0x42>
 8006dda:	4622      	mov	r2, r4
 8006ddc:	4628      	mov	r0, r5
 8006dde:	f000 f817 	bl	8006e10 <__swbuf_r>
 8006de2:	3001      	adds	r0, #1
 8006de4:	d1bf      	bne.n	8006d66 <_puts_r+0x42>
 8006de6:	e7df      	b.n	8006da8 <_puts_r+0x84>
 8006de8:	6823      	ldr	r3, [r4, #0]
 8006dea:	250a      	movs	r5, #10
 8006dec:	1c5a      	adds	r2, r3, #1
 8006dee:	6022      	str	r2, [r4, #0]
 8006df0:	701d      	strb	r5, [r3, #0]
 8006df2:	e7db      	b.n	8006dac <_puts_r+0x88>
 8006df4:	08007e54 	.word	0x08007e54
 8006df8:	08007e74 	.word	0x08007e74
 8006dfc:	08007e34 	.word	0x08007e34

08006e00 <puts>:
 8006e00:	4b02      	ldr	r3, [pc, #8]	; (8006e0c <puts+0xc>)
 8006e02:	4601      	mov	r1, r0
 8006e04:	6818      	ldr	r0, [r3, #0]
 8006e06:	f7ff bf8d 	b.w	8006d24 <_puts_r>
 8006e0a:	bf00      	nop
 8006e0c:	20000010 	.word	0x20000010

08006e10 <__swbuf_r>:
 8006e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e12:	460e      	mov	r6, r1
 8006e14:	4614      	mov	r4, r2
 8006e16:	4605      	mov	r5, r0
 8006e18:	b118      	cbz	r0, 8006e22 <__swbuf_r+0x12>
 8006e1a:	6983      	ldr	r3, [r0, #24]
 8006e1c:	b90b      	cbnz	r3, 8006e22 <__swbuf_r+0x12>
 8006e1e:	f000 f9d1 	bl	80071c4 <__sinit>
 8006e22:	4b21      	ldr	r3, [pc, #132]	; (8006ea8 <__swbuf_r+0x98>)
 8006e24:	429c      	cmp	r4, r3
 8006e26:	d12b      	bne.n	8006e80 <__swbuf_r+0x70>
 8006e28:	686c      	ldr	r4, [r5, #4]
 8006e2a:	69a3      	ldr	r3, [r4, #24]
 8006e2c:	60a3      	str	r3, [r4, #8]
 8006e2e:	89a3      	ldrh	r3, [r4, #12]
 8006e30:	071a      	lsls	r2, r3, #28
 8006e32:	d52f      	bpl.n	8006e94 <__swbuf_r+0x84>
 8006e34:	6923      	ldr	r3, [r4, #16]
 8006e36:	b36b      	cbz	r3, 8006e94 <__swbuf_r+0x84>
 8006e38:	6923      	ldr	r3, [r4, #16]
 8006e3a:	6820      	ldr	r0, [r4, #0]
 8006e3c:	1ac0      	subs	r0, r0, r3
 8006e3e:	6963      	ldr	r3, [r4, #20]
 8006e40:	b2f6      	uxtb	r6, r6
 8006e42:	4283      	cmp	r3, r0
 8006e44:	4637      	mov	r7, r6
 8006e46:	dc04      	bgt.n	8006e52 <__swbuf_r+0x42>
 8006e48:	4621      	mov	r1, r4
 8006e4a:	4628      	mov	r0, r5
 8006e4c:	f000 f926 	bl	800709c <_fflush_r>
 8006e50:	bb30      	cbnz	r0, 8006ea0 <__swbuf_r+0x90>
 8006e52:	68a3      	ldr	r3, [r4, #8]
 8006e54:	3b01      	subs	r3, #1
 8006e56:	60a3      	str	r3, [r4, #8]
 8006e58:	6823      	ldr	r3, [r4, #0]
 8006e5a:	1c5a      	adds	r2, r3, #1
 8006e5c:	6022      	str	r2, [r4, #0]
 8006e5e:	701e      	strb	r6, [r3, #0]
 8006e60:	6963      	ldr	r3, [r4, #20]
 8006e62:	3001      	adds	r0, #1
 8006e64:	4283      	cmp	r3, r0
 8006e66:	d004      	beq.n	8006e72 <__swbuf_r+0x62>
 8006e68:	89a3      	ldrh	r3, [r4, #12]
 8006e6a:	07db      	lsls	r3, r3, #31
 8006e6c:	d506      	bpl.n	8006e7c <__swbuf_r+0x6c>
 8006e6e:	2e0a      	cmp	r6, #10
 8006e70:	d104      	bne.n	8006e7c <__swbuf_r+0x6c>
 8006e72:	4621      	mov	r1, r4
 8006e74:	4628      	mov	r0, r5
 8006e76:	f000 f911 	bl	800709c <_fflush_r>
 8006e7a:	b988      	cbnz	r0, 8006ea0 <__swbuf_r+0x90>
 8006e7c:	4638      	mov	r0, r7
 8006e7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e80:	4b0a      	ldr	r3, [pc, #40]	; (8006eac <__swbuf_r+0x9c>)
 8006e82:	429c      	cmp	r4, r3
 8006e84:	d101      	bne.n	8006e8a <__swbuf_r+0x7a>
 8006e86:	68ac      	ldr	r4, [r5, #8]
 8006e88:	e7cf      	b.n	8006e2a <__swbuf_r+0x1a>
 8006e8a:	4b09      	ldr	r3, [pc, #36]	; (8006eb0 <__swbuf_r+0xa0>)
 8006e8c:	429c      	cmp	r4, r3
 8006e8e:	bf08      	it	eq
 8006e90:	68ec      	ldreq	r4, [r5, #12]
 8006e92:	e7ca      	b.n	8006e2a <__swbuf_r+0x1a>
 8006e94:	4621      	mov	r1, r4
 8006e96:	4628      	mov	r0, r5
 8006e98:	f000 f80c 	bl	8006eb4 <__swsetup_r>
 8006e9c:	2800      	cmp	r0, #0
 8006e9e:	d0cb      	beq.n	8006e38 <__swbuf_r+0x28>
 8006ea0:	f04f 37ff 	mov.w	r7, #4294967295
 8006ea4:	e7ea      	b.n	8006e7c <__swbuf_r+0x6c>
 8006ea6:	bf00      	nop
 8006ea8:	08007e54 	.word	0x08007e54
 8006eac:	08007e74 	.word	0x08007e74
 8006eb0:	08007e34 	.word	0x08007e34

08006eb4 <__swsetup_r>:
 8006eb4:	4b32      	ldr	r3, [pc, #200]	; (8006f80 <__swsetup_r+0xcc>)
 8006eb6:	b570      	push	{r4, r5, r6, lr}
 8006eb8:	681d      	ldr	r5, [r3, #0]
 8006eba:	4606      	mov	r6, r0
 8006ebc:	460c      	mov	r4, r1
 8006ebe:	b125      	cbz	r5, 8006eca <__swsetup_r+0x16>
 8006ec0:	69ab      	ldr	r3, [r5, #24]
 8006ec2:	b913      	cbnz	r3, 8006eca <__swsetup_r+0x16>
 8006ec4:	4628      	mov	r0, r5
 8006ec6:	f000 f97d 	bl	80071c4 <__sinit>
 8006eca:	4b2e      	ldr	r3, [pc, #184]	; (8006f84 <__swsetup_r+0xd0>)
 8006ecc:	429c      	cmp	r4, r3
 8006ece:	d10f      	bne.n	8006ef0 <__swsetup_r+0x3c>
 8006ed0:	686c      	ldr	r4, [r5, #4]
 8006ed2:	89a3      	ldrh	r3, [r4, #12]
 8006ed4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006ed8:	0719      	lsls	r1, r3, #28
 8006eda:	d42c      	bmi.n	8006f36 <__swsetup_r+0x82>
 8006edc:	06dd      	lsls	r5, r3, #27
 8006ede:	d411      	bmi.n	8006f04 <__swsetup_r+0x50>
 8006ee0:	2309      	movs	r3, #9
 8006ee2:	6033      	str	r3, [r6, #0]
 8006ee4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006ee8:	81a3      	strh	r3, [r4, #12]
 8006eea:	f04f 30ff 	mov.w	r0, #4294967295
 8006eee:	e03e      	b.n	8006f6e <__swsetup_r+0xba>
 8006ef0:	4b25      	ldr	r3, [pc, #148]	; (8006f88 <__swsetup_r+0xd4>)
 8006ef2:	429c      	cmp	r4, r3
 8006ef4:	d101      	bne.n	8006efa <__swsetup_r+0x46>
 8006ef6:	68ac      	ldr	r4, [r5, #8]
 8006ef8:	e7eb      	b.n	8006ed2 <__swsetup_r+0x1e>
 8006efa:	4b24      	ldr	r3, [pc, #144]	; (8006f8c <__swsetup_r+0xd8>)
 8006efc:	429c      	cmp	r4, r3
 8006efe:	bf08      	it	eq
 8006f00:	68ec      	ldreq	r4, [r5, #12]
 8006f02:	e7e6      	b.n	8006ed2 <__swsetup_r+0x1e>
 8006f04:	0758      	lsls	r0, r3, #29
 8006f06:	d512      	bpl.n	8006f2e <__swsetup_r+0x7a>
 8006f08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f0a:	b141      	cbz	r1, 8006f1e <__swsetup_r+0x6a>
 8006f0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f10:	4299      	cmp	r1, r3
 8006f12:	d002      	beq.n	8006f1a <__swsetup_r+0x66>
 8006f14:	4630      	mov	r0, r6
 8006f16:	f000 fa5b 	bl	80073d0 <_free_r>
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	6363      	str	r3, [r4, #52]	; 0x34
 8006f1e:	89a3      	ldrh	r3, [r4, #12]
 8006f20:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006f24:	81a3      	strh	r3, [r4, #12]
 8006f26:	2300      	movs	r3, #0
 8006f28:	6063      	str	r3, [r4, #4]
 8006f2a:	6923      	ldr	r3, [r4, #16]
 8006f2c:	6023      	str	r3, [r4, #0]
 8006f2e:	89a3      	ldrh	r3, [r4, #12]
 8006f30:	f043 0308 	orr.w	r3, r3, #8
 8006f34:	81a3      	strh	r3, [r4, #12]
 8006f36:	6923      	ldr	r3, [r4, #16]
 8006f38:	b94b      	cbnz	r3, 8006f4e <__swsetup_r+0x9a>
 8006f3a:	89a3      	ldrh	r3, [r4, #12]
 8006f3c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006f40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f44:	d003      	beq.n	8006f4e <__swsetup_r+0x9a>
 8006f46:	4621      	mov	r1, r4
 8006f48:	4630      	mov	r0, r6
 8006f4a:	f000 fa01 	bl	8007350 <__smakebuf_r>
 8006f4e:	89a0      	ldrh	r0, [r4, #12]
 8006f50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006f54:	f010 0301 	ands.w	r3, r0, #1
 8006f58:	d00a      	beq.n	8006f70 <__swsetup_r+0xbc>
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	60a3      	str	r3, [r4, #8]
 8006f5e:	6963      	ldr	r3, [r4, #20]
 8006f60:	425b      	negs	r3, r3
 8006f62:	61a3      	str	r3, [r4, #24]
 8006f64:	6923      	ldr	r3, [r4, #16]
 8006f66:	b943      	cbnz	r3, 8006f7a <__swsetup_r+0xc6>
 8006f68:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006f6c:	d1ba      	bne.n	8006ee4 <__swsetup_r+0x30>
 8006f6e:	bd70      	pop	{r4, r5, r6, pc}
 8006f70:	0781      	lsls	r1, r0, #30
 8006f72:	bf58      	it	pl
 8006f74:	6963      	ldrpl	r3, [r4, #20]
 8006f76:	60a3      	str	r3, [r4, #8]
 8006f78:	e7f4      	b.n	8006f64 <__swsetup_r+0xb0>
 8006f7a:	2000      	movs	r0, #0
 8006f7c:	e7f7      	b.n	8006f6e <__swsetup_r+0xba>
 8006f7e:	bf00      	nop
 8006f80:	20000010 	.word	0x20000010
 8006f84:	08007e54 	.word	0x08007e54
 8006f88:	08007e74 	.word	0x08007e74
 8006f8c:	08007e34 	.word	0x08007e34

08006f90 <__sflush_r>:
 8006f90:	898a      	ldrh	r2, [r1, #12]
 8006f92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f96:	4605      	mov	r5, r0
 8006f98:	0710      	lsls	r0, r2, #28
 8006f9a:	460c      	mov	r4, r1
 8006f9c:	d458      	bmi.n	8007050 <__sflush_r+0xc0>
 8006f9e:	684b      	ldr	r3, [r1, #4]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	dc05      	bgt.n	8006fb0 <__sflush_r+0x20>
 8006fa4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	dc02      	bgt.n	8006fb0 <__sflush_r+0x20>
 8006faa:	2000      	movs	r0, #0
 8006fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006fb2:	2e00      	cmp	r6, #0
 8006fb4:	d0f9      	beq.n	8006faa <__sflush_r+0x1a>
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006fbc:	682f      	ldr	r7, [r5, #0]
 8006fbe:	602b      	str	r3, [r5, #0]
 8006fc0:	d032      	beq.n	8007028 <__sflush_r+0x98>
 8006fc2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006fc4:	89a3      	ldrh	r3, [r4, #12]
 8006fc6:	075a      	lsls	r2, r3, #29
 8006fc8:	d505      	bpl.n	8006fd6 <__sflush_r+0x46>
 8006fca:	6863      	ldr	r3, [r4, #4]
 8006fcc:	1ac0      	subs	r0, r0, r3
 8006fce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006fd0:	b10b      	cbz	r3, 8006fd6 <__sflush_r+0x46>
 8006fd2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006fd4:	1ac0      	subs	r0, r0, r3
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	4602      	mov	r2, r0
 8006fda:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006fdc:	6a21      	ldr	r1, [r4, #32]
 8006fde:	4628      	mov	r0, r5
 8006fe0:	47b0      	blx	r6
 8006fe2:	1c43      	adds	r3, r0, #1
 8006fe4:	89a3      	ldrh	r3, [r4, #12]
 8006fe6:	d106      	bne.n	8006ff6 <__sflush_r+0x66>
 8006fe8:	6829      	ldr	r1, [r5, #0]
 8006fea:	291d      	cmp	r1, #29
 8006fec:	d82c      	bhi.n	8007048 <__sflush_r+0xb8>
 8006fee:	4a2a      	ldr	r2, [pc, #168]	; (8007098 <__sflush_r+0x108>)
 8006ff0:	40ca      	lsrs	r2, r1
 8006ff2:	07d6      	lsls	r6, r2, #31
 8006ff4:	d528      	bpl.n	8007048 <__sflush_r+0xb8>
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	6062      	str	r2, [r4, #4]
 8006ffa:	04d9      	lsls	r1, r3, #19
 8006ffc:	6922      	ldr	r2, [r4, #16]
 8006ffe:	6022      	str	r2, [r4, #0]
 8007000:	d504      	bpl.n	800700c <__sflush_r+0x7c>
 8007002:	1c42      	adds	r2, r0, #1
 8007004:	d101      	bne.n	800700a <__sflush_r+0x7a>
 8007006:	682b      	ldr	r3, [r5, #0]
 8007008:	b903      	cbnz	r3, 800700c <__sflush_r+0x7c>
 800700a:	6560      	str	r0, [r4, #84]	; 0x54
 800700c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800700e:	602f      	str	r7, [r5, #0]
 8007010:	2900      	cmp	r1, #0
 8007012:	d0ca      	beq.n	8006faa <__sflush_r+0x1a>
 8007014:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007018:	4299      	cmp	r1, r3
 800701a:	d002      	beq.n	8007022 <__sflush_r+0x92>
 800701c:	4628      	mov	r0, r5
 800701e:	f000 f9d7 	bl	80073d0 <_free_r>
 8007022:	2000      	movs	r0, #0
 8007024:	6360      	str	r0, [r4, #52]	; 0x34
 8007026:	e7c1      	b.n	8006fac <__sflush_r+0x1c>
 8007028:	6a21      	ldr	r1, [r4, #32]
 800702a:	2301      	movs	r3, #1
 800702c:	4628      	mov	r0, r5
 800702e:	47b0      	blx	r6
 8007030:	1c41      	adds	r1, r0, #1
 8007032:	d1c7      	bne.n	8006fc4 <__sflush_r+0x34>
 8007034:	682b      	ldr	r3, [r5, #0]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d0c4      	beq.n	8006fc4 <__sflush_r+0x34>
 800703a:	2b1d      	cmp	r3, #29
 800703c:	d001      	beq.n	8007042 <__sflush_r+0xb2>
 800703e:	2b16      	cmp	r3, #22
 8007040:	d101      	bne.n	8007046 <__sflush_r+0xb6>
 8007042:	602f      	str	r7, [r5, #0]
 8007044:	e7b1      	b.n	8006faa <__sflush_r+0x1a>
 8007046:	89a3      	ldrh	r3, [r4, #12]
 8007048:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800704c:	81a3      	strh	r3, [r4, #12]
 800704e:	e7ad      	b.n	8006fac <__sflush_r+0x1c>
 8007050:	690f      	ldr	r7, [r1, #16]
 8007052:	2f00      	cmp	r7, #0
 8007054:	d0a9      	beq.n	8006faa <__sflush_r+0x1a>
 8007056:	0793      	lsls	r3, r2, #30
 8007058:	680e      	ldr	r6, [r1, #0]
 800705a:	bf08      	it	eq
 800705c:	694b      	ldreq	r3, [r1, #20]
 800705e:	600f      	str	r7, [r1, #0]
 8007060:	bf18      	it	ne
 8007062:	2300      	movne	r3, #0
 8007064:	eba6 0807 	sub.w	r8, r6, r7
 8007068:	608b      	str	r3, [r1, #8]
 800706a:	f1b8 0f00 	cmp.w	r8, #0
 800706e:	dd9c      	ble.n	8006faa <__sflush_r+0x1a>
 8007070:	6a21      	ldr	r1, [r4, #32]
 8007072:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007074:	4643      	mov	r3, r8
 8007076:	463a      	mov	r2, r7
 8007078:	4628      	mov	r0, r5
 800707a:	47b0      	blx	r6
 800707c:	2800      	cmp	r0, #0
 800707e:	dc06      	bgt.n	800708e <__sflush_r+0xfe>
 8007080:	89a3      	ldrh	r3, [r4, #12]
 8007082:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007086:	81a3      	strh	r3, [r4, #12]
 8007088:	f04f 30ff 	mov.w	r0, #4294967295
 800708c:	e78e      	b.n	8006fac <__sflush_r+0x1c>
 800708e:	4407      	add	r7, r0
 8007090:	eba8 0800 	sub.w	r8, r8, r0
 8007094:	e7e9      	b.n	800706a <__sflush_r+0xda>
 8007096:	bf00      	nop
 8007098:	20400001 	.word	0x20400001

0800709c <_fflush_r>:
 800709c:	b538      	push	{r3, r4, r5, lr}
 800709e:	690b      	ldr	r3, [r1, #16]
 80070a0:	4605      	mov	r5, r0
 80070a2:	460c      	mov	r4, r1
 80070a4:	b913      	cbnz	r3, 80070ac <_fflush_r+0x10>
 80070a6:	2500      	movs	r5, #0
 80070a8:	4628      	mov	r0, r5
 80070aa:	bd38      	pop	{r3, r4, r5, pc}
 80070ac:	b118      	cbz	r0, 80070b6 <_fflush_r+0x1a>
 80070ae:	6983      	ldr	r3, [r0, #24]
 80070b0:	b90b      	cbnz	r3, 80070b6 <_fflush_r+0x1a>
 80070b2:	f000 f887 	bl	80071c4 <__sinit>
 80070b6:	4b14      	ldr	r3, [pc, #80]	; (8007108 <_fflush_r+0x6c>)
 80070b8:	429c      	cmp	r4, r3
 80070ba:	d11b      	bne.n	80070f4 <_fflush_r+0x58>
 80070bc:	686c      	ldr	r4, [r5, #4]
 80070be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d0ef      	beq.n	80070a6 <_fflush_r+0xa>
 80070c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80070c8:	07d0      	lsls	r0, r2, #31
 80070ca:	d404      	bmi.n	80070d6 <_fflush_r+0x3a>
 80070cc:	0599      	lsls	r1, r3, #22
 80070ce:	d402      	bmi.n	80070d6 <_fflush_r+0x3a>
 80070d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80070d2:	f000 f915 	bl	8007300 <__retarget_lock_acquire_recursive>
 80070d6:	4628      	mov	r0, r5
 80070d8:	4621      	mov	r1, r4
 80070da:	f7ff ff59 	bl	8006f90 <__sflush_r>
 80070de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80070e0:	07da      	lsls	r2, r3, #31
 80070e2:	4605      	mov	r5, r0
 80070e4:	d4e0      	bmi.n	80070a8 <_fflush_r+0xc>
 80070e6:	89a3      	ldrh	r3, [r4, #12]
 80070e8:	059b      	lsls	r3, r3, #22
 80070ea:	d4dd      	bmi.n	80070a8 <_fflush_r+0xc>
 80070ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80070ee:	f000 f908 	bl	8007302 <__retarget_lock_release_recursive>
 80070f2:	e7d9      	b.n	80070a8 <_fflush_r+0xc>
 80070f4:	4b05      	ldr	r3, [pc, #20]	; (800710c <_fflush_r+0x70>)
 80070f6:	429c      	cmp	r4, r3
 80070f8:	d101      	bne.n	80070fe <_fflush_r+0x62>
 80070fa:	68ac      	ldr	r4, [r5, #8]
 80070fc:	e7df      	b.n	80070be <_fflush_r+0x22>
 80070fe:	4b04      	ldr	r3, [pc, #16]	; (8007110 <_fflush_r+0x74>)
 8007100:	429c      	cmp	r4, r3
 8007102:	bf08      	it	eq
 8007104:	68ec      	ldreq	r4, [r5, #12]
 8007106:	e7da      	b.n	80070be <_fflush_r+0x22>
 8007108:	08007e54 	.word	0x08007e54
 800710c:	08007e74 	.word	0x08007e74
 8007110:	08007e34 	.word	0x08007e34

08007114 <std>:
 8007114:	2300      	movs	r3, #0
 8007116:	b510      	push	{r4, lr}
 8007118:	4604      	mov	r4, r0
 800711a:	e9c0 3300 	strd	r3, r3, [r0]
 800711e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007122:	6083      	str	r3, [r0, #8]
 8007124:	8181      	strh	r1, [r0, #12]
 8007126:	6643      	str	r3, [r0, #100]	; 0x64
 8007128:	81c2      	strh	r2, [r0, #14]
 800712a:	6183      	str	r3, [r0, #24]
 800712c:	4619      	mov	r1, r3
 800712e:	2208      	movs	r2, #8
 8007130:	305c      	adds	r0, #92	; 0x5c
 8007132:	f7ff fdd7 	bl	8006ce4 <memset>
 8007136:	4b05      	ldr	r3, [pc, #20]	; (800714c <std+0x38>)
 8007138:	6263      	str	r3, [r4, #36]	; 0x24
 800713a:	4b05      	ldr	r3, [pc, #20]	; (8007150 <std+0x3c>)
 800713c:	62a3      	str	r3, [r4, #40]	; 0x28
 800713e:	4b05      	ldr	r3, [pc, #20]	; (8007154 <std+0x40>)
 8007140:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007142:	4b05      	ldr	r3, [pc, #20]	; (8007158 <std+0x44>)
 8007144:	6224      	str	r4, [r4, #32]
 8007146:	6323      	str	r3, [r4, #48]	; 0x30
 8007148:	bd10      	pop	{r4, pc}
 800714a:	bf00      	nop
 800714c:	08007b8d 	.word	0x08007b8d
 8007150:	08007baf 	.word	0x08007baf
 8007154:	08007be7 	.word	0x08007be7
 8007158:	08007c0b 	.word	0x08007c0b

0800715c <_cleanup_r>:
 800715c:	4901      	ldr	r1, [pc, #4]	; (8007164 <_cleanup_r+0x8>)
 800715e:	f000 b8af 	b.w	80072c0 <_fwalk_reent>
 8007162:	bf00      	nop
 8007164:	0800709d 	.word	0x0800709d

08007168 <__sfmoreglue>:
 8007168:	b570      	push	{r4, r5, r6, lr}
 800716a:	2268      	movs	r2, #104	; 0x68
 800716c:	1e4d      	subs	r5, r1, #1
 800716e:	4355      	muls	r5, r2
 8007170:	460e      	mov	r6, r1
 8007172:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007176:	f000 f997 	bl	80074a8 <_malloc_r>
 800717a:	4604      	mov	r4, r0
 800717c:	b140      	cbz	r0, 8007190 <__sfmoreglue+0x28>
 800717e:	2100      	movs	r1, #0
 8007180:	e9c0 1600 	strd	r1, r6, [r0]
 8007184:	300c      	adds	r0, #12
 8007186:	60a0      	str	r0, [r4, #8]
 8007188:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800718c:	f7ff fdaa 	bl	8006ce4 <memset>
 8007190:	4620      	mov	r0, r4
 8007192:	bd70      	pop	{r4, r5, r6, pc}

08007194 <__sfp_lock_acquire>:
 8007194:	4801      	ldr	r0, [pc, #4]	; (800719c <__sfp_lock_acquire+0x8>)
 8007196:	f000 b8b3 	b.w	8007300 <__retarget_lock_acquire_recursive>
 800719a:	bf00      	nop
 800719c:	20000401 	.word	0x20000401

080071a0 <__sfp_lock_release>:
 80071a0:	4801      	ldr	r0, [pc, #4]	; (80071a8 <__sfp_lock_release+0x8>)
 80071a2:	f000 b8ae 	b.w	8007302 <__retarget_lock_release_recursive>
 80071a6:	bf00      	nop
 80071a8:	20000401 	.word	0x20000401

080071ac <__sinit_lock_acquire>:
 80071ac:	4801      	ldr	r0, [pc, #4]	; (80071b4 <__sinit_lock_acquire+0x8>)
 80071ae:	f000 b8a7 	b.w	8007300 <__retarget_lock_acquire_recursive>
 80071b2:	bf00      	nop
 80071b4:	20000402 	.word	0x20000402

080071b8 <__sinit_lock_release>:
 80071b8:	4801      	ldr	r0, [pc, #4]	; (80071c0 <__sinit_lock_release+0x8>)
 80071ba:	f000 b8a2 	b.w	8007302 <__retarget_lock_release_recursive>
 80071be:	bf00      	nop
 80071c0:	20000402 	.word	0x20000402

080071c4 <__sinit>:
 80071c4:	b510      	push	{r4, lr}
 80071c6:	4604      	mov	r4, r0
 80071c8:	f7ff fff0 	bl	80071ac <__sinit_lock_acquire>
 80071cc:	69a3      	ldr	r3, [r4, #24]
 80071ce:	b11b      	cbz	r3, 80071d8 <__sinit+0x14>
 80071d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071d4:	f7ff bff0 	b.w	80071b8 <__sinit_lock_release>
 80071d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80071dc:	6523      	str	r3, [r4, #80]	; 0x50
 80071de:	4b13      	ldr	r3, [pc, #76]	; (800722c <__sinit+0x68>)
 80071e0:	4a13      	ldr	r2, [pc, #76]	; (8007230 <__sinit+0x6c>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	62a2      	str	r2, [r4, #40]	; 0x28
 80071e6:	42a3      	cmp	r3, r4
 80071e8:	bf04      	itt	eq
 80071ea:	2301      	moveq	r3, #1
 80071ec:	61a3      	streq	r3, [r4, #24]
 80071ee:	4620      	mov	r0, r4
 80071f0:	f000 f820 	bl	8007234 <__sfp>
 80071f4:	6060      	str	r0, [r4, #4]
 80071f6:	4620      	mov	r0, r4
 80071f8:	f000 f81c 	bl	8007234 <__sfp>
 80071fc:	60a0      	str	r0, [r4, #8]
 80071fe:	4620      	mov	r0, r4
 8007200:	f000 f818 	bl	8007234 <__sfp>
 8007204:	2200      	movs	r2, #0
 8007206:	60e0      	str	r0, [r4, #12]
 8007208:	2104      	movs	r1, #4
 800720a:	6860      	ldr	r0, [r4, #4]
 800720c:	f7ff ff82 	bl	8007114 <std>
 8007210:	68a0      	ldr	r0, [r4, #8]
 8007212:	2201      	movs	r2, #1
 8007214:	2109      	movs	r1, #9
 8007216:	f7ff ff7d 	bl	8007114 <std>
 800721a:	68e0      	ldr	r0, [r4, #12]
 800721c:	2202      	movs	r2, #2
 800721e:	2112      	movs	r1, #18
 8007220:	f7ff ff78 	bl	8007114 <std>
 8007224:	2301      	movs	r3, #1
 8007226:	61a3      	str	r3, [r4, #24]
 8007228:	e7d2      	b.n	80071d0 <__sinit+0xc>
 800722a:	bf00      	nop
 800722c:	08007e30 	.word	0x08007e30
 8007230:	0800715d 	.word	0x0800715d

08007234 <__sfp>:
 8007234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007236:	4607      	mov	r7, r0
 8007238:	f7ff ffac 	bl	8007194 <__sfp_lock_acquire>
 800723c:	4b1e      	ldr	r3, [pc, #120]	; (80072b8 <__sfp+0x84>)
 800723e:	681e      	ldr	r6, [r3, #0]
 8007240:	69b3      	ldr	r3, [r6, #24]
 8007242:	b913      	cbnz	r3, 800724a <__sfp+0x16>
 8007244:	4630      	mov	r0, r6
 8007246:	f7ff ffbd 	bl	80071c4 <__sinit>
 800724a:	3648      	adds	r6, #72	; 0x48
 800724c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007250:	3b01      	subs	r3, #1
 8007252:	d503      	bpl.n	800725c <__sfp+0x28>
 8007254:	6833      	ldr	r3, [r6, #0]
 8007256:	b30b      	cbz	r3, 800729c <__sfp+0x68>
 8007258:	6836      	ldr	r6, [r6, #0]
 800725a:	e7f7      	b.n	800724c <__sfp+0x18>
 800725c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007260:	b9d5      	cbnz	r5, 8007298 <__sfp+0x64>
 8007262:	4b16      	ldr	r3, [pc, #88]	; (80072bc <__sfp+0x88>)
 8007264:	60e3      	str	r3, [r4, #12]
 8007266:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800726a:	6665      	str	r5, [r4, #100]	; 0x64
 800726c:	f000 f847 	bl	80072fe <__retarget_lock_init_recursive>
 8007270:	f7ff ff96 	bl	80071a0 <__sfp_lock_release>
 8007274:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007278:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800727c:	6025      	str	r5, [r4, #0]
 800727e:	61a5      	str	r5, [r4, #24]
 8007280:	2208      	movs	r2, #8
 8007282:	4629      	mov	r1, r5
 8007284:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007288:	f7ff fd2c 	bl	8006ce4 <memset>
 800728c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007290:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007294:	4620      	mov	r0, r4
 8007296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007298:	3468      	adds	r4, #104	; 0x68
 800729a:	e7d9      	b.n	8007250 <__sfp+0x1c>
 800729c:	2104      	movs	r1, #4
 800729e:	4638      	mov	r0, r7
 80072a0:	f7ff ff62 	bl	8007168 <__sfmoreglue>
 80072a4:	4604      	mov	r4, r0
 80072a6:	6030      	str	r0, [r6, #0]
 80072a8:	2800      	cmp	r0, #0
 80072aa:	d1d5      	bne.n	8007258 <__sfp+0x24>
 80072ac:	f7ff ff78 	bl	80071a0 <__sfp_lock_release>
 80072b0:	230c      	movs	r3, #12
 80072b2:	603b      	str	r3, [r7, #0]
 80072b4:	e7ee      	b.n	8007294 <__sfp+0x60>
 80072b6:	bf00      	nop
 80072b8:	08007e30 	.word	0x08007e30
 80072bc:	ffff0001 	.word	0xffff0001

080072c0 <_fwalk_reent>:
 80072c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072c4:	4606      	mov	r6, r0
 80072c6:	4688      	mov	r8, r1
 80072c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80072cc:	2700      	movs	r7, #0
 80072ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80072d2:	f1b9 0901 	subs.w	r9, r9, #1
 80072d6:	d505      	bpl.n	80072e4 <_fwalk_reent+0x24>
 80072d8:	6824      	ldr	r4, [r4, #0]
 80072da:	2c00      	cmp	r4, #0
 80072dc:	d1f7      	bne.n	80072ce <_fwalk_reent+0xe>
 80072de:	4638      	mov	r0, r7
 80072e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072e4:	89ab      	ldrh	r3, [r5, #12]
 80072e6:	2b01      	cmp	r3, #1
 80072e8:	d907      	bls.n	80072fa <_fwalk_reent+0x3a>
 80072ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80072ee:	3301      	adds	r3, #1
 80072f0:	d003      	beq.n	80072fa <_fwalk_reent+0x3a>
 80072f2:	4629      	mov	r1, r5
 80072f4:	4630      	mov	r0, r6
 80072f6:	47c0      	blx	r8
 80072f8:	4307      	orrs	r7, r0
 80072fa:	3568      	adds	r5, #104	; 0x68
 80072fc:	e7e9      	b.n	80072d2 <_fwalk_reent+0x12>

080072fe <__retarget_lock_init_recursive>:
 80072fe:	4770      	bx	lr

08007300 <__retarget_lock_acquire_recursive>:
 8007300:	4770      	bx	lr

08007302 <__retarget_lock_release_recursive>:
 8007302:	4770      	bx	lr

08007304 <__swhatbuf_r>:
 8007304:	b570      	push	{r4, r5, r6, lr}
 8007306:	460e      	mov	r6, r1
 8007308:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800730c:	2900      	cmp	r1, #0
 800730e:	b096      	sub	sp, #88	; 0x58
 8007310:	4614      	mov	r4, r2
 8007312:	461d      	mov	r5, r3
 8007314:	da08      	bge.n	8007328 <__swhatbuf_r+0x24>
 8007316:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800731a:	2200      	movs	r2, #0
 800731c:	602a      	str	r2, [r5, #0]
 800731e:	061a      	lsls	r2, r3, #24
 8007320:	d410      	bmi.n	8007344 <__swhatbuf_r+0x40>
 8007322:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007326:	e00e      	b.n	8007346 <__swhatbuf_r+0x42>
 8007328:	466a      	mov	r2, sp
 800732a:	f000 fc95 	bl	8007c58 <_fstat_r>
 800732e:	2800      	cmp	r0, #0
 8007330:	dbf1      	blt.n	8007316 <__swhatbuf_r+0x12>
 8007332:	9a01      	ldr	r2, [sp, #4]
 8007334:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007338:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800733c:	425a      	negs	r2, r3
 800733e:	415a      	adcs	r2, r3
 8007340:	602a      	str	r2, [r5, #0]
 8007342:	e7ee      	b.n	8007322 <__swhatbuf_r+0x1e>
 8007344:	2340      	movs	r3, #64	; 0x40
 8007346:	2000      	movs	r0, #0
 8007348:	6023      	str	r3, [r4, #0]
 800734a:	b016      	add	sp, #88	; 0x58
 800734c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007350 <__smakebuf_r>:
 8007350:	898b      	ldrh	r3, [r1, #12]
 8007352:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007354:	079d      	lsls	r5, r3, #30
 8007356:	4606      	mov	r6, r0
 8007358:	460c      	mov	r4, r1
 800735a:	d507      	bpl.n	800736c <__smakebuf_r+0x1c>
 800735c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007360:	6023      	str	r3, [r4, #0]
 8007362:	6123      	str	r3, [r4, #16]
 8007364:	2301      	movs	r3, #1
 8007366:	6163      	str	r3, [r4, #20]
 8007368:	b002      	add	sp, #8
 800736a:	bd70      	pop	{r4, r5, r6, pc}
 800736c:	ab01      	add	r3, sp, #4
 800736e:	466a      	mov	r2, sp
 8007370:	f7ff ffc8 	bl	8007304 <__swhatbuf_r>
 8007374:	9900      	ldr	r1, [sp, #0]
 8007376:	4605      	mov	r5, r0
 8007378:	4630      	mov	r0, r6
 800737a:	f000 f895 	bl	80074a8 <_malloc_r>
 800737e:	b948      	cbnz	r0, 8007394 <__smakebuf_r+0x44>
 8007380:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007384:	059a      	lsls	r2, r3, #22
 8007386:	d4ef      	bmi.n	8007368 <__smakebuf_r+0x18>
 8007388:	f023 0303 	bic.w	r3, r3, #3
 800738c:	f043 0302 	orr.w	r3, r3, #2
 8007390:	81a3      	strh	r3, [r4, #12]
 8007392:	e7e3      	b.n	800735c <__smakebuf_r+0xc>
 8007394:	4b0d      	ldr	r3, [pc, #52]	; (80073cc <__smakebuf_r+0x7c>)
 8007396:	62b3      	str	r3, [r6, #40]	; 0x28
 8007398:	89a3      	ldrh	r3, [r4, #12]
 800739a:	6020      	str	r0, [r4, #0]
 800739c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073a0:	81a3      	strh	r3, [r4, #12]
 80073a2:	9b00      	ldr	r3, [sp, #0]
 80073a4:	6163      	str	r3, [r4, #20]
 80073a6:	9b01      	ldr	r3, [sp, #4]
 80073a8:	6120      	str	r0, [r4, #16]
 80073aa:	b15b      	cbz	r3, 80073c4 <__smakebuf_r+0x74>
 80073ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073b0:	4630      	mov	r0, r6
 80073b2:	f000 fc63 	bl	8007c7c <_isatty_r>
 80073b6:	b128      	cbz	r0, 80073c4 <__smakebuf_r+0x74>
 80073b8:	89a3      	ldrh	r3, [r4, #12]
 80073ba:	f023 0303 	bic.w	r3, r3, #3
 80073be:	f043 0301 	orr.w	r3, r3, #1
 80073c2:	81a3      	strh	r3, [r4, #12]
 80073c4:	89a0      	ldrh	r0, [r4, #12]
 80073c6:	4305      	orrs	r5, r0
 80073c8:	81a5      	strh	r5, [r4, #12]
 80073ca:	e7cd      	b.n	8007368 <__smakebuf_r+0x18>
 80073cc:	0800715d 	.word	0x0800715d

080073d0 <_free_r>:
 80073d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80073d2:	2900      	cmp	r1, #0
 80073d4:	d044      	beq.n	8007460 <_free_r+0x90>
 80073d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073da:	9001      	str	r0, [sp, #4]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	f1a1 0404 	sub.w	r4, r1, #4
 80073e2:	bfb8      	it	lt
 80073e4:	18e4      	addlt	r4, r4, r3
 80073e6:	f000 fc6b 	bl	8007cc0 <__malloc_lock>
 80073ea:	4a1e      	ldr	r2, [pc, #120]	; (8007464 <_free_r+0x94>)
 80073ec:	9801      	ldr	r0, [sp, #4]
 80073ee:	6813      	ldr	r3, [r2, #0]
 80073f0:	b933      	cbnz	r3, 8007400 <_free_r+0x30>
 80073f2:	6063      	str	r3, [r4, #4]
 80073f4:	6014      	str	r4, [r2, #0]
 80073f6:	b003      	add	sp, #12
 80073f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80073fc:	f000 bc66 	b.w	8007ccc <__malloc_unlock>
 8007400:	42a3      	cmp	r3, r4
 8007402:	d908      	bls.n	8007416 <_free_r+0x46>
 8007404:	6825      	ldr	r5, [r4, #0]
 8007406:	1961      	adds	r1, r4, r5
 8007408:	428b      	cmp	r3, r1
 800740a:	bf01      	itttt	eq
 800740c:	6819      	ldreq	r1, [r3, #0]
 800740e:	685b      	ldreq	r3, [r3, #4]
 8007410:	1949      	addeq	r1, r1, r5
 8007412:	6021      	streq	r1, [r4, #0]
 8007414:	e7ed      	b.n	80073f2 <_free_r+0x22>
 8007416:	461a      	mov	r2, r3
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	b10b      	cbz	r3, 8007420 <_free_r+0x50>
 800741c:	42a3      	cmp	r3, r4
 800741e:	d9fa      	bls.n	8007416 <_free_r+0x46>
 8007420:	6811      	ldr	r1, [r2, #0]
 8007422:	1855      	adds	r5, r2, r1
 8007424:	42a5      	cmp	r5, r4
 8007426:	d10b      	bne.n	8007440 <_free_r+0x70>
 8007428:	6824      	ldr	r4, [r4, #0]
 800742a:	4421      	add	r1, r4
 800742c:	1854      	adds	r4, r2, r1
 800742e:	42a3      	cmp	r3, r4
 8007430:	6011      	str	r1, [r2, #0]
 8007432:	d1e0      	bne.n	80073f6 <_free_r+0x26>
 8007434:	681c      	ldr	r4, [r3, #0]
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	6053      	str	r3, [r2, #4]
 800743a:	4421      	add	r1, r4
 800743c:	6011      	str	r1, [r2, #0]
 800743e:	e7da      	b.n	80073f6 <_free_r+0x26>
 8007440:	d902      	bls.n	8007448 <_free_r+0x78>
 8007442:	230c      	movs	r3, #12
 8007444:	6003      	str	r3, [r0, #0]
 8007446:	e7d6      	b.n	80073f6 <_free_r+0x26>
 8007448:	6825      	ldr	r5, [r4, #0]
 800744a:	1961      	adds	r1, r4, r5
 800744c:	428b      	cmp	r3, r1
 800744e:	bf04      	itt	eq
 8007450:	6819      	ldreq	r1, [r3, #0]
 8007452:	685b      	ldreq	r3, [r3, #4]
 8007454:	6063      	str	r3, [r4, #4]
 8007456:	bf04      	itt	eq
 8007458:	1949      	addeq	r1, r1, r5
 800745a:	6021      	streq	r1, [r4, #0]
 800745c:	6054      	str	r4, [r2, #4]
 800745e:	e7ca      	b.n	80073f6 <_free_r+0x26>
 8007460:	b003      	add	sp, #12
 8007462:	bd30      	pop	{r4, r5, pc}
 8007464:	20000404 	.word	0x20000404

08007468 <sbrk_aligned>:
 8007468:	b570      	push	{r4, r5, r6, lr}
 800746a:	4e0e      	ldr	r6, [pc, #56]	; (80074a4 <sbrk_aligned+0x3c>)
 800746c:	460c      	mov	r4, r1
 800746e:	6831      	ldr	r1, [r6, #0]
 8007470:	4605      	mov	r5, r0
 8007472:	b911      	cbnz	r1, 800747a <sbrk_aligned+0x12>
 8007474:	f000 fb7a 	bl	8007b6c <_sbrk_r>
 8007478:	6030      	str	r0, [r6, #0]
 800747a:	4621      	mov	r1, r4
 800747c:	4628      	mov	r0, r5
 800747e:	f000 fb75 	bl	8007b6c <_sbrk_r>
 8007482:	1c43      	adds	r3, r0, #1
 8007484:	d00a      	beq.n	800749c <sbrk_aligned+0x34>
 8007486:	1cc4      	adds	r4, r0, #3
 8007488:	f024 0403 	bic.w	r4, r4, #3
 800748c:	42a0      	cmp	r0, r4
 800748e:	d007      	beq.n	80074a0 <sbrk_aligned+0x38>
 8007490:	1a21      	subs	r1, r4, r0
 8007492:	4628      	mov	r0, r5
 8007494:	f000 fb6a 	bl	8007b6c <_sbrk_r>
 8007498:	3001      	adds	r0, #1
 800749a:	d101      	bne.n	80074a0 <sbrk_aligned+0x38>
 800749c:	f04f 34ff 	mov.w	r4, #4294967295
 80074a0:	4620      	mov	r0, r4
 80074a2:	bd70      	pop	{r4, r5, r6, pc}
 80074a4:	20000408 	.word	0x20000408

080074a8 <_malloc_r>:
 80074a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074ac:	1ccd      	adds	r5, r1, #3
 80074ae:	f025 0503 	bic.w	r5, r5, #3
 80074b2:	3508      	adds	r5, #8
 80074b4:	2d0c      	cmp	r5, #12
 80074b6:	bf38      	it	cc
 80074b8:	250c      	movcc	r5, #12
 80074ba:	2d00      	cmp	r5, #0
 80074bc:	4607      	mov	r7, r0
 80074be:	db01      	blt.n	80074c4 <_malloc_r+0x1c>
 80074c0:	42a9      	cmp	r1, r5
 80074c2:	d905      	bls.n	80074d0 <_malloc_r+0x28>
 80074c4:	230c      	movs	r3, #12
 80074c6:	603b      	str	r3, [r7, #0]
 80074c8:	2600      	movs	r6, #0
 80074ca:	4630      	mov	r0, r6
 80074cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074d0:	4e2e      	ldr	r6, [pc, #184]	; (800758c <_malloc_r+0xe4>)
 80074d2:	f000 fbf5 	bl	8007cc0 <__malloc_lock>
 80074d6:	6833      	ldr	r3, [r6, #0]
 80074d8:	461c      	mov	r4, r3
 80074da:	bb34      	cbnz	r4, 800752a <_malloc_r+0x82>
 80074dc:	4629      	mov	r1, r5
 80074de:	4638      	mov	r0, r7
 80074e0:	f7ff ffc2 	bl	8007468 <sbrk_aligned>
 80074e4:	1c43      	adds	r3, r0, #1
 80074e6:	4604      	mov	r4, r0
 80074e8:	d14d      	bne.n	8007586 <_malloc_r+0xde>
 80074ea:	6834      	ldr	r4, [r6, #0]
 80074ec:	4626      	mov	r6, r4
 80074ee:	2e00      	cmp	r6, #0
 80074f0:	d140      	bne.n	8007574 <_malloc_r+0xcc>
 80074f2:	6823      	ldr	r3, [r4, #0]
 80074f4:	4631      	mov	r1, r6
 80074f6:	4638      	mov	r0, r7
 80074f8:	eb04 0803 	add.w	r8, r4, r3
 80074fc:	f000 fb36 	bl	8007b6c <_sbrk_r>
 8007500:	4580      	cmp	r8, r0
 8007502:	d13a      	bne.n	800757a <_malloc_r+0xd2>
 8007504:	6821      	ldr	r1, [r4, #0]
 8007506:	3503      	adds	r5, #3
 8007508:	1a6d      	subs	r5, r5, r1
 800750a:	f025 0503 	bic.w	r5, r5, #3
 800750e:	3508      	adds	r5, #8
 8007510:	2d0c      	cmp	r5, #12
 8007512:	bf38      	it	cc
 8007514:	250c      	movcc	r5, #12
 8007516:	4629      	mov	r1, r5
 8007518:	4638      	mov	r0, r7
 800751a:	f7ff ffa5 	bl	8007468 <sbrk_aligned>
 800751e:	3001      	adds	r0, #1
 8007520:	d02b      	beq.n	800757a <_malloc_r+0xd2>
 8007522:	6823      	ldr	r3, [r4, #0]
 8007524:	442b      	add	r3, r5
 8007526:	6023      	str	r3, [r4, #0]
 8007528:	e00e      	b.n	8007548 <_malloc_r+0xa0>
 800752a:	6822      	ldr	r2, [r4, #0]
 800752c:	1b52      	subs	r2, r2, r5
 800752e:	d41e      	bmi.n	800756e <_malloc_r+0xc6>
 8007530:	2a0b      	cmp	r2, #11
 8007532:	d916      	bls.n	8007562 <_malloc_r+0xba>
 8007534:	1961      	adds	r1, r4, r5
 8007536:	42a3      	cmp	r3, r4
 8007538:	6025      	str	r5, [r4, #0]
 800753a:	bf18      	it	ne
 800753c:	6059      	strne	r1, [r3, #4]
 800753e:	6863      	ldr	r3, [r4, #4]
 8007540:	bf08      	it	eq
 8007542:	6031      	streq	r1, [r6, #0]
 8007544:	5162      	str	r2, [r4, r5]
 8007546:	604b      	str	r3, [r1, #4]
 8007548:	4638      	mov	r0, r7
 800754a:	f104 060b 	add.w	r6, r4, #11
 800754e:	f000 fbbd 	bl	8007ccc <__malloc_unlock>
 8007552:	f026 0607 	bic.w	r6, r6, #7
 8007556:	1d23      	adds	r3, r4, #4
 8007558:	1af2      	subs	r2, r6, r3
 800755a:	d0b6      	beq.n	80074ca <_malloc_r+0x22>
 800755c:	1b9b      	subs	r3, r3, r6
 800755e:	50a3      	str	r3, [r4, r2]
 8007560:	e7b3      	b.n	80074ca <_malloc_r+0x22>
 8007562:	6862      	ldr	r2, [r4, #4]
 8007564:	42a3      	cmp	r3, r4
 8007566:	bf0c      	ite	eq
 8007568:	6032      	streq	r2, [r6, #0]
 800756a:	605a      	strne	r2, [r3, #4]
 800756c:	e7ec      	b.n	8007548 <_malloc_r+0xa0>
 800756e:	4623      	mov	r3, r4
 8007570:	6864      	ldr	r4, [r4, #4]
 8007572:	e7b2      	b.n	80074da <_malloc_r+0x32>
 8007574:	4634      	mov	r4, r6
 8007576:	6876      	ldr	r6, [r6, #4]
 8007578:	e7b9      	b.n	80074ee <_malloc_r+0x46>
 800757a:	230c      	movs	r3, #12
 800757c:	603b      	str	r3, [r7, #0]
 800757e:	4638      	mov	r0, r7
 8007580:	f000 fba4 	bl	8007ccc <__malloc_unlock>
 8007584:	e7a1      	b.n	80074ca <_malloc_r+0x22>
 8007586:	6025      	str	r5, [r4, #0]
 8007588:	e7de      	b.n	8007548 <_malloc_r+0xa0>
 800758a:	bf00      	nop
 800758c:	20000404 	.word	0x20000404

08007590 <__sfputc_r>:
 8007590:	6893      	ldr	r3, [r2, #8]
 8007592:	3b01      	subs	r3, #1
 8007594:	2b00      	cmp	r3, #0
 8007596:	b410      	push	{r4}
 8007598:	6093      	str	r3, [r2, #8]
 800759a:	da08      	bge.n	80075ae <__sfputc_r+0x1e>
 800759c:	6994      	ldr	r4, [r2, #24]
 800759e:	42a3      	cmp	r3, r4
 80075a0:	db01      	blt.n	80075a6 <__sfputc_r+0x16>
 80075a2:	290a      	cmp	r1, #10
 80075a4:	d103      	bne.n	80075ae <__sfputc_r+0x1e>
 80075a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075aa:	f7ff bc31 	b.w	8006e10 <__swbuf_r>
 80075ae:	6813      	ldr	r3, [r2, #0]
 80075b0:	1c58      	adds	r0, r3, #1
 80075b2:	6010      	str	r0, [r2, #0]
 80075b4:	7019      	strb	r1, [r3, #0]
 80075b6:	4608      	mov	r0, r1
 80075b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075bc:	4770      	bx	lr

080075be <__sfputs_r>:
 80075be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075c0:	4606      	mov	r6, r0
 80075c2:	460f      	mov	r7, r1
 80075c4:	4614      	mov	r4, r2
 80075c6:	18d5      	adds	r5, r2, r3
 80075c8:	42ac      	cmp	r4, r5
 80075ca:	d101      	bne.n	80075d0 <__sfputs_r+0x12>
 80075cc:	2000      	movs	r0, #0
 80075ce:	e007      	b.n	80075e0 <__sfputs_r+0x22>
 80075d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075d4:	463a      	mov	r2, r7
 80075d6:	4630      	mov	r0, r6
 80075d8:	f7ff ffda 	bl	8007590 <__sfputc_r>
 80075dc:	1c43      	adds	r3, r0, #1
 80075de:	d1f3      	bne.n	80075c8 <__sfputs_r+0xa>
 80075e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080075e4 <_vfiprintf_r>:
 80075e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075e8:	460d      	mov	r5, r1
 80075ea:	b09d      	sub	sp, #116	; 0x74
 80075ec:	4614      	mov	r4, r2
 80075ee:	4698      	mov	r8, r3
 80075f0:	4606      	mov	r6, r0
 80075f2:	b118      	cbz	r0, 80075fc <_vfiprintf_r+0x18>
 80075f4:	6983      	ldr	r3, [r0, #24]
 80075f6:	b90b      	cbnz	r3, 80075fc <_vfiprintf_r+0x18>
 80075f8:	f7ff fde4 	bl	80071c4 <__sinit>
 80075fc:	4b89      	ldr	r3, [pc, #548]	; (8007824 <_vfiprintf_r+0x240>)
 80075fe:	429d      	cmp	r5, r3
 8007600:	d11b      	bne.n	800763a <_vfiprintf_r+0x56>
 8007602:	6875      	ldr	r5, [r6, #4]
 8007604:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007606:	07d9      	lsls	r1, r3, #31
 8007608:	d405      	bmi.n	8007616 <_vfiprintf_r+0x32>
 800760a:	89ab      	ldrh	r3, [r5, #12]
 800760c:	059a      	lsls	r2, r3, #22
 800760e:	d402      	bmi.n	8007616 <_vfiprintf_r+0x32>
 8007610:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007612:	f7ff fe75 	bl	8007300 <__retarget_lock_acquire_recursive>
 8007616:	89ab      	ldrh	r3, [r5, #12]
 8007618:	071b      	lsls	r3, r3, #28
 800761a:	d501      	bpl.n	8007620 <_vfiprintf_r+0x3c>
 800761c:	692b      	ldr	r3, [r5, #16]
 800761e:	b9eb      	cbnz	r3, 800765c <_vfiprintf_r+0x78>
 8007620:	4629      	mov	r1, r5
 8007622:	4630      	mov	r0, r6
 8007624:	f7ff fc46 	bl	8006eb4 <__swsetup_r>
 8007628:	b1c0      	cbz	r0, 800765c <_vfiprintf_r+0x78>
 800762a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800762c:	07dc      	lsls	r4, r3, #31
 800762e:	d50e      	bpl.n	800764e <_vfiprintf_r+0x6a>
 8007630:	f04f 30ff 	mov.w	r0, #4294967295
 8007634:	b01d      	add	sp, #116	; 0x74
 8007636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800763a:	4b7b      	ldr	r3, [pc, #492]	; (8007828 <_vfiprintf_r+0x244>)
 800763c:	429d      	cmp	r5, r3
 800763e:	d101      	bne.n	8007644 <_vfiprintf_r+0x60>
 8007640:	68b5      	ldr	r5, [r6, #8]
 8007642:	e7df      	b.n	8007604 <_vfiprintf_r+0x20>
 8007644:	4b79      	ldr	r3, [pc, #484]	; (800782c <_vfiprintf_r+0x248>)
 8007646:	429d      	cmp	r5, r3
 8007648:	bf08      	it	eq
 800764a:	68f5      	ldreq	r5, [r6, #12]
 800764c:	e7da      	b.n	8007604 <_vfiprintf_r+0x20>
 800764e:	89ab      	ldrh	r3, [r5, #12]
 8007650:	0598      	lsls	r0, r3, #22
 8007652:	d4ed      	bmi.n	8007630 <_vfiprintf_r+0x4c>
 8007654:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007656:	f7ff fe54 	bl	8007302 <__retarget_lock_release_recursive>
 800765a:	e7e9      	b.n	8007630 <_vfiprintf_r+0x4c>
 800765c:	2300      	movs	r3, #0
 800765e:	9309      	str	r3, [sp, #36]	; 0x24
 8007660:	2320      	movs	r3, #32
 8007662:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007666:	f8cd 800c 	str.w	r8, [sp, #12]
 800766a:	2330      	movs	r3, #48	; 0x30
 800766c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007830 <_vfiprintf_r+0x24c>
 8007670:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007674:	f04f 0901 	mov.w	r9, #1
 8007678:	4623      	mov	r3, r4
 800767a:	469a      	mov	sl, r3
 800767c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007680:	b10a      	cbz	r2, 8007686 <_vfiprintf_r+0xa2>
 8007682:	2a25      	cmp	r2, #37	; 0x25
 8007684:	d1f9      	bne.n	800767a <_vfiprintf_r+0x96>
 8007686:	ebba 0b04 	subs.w	fp, sl, r4
 800768a:	d00b      	beq.n	80076a4 <_vfiprintf_r+0xc0>
 800768c:	465b      	mov	r3, fp
 800768e:	4622      	mov	r2, r4
 8007690:	4629      	mov	r1, r5
 8007692:	4630      	mov	r0, r6
 8007694:	f7ff ff93 	bl	80075be <__sfputs_r>
 8007698:	3001      	adds	r0, #1
 800769a:	f000 80aa 	beq.w	80077f2 <_vfiprintf_r+0x20e>
 800769e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076a0:	445a      	add	r2, fp
 80076a2:	9209      	str	r2, [sp, #36]	; 0x24
 80076a4:	f89a 3000 	ldrb.w	r3, [sl]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	f000 80a2 	beq.w	80077f2 <_vfiprintf_r+0x20e>
 80076ae:	2300      	movs	r3, #0
 80076b0:	f04f 32ff 	mov.w	r2, #4294967295
 80076b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80076b8:	f10a 0a01 	add.w	sl, sl, #1
 80076bc:	9304      	str	r3, [sp, #16]
 80076be:	9307      	str	r3, [sp, #28]
 80076c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80076c4:	931a      	str	r3, [sp, #104]	; 0x68
 80076c6:	4654      	mov	r4, sl
 80076c8:	2205      	movs	r2, #5
 80076ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076ce:	4858      	ldr	r0, [pc, #352]	; (8007830 <_vfiprintf_r+0x24c>)
 80076d0:	f7f8 fd8e 	bl	80001f0 <memchr>
 80076d4:	9a04      	ldr	r2, [sp, #16]
 80076d6:	b9d8      	cbnz	r0, 8007710 <_vfiprintf_r+0x12c>
 80076d8:	06d1      	lsls	r1, r2, #27
 80076da:	bf44      	itt	mi
 80076dc:	2320      	movmi	r3, #32
 80076de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076e2:	0713      	lsls	r3, r2, #28
 80076e4:	bf44      	itt	mi
 80076e6:	232b      	movmi	r3, #43	; 0x2b
 80076e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076ec:	f89a 3000 	ldrb.w	r3, [sl]
 80076f0:	2b2a      	cmp	r3, #42	; 0x2a
 80076f2:	d015      	beq.n	8007720 <_vfiprintf_r+0x13c>
 80076f4:	9a07      	ldr	r2, [sp, #28]
 80076f6:	4654      	mov	r4, sl
 80076f8:	2000      	movs	r0, #0
 80076fa:	f04f 0c0a 	mov.w	ip, #10
 80076fe:	4621      	mov	r1, r4
 8007700:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007704:	3b30      	subs	r3, #48	; 0x30
 8007706:	2b09      	cmp	r3, #9
 8007708:	d94e      	bls.n	80077a8 <_vfiprintf_r+0x1c4>
 800770a:	b1b0      	cbz	r0, 800773a <_vfiprintf_r+0x156>
 800770c:	9207      	str	r2, [sp, #28]
 800770e:	e014      	b.n	800773a <_vfiprintf_r+0x156>
 8007710:	eba0 0308 	sub.w	r3, r0, r8
 8007714:	fa09 f303 	lsl.w	r3, r9, r3
 8007718:	4313      	orrs	r3, r2
 800771a:	9304      	str	r3, [sp, #16]
 800771c:	46a2      	mov	sl, r4
 800771e:	e7d2      	b.n	80076c6 <_vfiprintf_r+0xe2>
 8007720:	9b03      	ldr	r3, [sp, #12]
 8007722:	1d19      	adds	r1, r3, #4
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	9103      	str	r1, [sp, #12]
 8007728:	2b00      	cmp	r3, #0
 800772a:	bfbb      	ittet	lt
 800772c:	425b      	neglt	r3, r3
 800772e:	f042 0202 	orrlt.w	r2, r2, #2
 8007732:	9307      	strge	r3, [sp, #28]
 8007734:	9307      	strlt	r3, [sp, #28]
 8007736:	bfb8      	it	lt
 8007738:	9204      	strlt	r2, [sp, #16]
 800773a:	7823      	ldrb	r3, [r4, #0]
 800773c:	2b2e      	cmp	r3, #46	; 0x2e
 800773e:	d10c      	bne.n	800775a <_vfiprintf_r+0x176>
 8007740:	7863      	ldrb	r3, [r4, #1]
 8007742:	2b2a      	cmp	r3, #42	; 0x2a
 8007744:	d135      	bne.n	80077b2 <_vfiprintf_r+0x1ce>
 8007746:	9b03      	ldr	r3, [sp, #12]
 8007748:	1d1a      	adds	r2, r3, #4
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	9203      	str	r2, [sp, #12]
 800774e:	2b00      	cmp	r3, #0
 8007750:	bfb8      	it	lt
 8007752:	f04f 33ff 	movlt.w	r3, #4294967295
 8007756:	3402      	adds	r4, #2
 8007758:	9305      	str	r3, [sp, #20]
 800775a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007840 <_vfiprintf_r+0x25c>
 800775e:	7821      	ldrb	r1, [r4, #0]
 8007760:	2203      	movs	r2, #3
 8007762:	4650      	mov	r0, sl
 8007764:	f7f8 fd44 	bl	80001f0 <memchr>
 8007768:	b140      	cbz	r0, 800777c <_vfiprintf_r+0x198>
 800776a:	2340      	movs	r3, #64	; 0x40
 800776c:	eba0 000a 	sub.w	r0, r0, sl
 8007770:	fa03 f000 	lsl.w	r0, r3, r0
 8007774:	9b04      	ldr	r3, [sp, #16]
 8007776:	4303      	orrs	r3, r0
 8007778:	3401      	adds	r4, #1
 800777a:	9304      	str	r3, [sp, #16]
 800777c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007780:	482c      	ldr	r0, [pc, #176]	; (8007834 <_vfiprintf_r+0x250>)
 8007782:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007786:	2206      	movs	r2, #6
 8007788:	f7f8 fd32 	bl	80001f0 <memchr>
 800778c:	2800      	cmp	r0, #0
 800778e:	d03f      	beq.n	8007810 <_vfiprintf_r+0x22c>
 8007790:	4b29      	ldr	r3, [pc, #164]	; (8007838 <_vfiprintf_r+0x254>)
 8007792:	bb1b      	cbnz	r3, 80077dc <_vfiprintf_r+0x1f8>
 8007794:	9b03      	ldr	r3, [sp, #12]
 8007796:	3307      	adds	r3, #7
 8007798:	f023 0307 	bic.w	r3, r3, #7
 800779c:	3308      	adds	r3, #8
 800779e:	9303      	str	r3, [sp, #12]
 80077a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077a2:	443b      	add	r3, r7
 80077a4:	9309      	str	r3, [sp, #36]	; 0x24
 80077a6:	e767      	b.n	8007678 <_vfiprintf_r+0x94>
 80077a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80077ac:	460c      	mov	r4, r1
 80077ae:	2001      	movs	r0, #1
 80077b0:	e7a5      	b.n	80076fe <_vfiprintf_r+0x11a>
 80077b2:	2300      	movs	r3, #0
 80077b4:	3401      	adds	r4, #1
 80077b6:	9305      	str	r3, [sp, #20]
 80077b8:	4619      	mov	r1, r3
 80077ba:	f04f 0c0a 	mov.w	ip, #10
 80077be:	4620      	mov	r0, r4
 80077c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80077c4:	3a30      	subs	r2, #48	; 0x30
 80077c6:	2a09      	cmp	r2, #9
 80077c8:	d903      	bls.n	80077d2 <_vfiprintf_r+0x1ee>
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d0c5      	beq.n	800775a <_vfiprintf_r+0x176>
 80077ce:	9105      	str	r1, [sp, #20]
 80077d0:	e7c3      	b.n	800775a <_vfiprintf_r+0x176>
 80077d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80077d6:	4604      	mov	r4, r0
 80077d8:	2301      	movs	r3, #1
 80077da:	e7f0      	b.n	80077be <_vfiprintf_r+0x1da>
 80077dc:	ab03      	add	r3, sp, #12
 80077de:	9300      	str	r3, [sp, #0]
 80077e0:	462a      	mov	r2, r5
 80077e2:	4b16      	ldr	r3, [pc, #88]	; (800783c <_vfiprintf_r+0x258>)
 80077e4:	a904      	add	r1, sp, #16
 80077e6:	4630      	mov	r0, r6
 80077e8:	f3af 8000 	nop.w
 80077ec:	4607      	mov	r7, r0
 80077ee:	1c78      	adds	r0, r7, #1
 80077f0:	d1d6      	bne.n	80077a0 <_vfiprintf_r+0x1bc>
 80077f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80077f4:	07d9      	lsls	r1, r3, #31
 80077f6:	d405      	bmi.n	8007804 <_vfiprintf_r+0x220>
 80077f8:	89ab      	ldrh	r3, [r5, #12]
 80077fa:	059a      	lsls	r2, r3, #22
 80077fc:	d402      	bmi.n	8007804 <_vfiprintf_r+0x220>
 80077fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007800:	f7ff fd7f 	bl	8007302 <__retarget_lock_release_recursive>
 8007804:	89ab      	ldrh	r3, [r5, #12]
 8007806:	065b      	lsls	r3, r3, #25
 8007808:	f53f af12 	bmi.w	8007630 <_vfiprintf_r+0x4c>
 800780c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800780e:	e711      	b.n	8007634 <_vfiprintf_r+0x50>
 8007810:	ab03      	add	r3, sp, #12
 8007812:	9300      	str	r3, [sp, #0]
 8007814:	462a      	mov	r2, r5
 8007816:	4b09      	ldr	r3, [pc, #36]	; (800783c <_vfiprintf_r+0x258>)
 8007818:	a904      	add	r1, sp, #16
 800781a:	4630      	mov	r0, r6
 800781c:	f000 f880 	bl	8007920 <_printf_i>
 8007820:	e7e4      	b.n	80077ec <_vfiprintf_r+0x208>
 8007822:	bf00      	nop
 8007824:	08007e54 	.word	0x08007e54
 8007828:	08007e74 	.word	0x08007e74
 800782c:	08007e34 	.word	0x08007e34
 8007830:	08007e94 	.word	0x08007e94
 8007834:	08007e9e 	.word	0x08007e9e
 8007838:	00000000 	.word	0x00000000
 800783c:	080075bf 	.word	0x080075bf
 8007840:	08007e9a 	.word	0x08007e9a

08007844 <_printf_common>:
 8007844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007848:	4616      	mov	r6, r2
 800784a:	4699      	mov	r9, r3
 800784c:	688a      	ldr	r2, [r1, #8]
 800784e:	690b      	ldr	r3, [r1, #16]
 8007850:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007854:	4293      	cmp	r3, r2
 8007856:	bfb8      	it	lt
 8007858:	4613      	movlt	r3, r2
 800785a:	6033      	str	r3, [r6, #0]
 800785c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007860:	4607      	mov	r7, r0
 8007862:	460c      	mov	r4, r1
 8007864:	b10a      	cbz	r2, 800786a <_printf_common+0x26>
 8007866:	3301      	adds	r3, #1
 8007868:	6033      	str	r3, [r6, #0]
 800786a:	6823      	ldr	r3, [r4, #0]
 800786c:	0699      	lsls	r1, r3, #26
 800786e:	bf42      	ittt	mi
 8007870:	6833      	ldrmi	r3, [r6, #0]
 8007872:	3302      	addmi	r3, #2
 8007874:	6033      	strmi	r3, [r6, #0]
 8007876:	6825      	ldr	r5, [r4, #0]
 8007878:	f015 0506 	ands.w	r5, r5, #6
 800787c:	d106      	bne.n	800788c <_printf_common+0x48>
 800787e:	f104 0a19 	add.w	sl, r4, #25
 8007882:	68e3      	ldr	r3, [r4, #12]
 8007884:	6832      	ldr	r2, [r6, #0]
 8007886:	1a9b      	subs	r3, r3, r2
 8007888:	42ab      	cmp	r3, r5
 800788a:	dc26      	bgt.n	80078da <_printf_common+0x96>
 800788c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007890:	1e13      	subs	r3, r2, #0
 8007892:	6822      	ldr	r2, [r4, #0]
 8007894:	bf18      	it	ne
 8007896:	2301      	movne	r3, #1
 8007898:	0692      	lsls	r2, r2, #26
 800789a:	d42b      	bmi.n	80078f4 <_printf_common+0xb0>
 800789c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80078a0:	4649      	mov	r1, r9
 80078a2:	4638      	mov	r0, r7
 80078a4:	47c0      	blx	r8
 80078a6:	3001      	adds	r0, #1
 80078a8:	d01e      	beq.n	80078e8 <_printf_common+0xa4>
 80078aa:	6823      	ldr	r3, [r4, #0]
 80078ac:	68e5      	ldr	r5, [r4, #12]
 80078ae:	6832      	ldr	r2, [r6, #0]
 80078b0:	f003 0306 	and.w	r3, r3, #6
 80078b4:	2b04      	cmp	r3, #4
 80078b6:	bf08      	it	eq
 80078b8:	1aad      	subeq	r5, r5, r2
 80078ba:	68a3      	ldr	r3, [r4, #8]
 80078bc:	6922      	ldr	r2, [r4, #16]
 80078be:	bf0c      	ite	eq
 80078c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80078c4:	2500      	movne	r5, #0
 80078c6:	4293      	cmp	r3, r2
 80078c8:	bfc4      	itt	gt
 80078ca:	1a9b      	subgt	r3, r3, r2
 80078cc:	18ed      	addgt	r5, r5, r3
 80078ce:	2600      	movs	r6, #0
 80078d0:	341a      	adds	r4, #26
 80078d2:	42b5      	cmp	r5, r6
 80078d4:	d11a      	bne.n	800790c <_printf_common+0xc8>
 80078d6:	2000      	movs	r0, #0
 80078d8:	e008      	b.n	80078ec <_printf_common+0xa8>
 80078da:	2301      	movs	r3, #1
 80078dc:	4652      	mov	r2, sl
 80078de:	4649      	mov	r1, r9
 80078e0:	4638      	mov	r0, r7
 80078e2:	47c0      	blx	r8
 80078e4:	3001      	adds	r0, #1
 80078e6:	d103      	bne.n	80078f0 <_printf_common+0xac>
 80078e8:	f04f 30ff 	mov.w	r0, #4294967295
 80078ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078f0:	3501      	adds	r5, #1
 80078f2:	e7c6      	b.n	8007882 <_printf_common+0x3e>
 80078f4:	18e1      	adds	r1, r4, r3
 80078f6:	1c5a      	adds	r2, r3, #1
 80078f8:	2030      	movs	r0, #48	; 0x30
 80078fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80078fe:	4422      	add	r2, r4
 8007900:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007904:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007908:	3302      	adds	r3, #2
 800790a:	e7c7      	b.n	800789c <_printf_common+0x58>
 800790c:	2301      	movs	r3, #1
 800790e:	4622      	mov	r2, r4
 8007910:	4649      	mov	r1, r9
 8007912:	4638      	mov	r0, r7
 8007914:	47c0      	blx	r8
 8007916:	3001      	adds	r0, #1
 8007918:	d0e6      	beq.n	80078e8 <_printf_common+0xa4>
 800791a:	3601      	adds	r6, #1
 800791c:	e7d9      	b.n	80078d2 <_printf_common+0x8e>
	...

08007920 <_printf_i>:
 8007920:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007924:	7e0f      	ldrb	r7, [r1, #24]
 8007926:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007928:	2f78      	cmp	r7, #120	; 0x78
 800792a:	4691      	mov	r9, r2
 800792c:	4680      	mov	r8, r0
 800792e:	460c      	mov	r4, r1
 8007930:	469a      	mov	sl, r3
 8007932:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007936:	d807      	bhi.n	8007948 <_printf_i+0x28>
 8007938:	2f62      	cmp	r7, #98	; 0x62
 800793a:	d80a      	bhi.n	8007952 <_printf_i+0x32>
 800793c:	2f00      	cmp	r7, #0
 800793e:	f000 80d8 	beq.w	8007af2 <_printf_i+0x1d2>
 8007942:	2f58      	cmp	r7, #88	; 0x58
 8007944:	f000 80a3 	beq.w	8007a8e <_printf_i+0x16e>
 8007948:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800794c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007950:	e03a      	b.n	80079c8 <_printf_i+0xa8>
 8007952:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007956:	2b15      	cmp	r3, #21
 8007958:	d8f6      	bhi.n	8007948 <_printf_i+0x28>
 800795a:	a101      	add	r1, pc, #4	; (adr r1, 8007960 <_printf_i+0x40>)
 800795c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007960:	080079b9 	.word	0x080079b9
 8007964:	080079cd 	.word	0x080079cd
 8007968:	08007949 	.word	0x08007949
 800796c:	08007949 	.word	0x08007949
 8007970:	08007949 	.word	0x08007949
 8007974:	08007949 	.word	0x08007949
 8007978:	080079cd 	.word	0x080079cd
 800797c:	08007949 	.word	0x08007949
 8007980:	08007949 	.word	0x08007949
 8007984:	08007949 	.word	0x08007949
 8007988:	08007949 	.word	0x08007949
 800798c:	08007ad9 	.word	0x08007ad9
 8007990:	080079fd 	.word	0x080079fd
 8007994:	08007abb 	.word	0x08007abb
 8007998:	08007949 	.word	0x08007949
 800799c:	08007949 	.word	0x08007949
 80079a0:	08007afb 	.word	0x08007afb
 80079a4:	08007949 	.word	0x08007949
 80079a8:	080079fd 	.word	0x080079fd
 80079ac:	08007949 	.word	0x08007949
 80079b0:	08007949 	.word	0x08007949
 80079b4:	08007ac3 	.word	0x08007ac3
 80079b8:	682b      	ldr	r3, [r5, #0]
 80079ba:	1d1a      	adds	r2, r3, #4
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	602a      	str	r2, [r5, #0]
 80079c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80079c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80079c8:	2301      	movs	r3, #1
 80079ca:	e0a3      	b.n	8007b14 <_printf_i+0x1f4>
 80079cc:	6820      	ldr	r0, [r4, #0]
 80079ce:	6829      	ldr	r1, [r5, #0]
 80079d0:	0606      	lsls	r6, r0, #24
 80079d2:	f101 0304 	add.w	r3, r1, #4
 80079d6:	d50a      	bpl.n	80079ee <_printf_i+0xce>
 80079d8:	680e      	ldr	r6, [r1, #0]
 80079da:	602b      	str	r3, [r5, #0]
 80079dc:	2e00      	cmp	r6, #0
 80079de:	da03      	bge.n	80079e8 <_printf_i+0xc8>
 80079e0:	232d      	movs	r3, #45	; 0x2d
 80079e2:	4276      	negs	r6, r6
 80079e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079e8:	485e      	ldr	r0, [pc, #376]	; (8007b64 <_printf_i+0x244>)
 80079ea:	230a      	movs	r3, #10
 80079ec:	e019      	b.n	8007a22 <_printf_i+0x102>
 80079ee:	680e      	ldr	r6, [r1, #0]
 80079f0:	602b      	str	r3, [r5, #0]
 80079f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80079f6:	bf18      	it	ne
 80079f8:	b236      	sxthne	r6, r6
 80079fa:	e7ef      	b.n	80079dc <_printf_i+0xbc>
 80079fc:	682b      	ldr	r3, [r5, #0]
 80079fe:	6820      	ldr	r0, [r4, #0]
 8007a00:	1d19      	adds	r1, r3, #4
 8007a02:	6029      	str	r1, [r5, #0]
 8007a04:	0601      	lsls	r1, r0, #24
 8007a06:	d501      	bpl.n	8007a0c <_printf_i+0xec>
 8007a08:	681e      	ldr	r6, [r3, #0]
 8007a0a:	e002      	b.n	8007a12 <_printf_i+0xf2>
 8007a0c:	0646      	lsls	r6, r0, #25
 8007a0e:	d5fb      	bpl.n	8007a08 <_printf_i+0xe8>
 8007a10:	881e      	ldrh	r6, [r3, #0]
 8007a12:	4854      	ldr	r0, [pc, #336]	; (8007b64 <_printf_i+0x244>)
 8007a14:	2f6f      	cmp	r7, #111	; 0x6f
 8007a16:	bf0c      	ite	eq
 8007a18:	2308      	moveq	r3, #8
 8007a1a:	230a      	movne	r3, #10
 8007a1c:	2100      	movs	r1, #0
 8007a1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007a22:	6865      	ldr	r5, [r4, #4]
 8007a24:	60a5      	str	r5, [r4, #8]
 8007a26:	2d00      	cmp	r5, #0
 8007a28:	bfa2      	ittt	ge
 8007a2a:	6821      	ldrge	r1, [r4, #0]
 8007a2c:	f021 0104 	bicge.w	r1, r1, #4
 8007a30:	6021      	strge	r1, [r4, #0]
 8007a32:	b90e      	cbnz	r6, 8007a38 <_printf_i+0x118>
 8007a34:	2d00      	cmp	r5, #0
 8007a36:	d04d      	beq.n	8007ad4 <_printf_i+0x1b4>
 8007a38:	4615      	mov	r5, r2
 8007a3a:	fbb6 f1f3 	udiv	r1, r6, r3
 8007a3e:	fb03 6711 	mls	r7, r3, r1, r6
 8007a42:	5dc7      	ldrb	r7, [r0, r7]
 8007a44:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007a48:	4637      	mov	r7, r6
 8007a4a:	42bb      	cmp	r3, r7
 8007a4c:	460e      	mov	r6, r1
 8007a4e:	d9f4      	bls.n	8007a3a <_printf_i+0x11a>
 8007a50:	2b08      	cmp	r3, #8
 8007a52:	d10b      	bne.n	8007a6c <_printf_i+0x14c>
 8007a54:	6823      	ldr	r3, [r4, #0]
 8007a56:	07de      	lsls	r6, r3, #31
 8007a58:	d508      	bpl.n	8007a6c <_printf_i+0x14c>
 8007a5a:	6923      	ldr	r3, [r4, #16]
 8007a5c:	6861      	ldr	r1, [r4, #4]
 8007a5e:	4299      	cmp	r1, r3
 8007a60:	bfde      	ittt	le
 8007a62:	2330      	movle	r3, #48	; 0x30
 8007a64:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007a68:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007a6c:	1b52      	subs	r2, r2, r5
 8007a6e:	6122      	str	r2, [r4, #16]
 8007a70:	f8cd a000 	str.w	sl, [sp]
 8007a74:	464b      	mov	r3, r9
 8007a76:	aa03      	add	r2, sp, #12
 8007a78:	4621      	mov	r1, r4
 8007a7a:	4640      	mov	r0, r8
 8007a7c:	f7ff fee2 	bl	8007844 <_printf_common>
 8007a80:	3001      	adds	r0, #1
 8007a82:	d14c      	bne.n	8007b1e <_printf_i+0x1fe>
 8007a84:	f04f 30ff 	mov.w	r0, #4294967295
 8007a88:	b004      	add	sp, #16
 8007a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a8e:	4835      	ldr	r0, [pc, #212]	; (8007b64 <_printf_i+0x244>)
 8007a90:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007a94:	6829      	ldr	r1, [r5, #0]
 8007a96:	6823      	ldr	r3, [r4, #0]
 8007a98:	f851 6b04 	ldr.w	r6, [r1], #4
 8007a9c:	6029      	str	r1, [r5, #0]
 8007a9e:	061d      	lsls	r5, r3, #24
 8007aa0:	d514      	bpl.n	8007acc <_printf_i+0x1ac>
 8007aa2:	07df      	lsls	r7, r3, #31
 8007aa4:	bf44      	itt	mi
 8007aa6:	f043 0320 	orrmi.w	r3, r3, #32
 8007aaa:	6023      	strmi	r3, [r4, #0]
 8007aac:	b91e      	cbnz	r6, 8007ab6 <_printf_i+0x196>
 8007aae:	6823      	ldr	r3, [r4, #0]
 8007ab0:	f023 0320 	bic.w	r3, r3, #32
 8007ab4:	6023      	str	r3, [r4, #0]
 8007ab6:	2310      	movs	r3, #16
 8007ab8:	e7b0      	b.n	8007a1c <_printf_i+0xfc>
 8007aba:	6823      	ldr	r3, [r4, #0]
 8007abc:	f043 0320 	orr.w	r3, r3, #32
 8007ac0:	6023      	str	r3, [r4, #0]
 8007ac2:	2378      	movs	r3, #120	; 0x78
 8007ac4:	4828      	ldr	r0, [pc, #160]	; (8007b68 <_printf_i+0x248>)
 8007ac6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007aca:	e7e3      	b.n	8007a94 <_printf_i+0x174>
 8007acc:	0659      	lsls	r1, r3, #25
 8007ace:	bf48      	it	mi
 8007ad0:	b2b6      	uxthmi	r6, r6
 8007ad2:	e7e6      	b.n	8007aa2 <_printf_i+0x182>
 8007ad4:	4615      	mov	r5, r2
 8007ad6:	e7bb      	b.n	8007a50 <_printf_i+0x130>
 8007ad8:	682b      	ldr	r3, [r5, #0]
 8007ada:	6826      	ldr	r6, [r4, #0]
 8007adc:	6961      	ldr	r1, [r4, #20]
 8007ade:	1d18      	adds	r0, r3, #4
 8007ae0:	6028      	str	r0, [r5, #0]
 8007ae2:	0635      	lsls	r5, r6, #24
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	d501      	bpl.n	8007aec <_printf_i+0x1cc>
 8007ae8:	6019      	str	r1, [r3, #0]
 8007aea:	e002      	b.n	8007af2 <_printf_i+0x1d2>
 8007aec:	0670      	lsls	r0, r6, #25
 8007aee:	d5fb      	bpl.n	8007ae8 <_printf_i+0x1c8>
 8007af0:	8019      	strh	r1, [r3, #0]
 8007af2:	2300      	movs	r3, #0
 8007af4:	6123      	str	r3, [r4, #16]
 8007af6:	4615      	mov	r5, r2
 8007af8:	e7ba      	b.n	8007a70 <_printf_i+0x150>
 8007afa:	682b      	ldr	r3, [r5, #0]
 8007afc:	1d1a      	adds	r2, r3, #4
 8007afe:	602a      	str	r2, [r5, #0]
 8007b00:	681d      	ldr	r5, [r3, #0]
 8007b02:	6862      	ldr	r2, [r4, #4]
 8007b04:	2100      	movs	r1, #0
 8007b06:	4628      	mov	r0, r5
 8007b08:	f7f8 fb72 	bl	80001f0 <memchr>
 8007b0c:	b108      	cbz	r0, 8007b12 <_printf_i+0x1f2>
 8007b0e:	1b40      	subs	r0, r0, r5
 8007b10:	6060      	str	r0, [r4, #4]
 8007b12:	6863      	ldr	r3, [r4, #4]
 8007b14:	6123      	str	r3, [r4, #16]
 8007b16:	2300      	movs	r3, #0
 8007b18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b1c:	e7a8      	b.n	8007a70 <_printf_i+0x150>
 8007b1e:	6923      	ldr	r3, [r4, #16]
 8007b20:	462a      	mov	r2, r5
 8007b22:	4649      	mov	r1, r9
 8007b24:	4640      	mov	r0, r8
 8007b26:	47d0      	blx	sl
 8007b28:	3001      	adds	r0, #1
 8007b2a:	d0ab      	beq.n	8007a84 <_printf_i+0x164>
 8007b2c:	6823      	ldr	r3, [r4, #0]
 8007b2e:	079b      	lsls	r3, r3, #30
 8007b30:	d413      	bmi.n	8007b5a <_printf_i+0x23a>
 8007b32:	68e0      	ldr	r0, [r4, #12]
 8007b34:	9b03      	ldr	r3, [sp, #12]
 8007b36:	4298      	cmp	r0, r3
 8007b38:	bfb8      	it	lt
 8007b3a:	4618      	movlt	r0, r3
 8007b3c:	e7a4      	b.n	8007a88 <_printf_i+0x168>
 8007b3e:	2301      	movs	r3, #1
 8007b40:	4632      	mov	r2, r6
 8007b42:	4649      	mov	r1, r9
 8007b44:	4640      	mov	r0, r8
 8007b46:	47d0      	blx	sl
 8007b48:	3001      	adds	r0, #1
 8007b4a:	d09b      	beq.n	8007a84 <_printf_i+0x164>
 8007b4c:	3501      	adds	r5, #1
 8007b4e:	68e3      	ldr	r3, [r4, #12]
 8007b50:	9903      	ldr	r1, [sp, #12]
 8007b52:	1a5b      	subs	r3, r3, r1
 8007b54:	42ab      	cmp	r3, r5
 8007b56:	dcf2      	bgt.n	8007b3e <_printf_i+0x21e>
 8007b58:	e7eb      	b.n	8007b32 <_printf_i+0x212>
 8007b5a:	2500      	movs	r5, #0
 8007b5c:	f104 0619 	add.w	r6, r4, #25
 8007b60:	e7f5      	b.n	8007b4e <_printf_i+0x22e>
 8007b62:	bf00      	nop
 8007b64:	08007ea5 	.word	0x08007ea5
 8007b68:	08007eb6 	.word	0x08007eb6

08007b6c <_sbrk_r>:
 8007b6c:	b538      	push	{r3, r4, r5, lr}
 8007b6e:	4d06      	ldr	r5, [pc, #24]	; (8007b88 <_sbrk_r+0x1c>)
 8007b70:	2300      	movs	r3, #0
 8007b72:	4604      	mov	r4, r0
 8007b74:	4608      	mov	r0, r1
 8007b76:	602b      	str	r3, [r5, #0]
 8007b78:	f7f9 fdbc 	bl	80016f4 <_sbrk>
 8007b7c:	1c43      	adds	r3, r0, #1
 8007b7e:	d102      	bne.n	8007b86 <_sbrk_r+0x1a>
 8007b80:	682b      	ldr	r3, [r5, #0]
 8007b82:	b103      	cbz	r3, 8007b86 <_sbrk_r+0x1a>
 8007b84:	6023      	str	r3, [r4, #0]
 8007b86:	bd38      	pop	{r3, r4, r5, pc}
 8007b88:	2000040c 	.word	0x2000040c

08007b8c <__sread>:
 8007b8c:	b510      	push	{r4, lr}
 8007b8e:	460c      	mov	r4, r1
 8007b90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b94:	f000 f8a0 	bl	8007cd8 <_read_r>
 8007b98:	2800      	cmp	r0, #0
 8007b9a:	bfab      	itete	ge
 8007b9c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007b9e:	89a3      	ldrhlt	r3, [r4, #12]
 8007ba0:	181b      	addge	r3, r3, r0
 8007ba2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007ba6:	bfac      	ite	ge
 8007ba8:	6563      	strge	r3, [r4, #84]	; 0x54
 8007baa:	81a3      	strhlt	r3, [r4, #12]
 8007bac:	bd10      	pop	{r4, pc}

08007bae <__swrite>:
 8007bae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bb2:	461f      	mov	r7, r3
 8007bb4:	898b      	ldrh	r3, [r1, #12]
 8007bb6:	05db      	lsls	r3, r3, #23
 8007bb8:	4605      	mov	r5, r0
 8007bba:	460c      	mov	r4, r1
 8007bbc:	4616      	mov	r6, r2
 8007bbe:	d505      	bpl.n	8007bcc <__swrite+0x1e>
 8007bc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bc4:	2302      	movs	r3, #2
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	f000 f868 	bl	8007c9c <_lseek_r>
 8007bcc:	89a3      	ldrh	r3, [r4, #12]
 8007bce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007bd2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007bd6:	81a3      	strh	r3, [r4, #12]
 8007bd8:	4632      	mov	r2, r6
 8007bda:	463b      	mov	r3, r7
 8007bdc:	4628      	mov	r0, r5
 8007bde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007be2:	f000 b817 	b.w	8007c14 <_write_r>

08007be6 <__sseek>:
 8007be6:	b510      	push	{r4, lr}
 8007be8:	460c      	mov	r4, r1
 8007bea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bee:	f000 f855 	bl	8007c9c <_lseek_r>
 8007bf2:	1c43      	adds	r3, r0, #1
 8007bf4:	89a3      	ldrh	r3, [r4, #12]
 8007bf6:	bf15      	itete	ne
 8007bf8:	6560      	strne	r0, [r4, #84]	; 0x54
 8007bfa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007bfe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007c02:	81a3      	strheq	r3, [r4, #12]
 8007c04:	bf18      	it	ne
 8007c06:	81a3      	strhne	r3, [r4, #12]
 8007c08:	bd10      	pop	{r4, pc}

08007c0a <__sclose>:
 8007c0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c0e:	f000 b813 	b.w	8007c38 <_close_r>
	...

08007c14 <_write_r>:
 8007c14:	b538      	push	{r3, r4, r5, lr}
 8007c16:	4d07      	ldr	r5, [pc, #28]	; (8007c34 <_write_r+0x20>)
 8007c18:	4604      	mov	r4, r0
 8007c1a:	4608      	mov	r0, r1
 8007c1c:	4611      	mov	r1, r2
 8007c1e:	2200      	movs	r2, #0
 8007c20:	602a      	str	r2, [r5, #0]
 8007c22:	461a      	mov	r2, r3
 8007c24:	f7f9 fd15 	bl	8001652 <_write>
 8007c28:	1c43      	adds	r3, r0, #1
 8007c2a:	d102      	bne.n	8007c32 <_write_r+0x1e>
 8007c2c:	682b      	ldr	r3, [r5, #0]
 8007c2e:	b103      	cbz	r3, 8007c32 <_write_r+0x1e>
 8007c30:	6023      	str	r3, [r4, #0]
 8007c32:	bd38      	pop	{r3, r4, r5, pc}
 8007c34:	2000040c 	.word	0x2000040c

08007c38 <_close_r>:
 8007c38:	b538      	push	{r3, r4, r5, lr}
 8007c3a:	4d06      	ldr	r5, [pc, #24]	; (8007c54 <_close_r+0x1c>)
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	4604      	mov	r4, r0
 8007c40:	4608      	mov	r0, r1
 8007c42:	602b      	str	r3, [r5, #0]
 8007c44:	f7f9 fd21 	bl	800168a <_close>
 8007c48:	1c43      	adds	r3, r0, #1
 8007c4a:	d102      	bne.n	8007c52 <_close_r+0x1a>
 8007c4c:	682b      	ldr	r3, [r5, #0]
 8007c4e:	b103      	cbz	r3, 8007c52 <_close_r+0x1a>
 8007c50:	6023      	str	r3, [r4, #0]
 8007c52:	bd38      	pop	{r3, r4, r5, pc}
 8007c54:	2000040c 	.word	0x2000040c

08007c58 <_fstat_r>:
 8007c58:	b538      	push	{r3, r4, r5, lr}
 8007c5a:	4d07      	ldr	r5, [pc, #28]	; (8007c78 <_fstat_r+0x20>)
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	4604      	mov	r4, r0
 8007c60:	4608      	mov	r0, r1
 8007c62:	4611      	mov	r1, r2
 8007c64:	602b      	str	r3, [r5, #0]
 8007c66:	f7f9 fd1c 	bl	80016a2 <_fstat>
 8007c6a:	1c43      	adds	r3, r0, #1
 8007c6c:	d102      	bne.n	8007c74 <_fstat_r+0x1c>
 8007c6e:	682b      	ldr	r3, [r5, #0]
 8007c70:	b103      	cbz	r3, 8007c74 <_fstat_r+0x1c>
 8007c72:	6023      	str	r3, [r4, #0]
 8007c74:	bd38      	pop	{r3, r4, r5, pc}
 8007c76:	bf00      	nop
 8007c78:	2000040c 	.word	0x2000040c

08007c7c <_isatty_r>:
 8007c7c:	b538      	push	{r3, r4, r5, lr}
 8007c7e:	4d06      	ldr	r5, [pc, #24]	; (8007c98 <_isatty_r+0x1c>)
 8007c80:	2300      	movs	r3, #0
 8007c82:	4604      	mov	r4, r0
 8007c84:	4608      	mov	r0, r1
 8007c86:	602b      	str	r3, [r5, #0]
 8007c88:	f7f9 fd1b 	bl	80016c2 <_isatty>
 8007c8c:	1c43      	adds	r3, r0, #1
 8007c8e:	d102      	bne.n	8007c96 <_isatty_r+0x1a>
 8007c90:	682b      	ldr	r3, [r5, #0]
 8007c92:	b103      	cbz	r3, 8007c96 <_isatty_r+0x1a>
 8007c94:	6023      	str	r3, [r4, #0]
 8007c96:	bd38      	pop	{r3, r4, r5, pc}
 8007c98:	2000040c 	.word	0x2000040c

08007c9c <_lseek_r>:
 8007c9c:	b538      	push	{r3, r4, r5, lr}
 8007c9e:	4d07      	ldr	r5, [pc, #28]	; (8007cbc <_lseek_r+0x20>)
 8007ca0:	4604      	mov	r4, r0
 8007ca2:	4608      	mov	r0, r1
 8007ca4:	4611      	mov	r1, r2
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	602a      	str	r2, [r5, #0]
 8007caa:	461a      	mov	r2, r3
 8007cac:	f7f9 fd14 	bl	80016d8 <_lseek>
 8007cb0:	1c43      	adds	r3, r0, #1
 8007cb2:	d102      	bne.n	8007cba <_lseek_r+0x1e>
 8007cb4:	682b      	ldr	r3, [r5, #0]
 8007cb6:	b103      	cbz	r3, 8007cba <_lseek_r+0x1e>
 8007cb8:	6023      	str	r3, [r4, #0]
 8007cba:	bd38      	pop	{r3, r4, r5, pc}
 8007cbc:	2000040c 	.word	0x2000040c

08007cc0 <__malloc_lock>:
 8007cc0:	4801      	ldr	r0, [pc, #4]	; (8007cc8 <__malloc_lock+0x8>)
 8007cc2:	f7ff bb1d 	b.w	8007300 <__retarget_lock_acquire_recursive>
 8007cc6:	bf00      	nop
 8007cc8:	20000400 	.word	0x20000400

08007ccc <__malloc_unlock>:
 8007ccc:	4801      	ldr	r0, [pc, #4]	; (8007cd4 <__malloc_unlock+0x8>)
 8007cce:	f7ff bb18 	b.w	8007302 <__retarget_lock_release_recursive>
 8007cd2:	bf00      	nop
 8007cd4:	20000400 	.word	0x20000400

08007cd8 <_read_r>:
 8007cd8:	b538      	push	{r3, r4, r5, lr}
 8007cda:	4d07      	ldr	r5, [pc, #28]	; (8007cf8 <_read_r+0x20>)
 8007cdc:	4604      	mov	r4, r0
 8007cde:	4608      	mov	r0, r1
 8007ce0:	4611      	mov	r1, r2
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	602a      	str	r2, [r5, #0]
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	f7f9 fc96 	bl	8001618 <_read>
 8007cec:	1c43      	adds	r3, r0, #1
 8007cee:	d102      	bne.n	8007cf6 <_read_r+0x1e>
 8007cf0:	682b      	ldr	r3, [r5, #0]
 8007cf2:	b103      	cbz	r3, 8007cf6 <_read_r+0x1e>
 8007cf4:	6023      	str	r3, [r4, #0]
 8007cf6:	bd38      	pop	{r3, r4, r5, pc}
 8007cf8:	2000040c 	.word	0x2000040c

08007cfc <_init>:
 8007cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cfe:	bf00      	nop
 8007d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d02:	bc08      	pop	{r3}
 8007d04:	469e      	mov	lr, r3
 8007d06:	4770      	bx	lr

08007d08 <_fini>:
 8007d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d0a:	bf00      	nop
 8007d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d0e:	bc08      	pop	{r3}
 8007d10:	469e      	mov	lr, r3
 8007d12:	4770      	bx	lr
